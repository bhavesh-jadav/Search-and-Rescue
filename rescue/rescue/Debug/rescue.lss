
rescue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800200  00003b70  00003c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000578  0080026e  0080026e  00003c72  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00003c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00007a20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002802  00000000  00000000  00007ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000042d  00000000  00000000  0000a2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cff  00000000  00000000  0000a70f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a44  00000000  00000000  0000b410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000953  00000000  00000000  0000be54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002cc9  00000000  00000000  0000c7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000f470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_5>
      18:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__vector_25+0x90>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e7       	ldi	r30, 0x70	; 112
     17e:	fb e3       	ldi	r31, 0x3B	; 59
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 36       	cpi	r26, 0x6E	; 110
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	17 e0       	ldi	r17, 0x07	; 7
     192:	ae e6       	ldi	r26, 0x6E	; 110
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a6 3e       	cpi	r26, 0xE6	; 230
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 3a 19 	call	0x3274	; 0x3274 <main>
     1a4:	0c 94 b6 1d 	jmp	0x3b6c	; 0x3b6c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
     1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x8>
     288:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x01);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x0E);
     29c:	8e e0       	ldi	r24, 0x0E	; 14
     29e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x80);
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
		
}
     2a8:	08 95       	ret

000002aa <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2aa:	98 b1       	in	r25, 0x08	; 8
     2ac:	9f 70       	andi	r25, 0x0F	; 15
     2ae:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2b0:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2b2:	28 2f       	mov	r18, r24
     2b4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b6:	92 2b       	or	r25, r18
     2b8:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ba:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2be:	42 9a       	sbi	0x08, 2	; 8
     2c0:	ef ef       	ldi	r30, 0xFF	; 255
     2c2:	f7 e4       	ldi	r31, 0x47	; 71
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_wr_char+0x1a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_wr_char+0x20>
     2ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2cc:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ce:	98 b1       	in	r25, 0x08	; 8
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d4:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d6:	82 95       	swap	r24
     2d8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2da:	89 2b       	or	r24, r25
     2dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2de:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2e2:	42 9a       	sbi	0x08, 2	; 8
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	97 e4       	ldi	r25, 0x47	; 71
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_wr_char+0x3e>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_wr_char+0x44>
     2ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2f0:	42 98       	cbi	0x08, 2	; 8
}
     2f2:	08 95       	ret

000002f4 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
     2fa:	08 95       	ret

000002fc <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	while(*str != '\0')
     302:	88 81       	ld	r24, Y
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     308:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     30a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     30e:	89 91       	ld	r24, Y+
     310:	88 23       	and	r24, r24
     312:	d9 f7       	brne	.-10     	; 0x30a <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	79 f0       	breq	.+30     	; 0x33c <lcd_cursor+0x22>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	18 f4       	brcc	.+6      	; 0x328 <lcd_cursor+0xe>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	c9 f4       	brne	.+50     	; 0x358 <lcd_cursor+0x3e>
     326:	05 c0       	rjmp	.+10     	; 0x332 <lcd_cursor+0x18>
     328:	83 30       	cpi	r24, 0x03	; 3
     32a:	69 f0       	breq	.+26     	; 0x346 <lcd_cursor+0x2c>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	a1 f4       	brne	.+40     	; 0x358 <lcd_cursor+0x3e>
     330:	0f c0       	rjmp	.+30     	; 0x350 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     332:	86 2f       	mov	r24, r22
     334:	81 58       	subi	r24, 0x81	; 129
     336:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     33a:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     33c:	86 2f       	mov	r24, r22
     33e:	81 54       	subi	r24, 0x41	; 65
     340:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     344:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     346:	86 2f       	mov	r24, r22
     348:	8d 56       	subi	r24, 0x6D	; 109
     34a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     34e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     350:	86 2f       	mov	r24, r22
     352:	8d 52       	subi	r24, 0x2D	; 45
     354:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     358:	08 95       	ret

0000035a <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	8a 01       	movw	r16, r20
     364:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <lcd_print+0x14>
     36a:	66 23       	and	r22, r22
     36c:	19 f4       	brne	.+6      	; 0x374 <lcd_print+0x1a>
	{
		lcd_home();
     36e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_home>
     372:	02 c0       	rjmp	.+4      	; 0x378 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     374:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_cursor>
	}
	if(digits==5 || flag==1)
     378:	c5 30       	cpi	r28, 0x05	; 5
     37a:	d1 05       	cpc	r29, r1
     37c:	71 f4       	brne	.+28     	; 0x39a <lcd_print+0x40>
	{
		million=value/10000+48;
     37e:	c8 01       	movw	r24, r16
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	77 e2       	ldi	r23, 0x27	; 39
     384:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     388:	cb 01       	movw	r24, r22
     38a:	c0 96       	adiw	r24, 0x30	; 48
     38c:	90 93 bc 07 	sts	0x07BC, r25
     390:	80 93 bb 07 	sts	0x07BB, r24
		lcd_wr_char(million);
     394:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     39a:	c4 30       	cpi	r28, 0x04	; 4
     39c:	d1 05       	cpc	r29, r1
     39e:	b9 f4       	brne	.+46     	; 0x3ce <lcd_print+0x74>
	{
		temp = value/1000;
     3a0:	c8 01       	movw	r24, r16
     3a2:	68 ee       	ldi	r22, 0xE8	; 232
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     3aa:	cb 01       	movw	r24, r22
     3ac:	70 93 d4 07 	sts	0x07D4, r23
     3b0:	60 93 d3 07 	sts	0x07D3, r22
		thousand = temp%10 + 48;
     3b4:	6a e0       	ldi	r22, 0x0A	; 10
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     3bc:	c0 96       	adiw	r24, 0x30	; 48
     3be:	90 93 e5 07 	sts	0x07E5, r25
     3c2:	80 93 e4 07 	sts	0x07E4, r24
		lcd_wr_char(thousand);
     3c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3d0:	c3 30       	cpi	r28, 0x03	; 3
     3d2:	d1 05       	cpc	r29, r1
     3d4:	11 f0       	breq	.+4      	; 0x3da <lcd_print+0x80>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	b1 f4       	brne	.+44     	; 0x406 <lcd_print+0xac>
	{
		temp = value/100;
     3da:	c8 01       	movw	r24, r16
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     3e4:	cb 01       	movw	r24, r22
     3e6:	70 93 d4 07 	sts	0x07D4, r23
     3ea:	60 93 d3 07 	sts	0x07D3, r22
		hundred = temp%10 + 48;
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     3f6:	c0 96       	adiw	r24, 0x30	; 48
     3f8:	90 93 e1 07 	sts	0x07E1, r25
     3fc:	80 93 e0 07 	sts	0x07E0, r24
		lcd_wr_char(hundred);
     400:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     404:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     406:	c2 30       	cpi	r28, 0x02	; 2
     408:	d1 05       	cpc	r29, r1
     40a:	11 f0       	breq	.+4      	; 0x410 <lcd_print+0xb6>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	b1 f4       	brne	.+44     	; 0x43c <lcd_print+0xe2>
	{
		temp = value/10;
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c8 01       	movw	r24, r16
     416:	b9 01       	movw	r22, r18
     418:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     41c:	cb 01       	movw	r24, r22
     41e:	70 93 d4 07 	sts	0x07D4, r23
     422:	60 93 d3 07 	sts	0x07D3, r22
		tens = temp%10 + 48;
     426:	b9 01       	movw	r22, r18
     428:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 df 07 	sts	0x07DF, r25
     432:	80 93 de 07 	sts	0x07DE, r24
		lcd_wr_char(tens);
     436:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     43c:	c1 30       	cpi	r28, 0x01	; 1
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <lcd_print+0xec>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	61 f4       	brne	.+24     	; 0x45e <lcd_print+0x104>
	{
		unit = value%10 + 48;
     446:	c8 01       	movw	r24, r16
     448:	6a e0       	ldi	r22, 0x0A	; 10
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__udivmodhi4>
     450:	c0 96       	adiw	r24, 0x30	; 48
     452:	90 93 e3 07 	sts	0x07E3, r25
     456:	80 93 e2 07 	sts	0x07E2, r24
		lcd_wr_char(unit);
     45a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
	}
	if(digits>5)
     45e:	c6 30       	cpi	r28, 0x06	; 6
     460:	d1 05       	cpc	r29, r1
     462:	1c f0       	brlt	.+6      	; 0x46a <lcd_print+0x110>
	{
		lcd_wr_char('E');
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
	}
	
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <led_port_config>:
void led_port_config()
{
	DDRJ = DDRJ | 0xFF;
     474:	e4 e0       	ldi	r30, 0x04	; 4
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	80 81       	ld	r24, Z
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	80 83       	st	Z, r24
	PORTJ = PORTJ & 0x00;
     47e:	e5 e0       	ldi	r30, 0x05	; 5
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	80 81       	ld	r24, Z
     484:	10 82       	st	Z, r1
}
     486:	08 95       	ret

00000488 <red_led>:

void red_led()
{
	PORTJ = 0x40;
     488:	80 e4       	ldi	r24, 0x40	; 64
     48a:	80 93 05 01 	sts	0x0105, r24
}
     48e:	08 95       	ret

00000490 <blue_led>:

void blue_led()
{
	PORTJ = 0x20;
     490:	80 e2       	ldi	r24, 0x20	; 32
     492:	80 93 05 01 	sts	0x0105, r24
}
     496:	08 95       	ret

00000498 <green_led>:

void green_led()
{
	PORTJ = 0x10;
     498:	80 e1       	ldi	r24, 0x10	; 16
     49a:	80 93 05 01 	sts	0x0105, r24
}
     49e:	08 95       	ret

000004a0 <turn_off_led>:

void turn_off_led()
{
	PORTJ = 0x00;
     4a0:	10 92 05 01 	sts	0x0105, r1
     4a4:	08 95       	ret

000004a6 <base_servo_pin_config>:
extern int deposition_pos;

//Configure PORTB 5 pin for servo motor 1 operation
void base_servo_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     4a6:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     4a8:	2d 9a       	sbi	0x05, 5	; 5
}
     4aa:	08 95       	ret

000004ac <deposition_servo_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void deposition_servo_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     4ac:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     4ae:	2e 9a       	sbi	0x05, 6	; 5
}
     4b0:	08 95       	ret

000004b2 <timer1_init>:
//pre-scale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     4b2:	e1 e8       	ldi	r30, 0x81	; 129
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     4b8:	8c ef       	ldi	r24, 0xFC	; 252
     4ba:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     4d0:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     4d4:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     4d8:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     4dc:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     4e0:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     4e4:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     4e8:	8b ea       	ldi	r24, 0xAB	; 171
     4ea:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     4ee:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     4f2:	8c e0       	ldi	r24, 0x0C	; 12
     4f4:	80 83       	st	Z, r24
}
     4f6:	08 95       	ret

000004f8 <base_servo>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void base_servo(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     4f8:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void base_servo(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     4fc:	68 2f       	mov	r22, r24
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatunsisf>
     508:	2b e7       	ldi	r18, 0x7B	; 123
     50a:	34 e1       	ldi	r19, 0x14	; 20
     50c:	4e ee       	ldi	r20, 0xEE	; 238
     50e:	5f e3       	ldi	r21, 0x3F	; 63
     510:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	4c e0       	ldi	r20, 0x0C	; 12
     51a:	52 e4       	ldi	r21, 0x42	; 66
     51c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
     520:	0e 94 0d 1b 	call	0x361a	; 0x361a <__fixunssfsi>
     524:	60 93 88 00 	sts	0x0088, r22
}
     528:	08 95       	ret

0000052a <deposition_servo>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void deposition_servo(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     52a:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void deposition_servo(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     52e:	68 2f       	mov	r22, r24
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatunsisf>
     53a:	2b e7       	ldi	r18, 0x7B	; 123
     53c:	34 e1       	ldi	r19, 0x14	; 20
     53e:	4e ee       	ldi	r20, 0xEE	; 238
     540:	5f e3       	ldi	r21, 0x3F	; 63
     542:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	4c e0       	ldi	r20, 0x0C	; 12
     54c:	52 e4       	ldi	r21, 0x42	; 66
     54e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__addsf3>
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
     552:	0e 94 0d 1b 	call	0x361a	; 0x361a <__fixunssfsi>
     556:	60 93 8a 00 	sts	0x008A, r22
}
     55a:	08 95       	ret

0000055c <servo_base_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_base_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     562:	8f ef       	ldi	r24, 0xFF	; 255
     564:	80 93 88 00 	sts	0x0088, r24
}
     568:	08 95       	ret

0000056a <servo_deposition_free>:

void servo_deposition_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	80 93 8a 00 	sts	0x008A, r24
}
     576:	08 95       	ret

00000578 <base_rotate>:

void base_rotate(int deg)
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	ec 01       	movw	r28, r24
	
	if(deg < base_pos)
     57e:	80 91 61 02 	lds	r24, 0x0261
     582:	90 91 62 02 	lds	r25, 0x0262
     586:	c8 17       	cp	r28, r24
     588:	d9 07       	cpc	r29, r25
     58a:	ac f4       	brge	.+42     	; 0x5b6 <base_rotate+0x3e>
	{
		while(base_pos != deg)
		{
			base_servo(base_pos);
     58c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <base_servo>
			base_pos--;
     590:	80 91 61 02 	lds	r24, 0x0261
     594:	90 91 62 02 	lds	r25, 0x0262
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	90 93 62 02 	sts	0x0262, r25
     59e:	80 93 61 02 	sts	0x0261, r24
     5a2:	ef ef       	ldi	r30, 0xFF	; 255
     5a4:	f7 e4       	ldi	r31, 0x47	; 71
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <base_rotate+0x2e>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <base_rotate+0x34>
     5ac:	00 00       	nop
void base_rotate(int deg)
{
	
	if(deg < base_pos)
	{
		while(base_pos != deg)
     5ae:	8c 17       	cp	r24, r28
     5b0:	9d 07       	cpc	r25, r29
     5b2:	61 f7       	brne	.-40     	; 0x58c <base_rotate+0x14>
     5b4:	17 c0       	rjmp	.+46     	; 0x5e4 <base_rotate+0x6c>
			base_pos--;
			_delay_ms(5);
		}
	}
	
	else if(deg > base_pos)
     5b6:	8c 17       	cp	r24, r28
     5b8:	9d 07       	cpc	r25, r29
     5ba:	a4 f4       	brge	.+40     	; 0x5e4 <base_rotate+0x6c>
	{
		while(base_pos != deg)
		{
			base_servo(base_pos);
     5bc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <base_servo>
			base_pos++;
     5c0:	80 91 61 02 	lds	r24, 0x0261
     5c4:	90 91 62 02 	lds	r25, 0x0262
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 62 02 	sts	0x0262, r25
     5ce:	80 93 61 02 	sts	0x0261, r24
     5d2:	ef ef       	ldi	r30, 0xFF	; 255
     5d4:	f7 e4       	ldi	r31, 0x47	; 71
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <base_rotate+0x5e>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <base_rotate+0x64>
     5dc:	00 00       	nop
		}
	}
	
	else if(deg > base_pos)
	{
		while(base_pos != deg)
     5de:	8c 17       	cp	r24, r28
     5e0:	9d 07       	cpc	r25, r29
     5e2:	61 f7       	brne	.-40     	; 0x5bc <base_rotate+0x44>
			base_servo(base_pos);
			base_pos++;
			_delay_ms(5);
		}			
	}
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <deposition_rotate>:

void deposition_rotate(int deg)
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	ec 01       	movw	r28, r24
	
	if(deg < deposition_pos)
     5f0:	80 91 d6 02 	lds	r24, 0x02D6
     5f4:	90 91 d7 02 	lds	r25, 0x02D7
     5f8:	c8 17       	cp	r28, r24
     5fa:	d9 07       	cpc	r29, r25
     5fc:	ac f4       	brge	.+42     	; 0x628 <deposition_rotate+0x3e>
	{
		while(deposition_pos != deg)
		{
			deposition_servo(deposition_pos);
     5fe:	0e 94 95 02 	call	0x52a	; 0x52a <deposition_servo>
			deposition_pos--;
     602:	80 91 d6 02 	lds	r24, 0x02D6
     606:	90 91 d7 02 	lds	r25, 0x02D7
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	90 93 d7 02 	sts	0x02D7, r25
     610:	80 93 d6 02 	sts	0x02D6, r24
     614:	ef ef       	ldi	r30, 0xFF	; 255
     616:	f7 e4       	ldi	r31, 0x47	; 71
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <deposition_rotate+0x2e>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <deposition_rotate+0x34>
     61e:	00 00       	nop
void deposition_rotate(int deg)
{
	
	if(deg < deposition_pos)
	{
		while(deposition_pos != deg)
     620:	8c 17       	cp	r24, r28
     622:	9d 07       	cpc	r25, r29
     624:	61 f7       	brne	.-40     	; 0x5fe <deposition_rotate+0x14>
     626:	17 c0       	rjmp	.+46     	; 0x656 <deposition_rotate+0x6c>
			deposition_pos--;
			_delay_ms(5);
		}
	}
	
	else if(deg > deposition_pos)
     628:	8c 17       	cp	r24, r28
     62a:	9d 07       	cpc	r25, r29
     62c:	a4 f4       	brge	.+40     	; 0x656 <deposition_rotate+0x6c>
	{
		while(deposition_pos != deg)
		{
			deposition_servo(deposition_pos);
     62e:	0e 94 95 02 	call	0x52a	; 0x52a <deposition_servo>
			deposition_pos++;
     632:	80 91 d6 02 	lds	r24, 0x02D6
     636:	90 91 d7 02 	lds	r25, 0x02D7
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	90 93 d7 02 	sts	0x02D7, r25
     640:	80 93 d6 02 	sts	0x02D6, r24
     644:	ef ef       	ldi	r30, 0xFF	; 255
     646:	f7 e4       	ldi	r31, 0x47	; 71
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <deposition_rotate+0x5e>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <deposition_rotate+0x64>
     64e:	00 00       	nop
		}
	}
	
	else if(deg > deposition_pos)
	{
		while(deposition_pos != deg)
     650:	8c 17       	cp	r24, r28
     652:	9d 07       	cpc	r25, r29
     654:	61 f7       	brne	.-40     	; 0x62e <deposition_rotate+0x44>
			deposition_servo(deposition_pos);
			deposition_pos++;
			_delay_ms(5);
		}			
	}
} 
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <motion_pin_config>:


//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     65c:	81 b1       	in	r24, 0x01	; 1
     65e:	8f 60       	ori	r24, 0x0F	; 15
     660:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     662:	82 b1       	in	r24, 0x02	; 2
     664:	80 7f       	andi	r24, 0xF0	; 240
     666:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     668:	ea e0       	ldi	r30, 0x0A	; 10
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	80 81       	ld	r24, Z
     66e:	88 61       	ori	r24, 0x18	; 24
     670:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     672:	eb e0       	ldi	r30, 0x0B	; 11
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	80 81       	ld	r24, Z
     678:	88 61       	ori	r24, 0x18	; 24
     67a:	80 83       	st	Z, r24
}
     67c:	08 95       	ret

0000067e <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     67e:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     680:	74 9a       	sbi	0x0e, 4	; 14
}
     682:	08 95       	ret

00000684 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     684:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     686:	75 9a       	sbi	0x0e, 5	; 14
}
     688:	08 95       	ret

0000068a <left_position_encoder_interrupt_init>:

 //Interrupt 4 enable
void left_position_encoder_interrupt_init (void)
{
	cli();						//Clears the global interrupt
     68a:	f8 94       	cli
	EICRB = EICRB | 0x02;		// INT4 is set to trigger with falling edge
     68c:	ea e6       	ldi	r30, 0x6A	; 106
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	82 60       	ori	r24, 0x02	; 2
     694:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10;		// Enable Interrupt INT4 for left position encoder
     696:	ec 9a       	sbi	0x1d, 4	; 29
	sei();						// Enables the global interrupt
     698:	78 94       	sei
}
     69a:	08 95       	ret

0000069c <right_position_encoder_interrupt_init>:

 //Interrupt 5 enable
void right_position_encoder_interrupt_init (void)
{
	cli();						//Clears the global interrupt
     69c:	f8 94       	cli
	EICRB = EICRB | 0x08;		// INT5 is set to trigger with falling edge
     69e:	ea e6       	ldi	r30, 0x6A	; 106
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	88 60       	ori	r24, 0x08	; 8
     6a6:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20;		// Enable Interrupt INT5 for right position encoder
     6a8:	ed 9a       	sbi	0x1d, 5	; 29
	sei();						// Enables the global interrupt
     6aa:	78 94       	sei
}
     6ac:	08 95       	ret

000006ae <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	8f 93       	push	r24
     6ba:	9f 93       	push	r25
     6bc:	af 93       	push	r26
     6be:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     6c0:	80 91 e1 02 	lds	r24, 0x02E1
     6c4:	90 91 e2 02 	lds	r25, 0x02E2
     6c8:	a0 91 e3 02 	lds	r26, 0x02E3
     6cc:	b0 91 e4 02 	lds	r27, 0x02E4
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	a1 1d       	adc	r26, r1
     6d4:	b1 1d       	adc	r27, r1
     6d6:	80 93 e1 02 	sts	0x02E1, r24
     6da:	90 93 e2 02 	sts	0x02E2, r25
     6de:	a0 93 e3 02 	sts	0x02E3, r26
     6e2:	b0 93 e4 02 	sts	0x02E4, r27
}
     6e6:	bf 91       	pop	r27
     6e8:	af 91       	pop	r26
     6ea:	9f 91       	pop	r25
     6ec:	8f 91       	pop	r24
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     70a:	80 91 e5 02 	lds	r24, 0x02E5
     70e:	90 91 e6 02 	lds	r25, 0x02E6
     712:	a0 91 e7 02 	lds	r26, 0x02E7
     716:	b0 91 e8 02 	lds	r27, 0x02E8
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	a1 1d       	adc	r26, r1
     71e:	b1 1d       	adc	r27, r1
     720:	80 93 e5 02 	sts	0x02E5, r24
     724:	90 93 e6 02 	sts	0x02E6, r25
     728:	a0 93 e7 02 	sts	0x02E7, r26
     72c:	b0 93 e8 02 	sts	0x02E8, r27
}
     730:	bf 91       	pop	r27
     732:	af 91       	pop	r26
     734:	9f 91       	pop	r25
     736:	8f 91       	pop	r24
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_1>:

ISR(INT0_vect)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
	pulse++; //increment on receiving pulse from the color sensor
     754:	80 91 d8 02 	lds	r24, 0x02D8
     758:	90 91 d9 02 	lds	r25, 0x02D9
     75c:	a0 91 da 02 	lds	r26, 0x02DA
     760:	b0 91 db 02 	lds	r27, 0x02DB
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	a1 1d       	adc	r26, r1
     768:	b1 1d       	adc	r27, r1
     76a:	80 93 d8 02 	sts	0x02D8, r24
     76e:	90 93 d9 02 	sts	0x02D9, r25
     772:	a0 93 da 02 	sts	0x02DA, r26
     776:	b0 93 db 02 	sts	0x02DB, r27
}
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <addSurvivorInfo>:
*Example call:  addSurvivorInfo();
*
*/
void addSurvivorInfo()
{
	if(survivorData[0] == R)                          //survivorData[] array contains the color of survivor at 0th position. Here the color is red so data will be added in redInfo
     78c:	20 91 eb 02 	lds	r18, 0x02EB
     790:	30 91 ec 02 	lds	r19, 0x02EC
     794:	80 91 65 02 	lds	r24, 0x0265
     798:	90 91 66 02 	lds	r25, 0x0266
     79c:	28 17       	cp	r18, r24
     79e:	39 07       	cpc	r19, r25
     7a0:	61 f5       	brne	.+88     	; 0x7fa <addSurvivorInfo+0x6e>
	{                                                 
		for(int i = 0; i < 10; i++)                   //counter i will iterate from 0 to 10 which is maximum size of the array
		{
			if(redInfo.plot[i] == 0)                  //if an empty location within the array is found (i.e. holding 0)the plot co-ordinate is stored there
     7a2:	80 91 bd 07 	lds	r24, 0x07BD
     7a6:	90 91 be 07 	lds	r25, 0x07BE
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	51 f0       	breq	.+20     	; 0x7c2 <addSurvivorInfo+0x36>
     7ae:	ef eb       	ldi	r30, 0xBF	; 191
     7b0:	f7 e0       	ldi	r31, 0x07	; 7
*/
void addSurvivorInfo()
{
	if(survivorData[0] == R)                          //survivorData[] array contains the color of survivor at 0th position. Here the color is red so data will be added in redInfo
	{                                                 
		for(int i = 0; i < 10; i++)                   //counter i will iterate from 0 to 10 which is maximum size of the array
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(redInfo.plot[i] == 0)                  //if an empty location within the array is found (i.e. holding 0)the plot co-ordinate is stored there
     7b6:	21 91       	ld	r18, Z+
     7b8:	31 91       	ld	r19, Z+
     7ba:	21 15       	cp	r18, r1
     7bc:	31 05       	cpc	r19, r1
     7be:	c1 f4       	brne	.+48     	; 0x7f0 <addSurvivorInfo+0x64>
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <addSurvivorInfo+0x3a>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
			{
				redInfo.plot[i] = survivorData[1];    //survivor[1] contains location of survivor
     7c6:	20 91 ed 02 	lds	r18, 0x02ED
     7ca:	30 91 ee 02 	lds	r19, 0x02EE
     7ce:	fc 01       	movw	r30, r24
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e3 54       	subi	r30, 0x43	; 67
     7d6:	f8 4f       	sbci	r31, 0xF8	; 248
     7d8:	31 83       	std	Z+1, r19	; 0x01
     7da:	20 83       	st	Z, r18
				redInfo.count++;                      // number of survivors waiting to be serviced is incremented
     7dc:	80 91 d1 07 	lds	r24, 0x07D1
     7e0:	90 91 d2 07 	lds	r25, 0x07D2
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	90 93 d2 07 	sts	0x07D2, r25
     7ea:	80 93 d1 07 	sts	0x07D1, r24
				break;
     7ee:	08 95       	ret
*/
void addSurvivorInfo()
{
	if(survivorData[0] == R)                          //survivorData[] array contains the color of survivor at 0th position. Here the color is red so data will be added in redInfo
	{                                                 
		for(int i = 0; i < 10; i++)                   //counter i will iterate from 0 to 10 which is maximum size of the array
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	8a 30       	cpi	r24, 0x0A	; 10
     7f4:	91 05       	cpc	r25, r1
     7f6:	f9 f6       	brne	.-66     	; 0x7b6 <addSurvivorInfo+0x2a>
     7f8:	08 95       	ret
				redInfo.count++;                      // number of survivors waiting to be serviced is incremented
				break;
			}				
		}
	}
	else if(survivorData[0] == G)                     //survivorData[] array contains the color of survivor at 0th position. Here the color is green so data will be added in greenInfo
     7fa:	20 91 eb 02 	lds	r18, 0x02EB
     7fe:	30 91 ec 02 	lds	r19, 0x02EC
     802:	80 91 63 02 	lds	r24, 0x0263
     806:	90 91 64 02 	lds	r25, 0x0264
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	59 f5       	brne	.+86     	; 0x866 <addSurvivorInfo+0xda>
	{
		for(int i = 0; i < 10; i++)                   //counter i will iterate from 0 to 10 which is maximum size of the array
		{
			if(greenInfo.plot[i] == 0)                //if an empty location within the array is found the plot(i.e. holding 0) co-ordinate is stored there
     810:	80 91 a1 07 	lds	r24, 0x07A1
     814:	90 91 a2 07 	lds	r25, 0x07A2
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	51 f0       	breq	.+20     	; 0x830 <addSurvivorInfo+0xa4>
     81c:	e3 ea       	ldi	r30, 0xA3	; 163
     81e:	f7 e0       	ldi	r31, 0x07	; 7
			}				
		}
	}
	else if(survivorData[0] == G)                     //survivorData[] array contains the color of survivor at 0th position. Here the color is green so data will be added in greenInfo
	{
		for(int i = 0; i < 10; i++)                   //counter i will iterate from 0 to 10 which is maximum size of the array
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(greenInfo.plot[i] == 0)                //if an empty location within the array is found the plot(i.e. holding 0) co-ordinate is stored there
     824:	21 91       	ld	r18, Z+
     826:	31 91       	ld	r19, Z+
     828:	21 15       	cp	r18, r1
     82a:	31 05       	cpc	r19, r1
     82c:	c1 f4       	brne	.+48     	; 0x85e <addSurvivorInfo+0xd2>
     82e:	02 c0       	rjmp	.+4      	; 0x834 <addSurvivorInfo+0xa8>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
			{
				greenInfo.plot[i] = survivorData[1];  //survivor[1] contains location of survivor
     834:	20 91 ed 02 	lds	r18, 0x02ED
     838:	30 91 ee 02 	lds	r19, 0x02EE
     83c:	fc 01       	movw	r30, r24
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	ef 55       	subi	r30, 0x5F	; 95
     844:	f8 4f       	sbci	r31, 0xF8	; 248
     846:	31 83       	std	Z+1, r19	; 0x01
     848:	20 83       	st	Z, r18
				greenInfo.count++;                    // number of survivors waiting to be serviced is incremented
     84a:	80 91 b5 07 	lds	r24, 0x07B5
     84e:	90 91 b6 07 	lds	r25, 0x07B6
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	90 93 b6 07 	sts	0x07B6, r25
     858:	80 93 b5 07 	sts	0x07B5, r24
				break;
     85c:	08 95       	ret
			}				
		}
	}
	else if(survivorData[0] == G)                     //survivorData[] array contains the color of survivor at 0th position. Here the color is green so data will be added in greenInfo
	{
		for(int i = 0; i < 10; i++)                   //counter i will iterate from 0 to 10 which is maximum size of the array
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	8a 30       	cpi	r24, 0x0A	; 10
     862:	91 05       	cpc	r25, r1
     864:	f9 f6       	brne	.-66     	; 0x824 <addSurvivorInfo+0x98>
     866:	08 95       	ret

00000868 <releaseOldSearchPath>:
*Example call:  releaseOldSearchPath();
*
*/
void releaseOldSearchPath()
{
	for (int i = 0; i < 50; i++)
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
		searchPath[i] = 0; //search path is cleared
     86c:	2f ee       	ldi	r18, 0xEF	; 239
     86e:	32 e0       	ldi	r19, 0x02	; 2
     870:	fc 01       	movw	r30, r24
     872:	ee 0f       	add	r30, r30
     874:	ff 1f       	adc	r31, r31
     876:	e2 0f       	add	r30, r18
     878:	f3 1f       	adc	r31, r19
     87a:	11 82       	std	Z+1, r1	; 0x01
     87c:	10 82       	st	Z, r1
*Example call:  releaseOldSearchPath();
*
*/
void releaseOldSearchPath()
{
	for (int i = 0; i < 50; i++)
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	82 33       	cpi	r24, 0x32	; 50
     882:	91 05       	cpc	r25, r1
     884:	a9 f7       	brne	.-22     	; 0x870 <releaseOldSearchPath+0x8>
		searchPath[i] = 0; //search path is cleared
}
     886:	08 95       	ret

00000888 <updateNewSearchPath>:
*Example call:  updateNewSearchPath();
*
*/
void updateNewSearchPath()
{
	for (int i = 0; i < searchPathLength; i++) //loop iterates from 0 to length of the search robot's Path
     888:	80 91 53 03 	lds	r24, 0x0353
     88c:	90 91 54 03 	lds	r25, 0x0354
     890:	18 16       	cp	r1, r24
     892:	19 06       	cpc	r1, r25
     894:	e4 f4       	brge	.+56     	; 0x8ce <updateNewSearchPath+0x46>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
		searchPath[i] = searchData[i]; //each individual node in the path is copied
     89a:	60 e7       	ldi	r22, 0x70	; 112
     89c:	72 e0       	ldi	r23, 0x02	; 2
     89e:	af ee       	ldi	r26, 0xEF	; 239
     8a0:	b2 e0       	ldi	r27, 0x02	; 2
     8a2:	c9 01       	movw	r24, r18
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	fb 01       	movw	r30, r22
     8aa:	e8 0f       	add	r30, r24
     8ac:	f9 1f       	adc	r31, r25
     8ae:	40 81       	ld	r20, Z
     8b0:	51 81       	ldd	r21, Z+1	; 0x01
     8b2:	8a 0f       	add	r24, r26
     8b4:	9b 1f       	adc	r25, r27
     8b6:	fc 01       	movw	r30, r24
     8b8:	51 83       	std	Z+1, r21	; 0x01
     8ba:	40 83       	st	Z, r20
*Example call:  updateNewSearchPath();
*
*/
void updateNewSearchPath()
{
	for (int i = 0; i < searchPathLength; i++) //loop iterates from 0 to length of the search robot's Path
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	80 91 53 03 	lds	r24, 0x0353
     8c4:	90 91 54 03 	lds	r25, 0x0354
     8c8:	28 17       	cp	r18, r24
     8ca:	39 07       	cpc	r19, r25
     8cc:	54 f3       	brlt	.-44     	; 0x8a2 <updateNewSearchPath+0x1a>
     8ce:	08 95       	ret

000008d0 <__vector_25>:
		searchPath[i] = searchData[i]; //each individual node in the path is copied
}

ISR(USART0_RX_vect) 		// ISR for receive complete interrupt
{
     8d0:	1f 92       	push	r1
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	0f 92       	push	r0
     8d8:	0b b6       	in	r0, 0x3b	; 59
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
	char data = UDR0;
     8f6:	20 91 c6 00 	lds	r18, 0x00C6
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	97 e4       	ldi	r25, 0x47	; 71
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <__vector_25+0x2e>
     902:	00 c0       	rjmp	.+0      	; 0x904 <__vector_25+0x34>
     904:	00 00       	nop
	_delay_ms(5);
	
	searchData[searchDataIndex] = data;
     906:	80 91 d4 02 	lds	r24, 0x02D4
     90a:	90 91 d5 02 	lds	r25, 0x02D5
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	fc 01       	movw	r30, r24
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	e0 59       	subi	r30, 0x90	; 144
     918:	fd 4f       	sbci	r31, 0xFD	; 253
     91a:	31 83       	std	Z+1, r19	; 0x01
     91c:	20 83       	st	Z, r18
	
	if(searchData[searchDataIndex] == 7)
     91e:	20 81       	ld	r18, Z
     920:	31 81       	ldd	r19, Z+1	; 0x01
     922:	27 30       	cpi	r18, 0x07	; 7
     924:	31 05       	cpc	r19, r1
     926:	e1 f4       	brne	.+56     	; 0x960 <__vector_25+0x90>
	{
		searchComplete = 1;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	90 93 96 07 	sts	0x0796, r25
     930:	80 93 95 07 	sts	0x0795, r24
	    cinfo[searchCurrentPosition][4] = 1;
     934:	40 91 e9 02 	lds	r20, 0x02E9
     938:	50 91 ea 02 	lds	r21, 0x02EA
     93c:	9a 01       	movw	r18, r20
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	fa 01       	movw	r30, r20
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	2e 0f       	add	r18, r30
     952:	3f 1f       	adc	r19, r31
     954:	f9 01       	movw	r30, r18
     956:	eb 5a       	subi	r30, 0xAB	; 171
     958:	fc 4f       	sbci	r31, 0xFC	; 252
     95a:	91 87       	std	Z+9, r25	; 0x09
     95c:	80 87       	std	Z+8, r24	; 0x08
     95e:	eb c0       	rjmp	.+470    	; 0xb36 <__vector_25+0x266>
	}		
	else if(searchData[searchDataIndex] == 5)
     960:	fc 01       	movw	r30, r24
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	e0 59       	subi	r30, 0x90	; 144
     968:	fd 4f       	sbci	r31, 0xFD	; 253
     96a:	20 81       	ld	r18, Z
     96c:	31 81       	ldd	r19, Z+1	; 0x01
     96e:	25 30       	cpi	r18, 0x05	; 5
     970:	31 05       	cpc	r19, r1
     972:	69 f4       	brne	.+26     	; 0x98e <__vector_25+0xbe>
	{
		allowedtoService = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	90 93 ba 07 	sts	0x07BA, r25
     97c:	80 93 b9 07 	sts	0x07B9, r24
		searchDataIndex = -1;
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	9f ef       	ldi	r25, 0xFF	; 255
     984:	90 93 d5 02 	sts	0x02D5, r25
     988:	80 93 d4 02 	sts	0x02D4, r24
     98c:	d4 c0       	rjmp	.+424    	; 0xb36 <__vector_25+0x266>
	}
	
	else if(searchData[searchDataIndex] == 4)
     98e:	fc 01       	movw	r30, r24
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	e0 59       	subi	r30, 0x90	; 144
     996:	fd 4f       	sbci	r31, 0xFD	; 253
     998:	20 81       	ld	r18, Z
     99a:	31 81       	ldd	r19, Z+1	; 0x01
     99c:	24 30       	cpi	r18, 0x04	; 4
     99e:	31 05       	cpc	r19, r1
     9a0:	e9 f4       	brne	.+58     	; 0x9dc <__vector_25+0x10c>
	{
		searchDataIndex = -1;
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	9f ef       	ldi	r25, 0xFF	; 255
     9a6:	90 93 d5 02 	sts	0x02D5, r25
     9aa:	80 93 d4 02 	sts	0x02D4, r24
		survivorData[0] = searchData[0];
     9ae:	80 91 70 02 	lds	r24, 0x0270
     9b2:	90 91 71 02 	lds	r25, 0x0271
     9b6:	90 93 ec 02 	sts	0x02EC, r25
     9ba:	80 93 eb 02 	sts	0x02EB, r24
		survivorData[1] = searchData[1];
     9be:	80 91 72 02 	lds	r24, 0x0272
     9c2:	90 91 73 02 	lds	r25, 0x0273
     9c6:	90 93 ee 02 	sts	0x02EE, r25
     9ca:	80 93 ed 02 	sts	0x02ED, r24
		survivorDataReceived = 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	90 93 6f 02 	sts	0x026F, r25
     9d6:	80 93 6e 02 	sts	0x026E, r24
     9da:	ad c0       	rjmp	.+346    	; 0xb36 <__vector_25+0x266>
	}
	
	else if(searchData[searchDataIndex] == 2)
     9dc:	fc 01       	movw	r30, r24
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	e0 59       	subi	r30, 0x90	; 144
     9e4:	fd 4f       	sbci	r31, 0xFD	; 253
     9e6:	20 81       	ld	r18, Z
     9e8:	31 81       	ldd	r19, Z+1	; 0x01
     9ea:	22 30       	cpi	r18, 0x02	; 2
     9ec:	31 05       	cpc	r19, r1
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__vector_25+0x122>
     9f0:	49 c0       	rjmp	.+146    	; 0xa84 <__vector_25+0x1b4>
	{
		for (int i = 0; i < searchPathLength; i++)
     9f2:	80 91 53 03 	lds	r24, 0x0353
     9f6:	90 91 54 03 	lds	r25, 0x0354
     9fa:	18 16       	cp	r1, r24
     9fc:	19 06       	cpc	r1, r25
     9fe:	9c f5       	brge	.+102    	; 0xa66 <__vector_25+0x196>
		{
			if(searchData[0] == searchPath[i])
     a00:	20 91 70 02 	lds	r18, 0x0270
     a04:	30 91 71 02 	lds	r19, 0x0271
     a08:	80 91 ef 02 	lds	r24, 0x02EF
     a0c:	90 91 f0 02 	lds	r25, 0x02F0
     a10:	28 17       	cp	r18, r24
     a12:	39 07       	cpc	r19, r25
     a14:	a9 f0       	breq	.+42     	; 0xa40 <__vector_25+0x170>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	a0 e7       	ldi	r26, 0x70	; 112
     a1c:	b2 e0       	ldi	r27, 0x02	; 2
     a1e:	6f ee       	ldi	r22, 0xEF	; 239
     a20:	72 e0       	ldi	r23, 0x02	; 2
     a22:	18 c0       	rjmp	.+48     	; 0xa54 <__vector_25+0x184>
     a24:	4d 91       	ld	r20, X+
     a26:	5c 91       	ld	r21, X
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	f9 01       	movw	r30, r18
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	e6 0f       	add	r30, r22
     a32:	f7 1f       	adc	r31, r23
     a34:	80 81       	ld	r24, Z
     a36:	91 81       	ldd	r25, Z+1	; 0x01
     a38:	48 17       	cp	r20, r24
     a3a:	59 07       	cpc	r21, r25
     a3c:	59 f4       	brne	.+22     	; 0xa54 <__vector_25+0x184>
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__vector_25+0x174>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
			{
				searchPath[i] = 0;
     a44:	f9 01       	movw	r30, r18
     a46:	ee 0f       	add	r30, r30
     a48:	ff 1f       	adc	r31, r31
     a4a:	e1 51       	subi	r30, 0x11	; 17
     a4c:	fd 4f       	sbci	r31, 0xFD	; 253
     a4e:	11 82       	std	Z+1, r1	; 0x01
     a50:	10 82       	st	Z, r1
				break;
     a52:	09 c0       	rjmp	.+18     	; 0xa66 <__vector_25+0x196>
		survivorDataReceived = 1;
	}
	
	else if(searchData[searchDataIndex] == 2)
	{
		for (int i = 0; i < searchPathLength; i++)
     a54:	2f 5f       	subi	r18, 0xFF	; 255
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
     a58:	80 91 53 03 	lds	r24, 0x0353
     a5c:	90 91 54 03 	lds	r25, 0x0354
     a60:	28 17       	cp	r18, r24
     a62:	39 07       	cpc	r19, r25
     a64:	fc f2       	brlt	.-66     	; 0xa24 <__vector_25+0x154>
			{
				searchPath[i] = 0;
				break;
			}
		}
		searchCurrentPosition = searchData[1];
     a66:	80 91 72 02 	lds	r24, 0x0272
     a6a:	90 91 73 02 	lds	r25, 0x0273
     a6e:	90 93 ea 02 	sts	0x02EA, r25
     a72:	80 93 e9 02 	sts	0x02E9, r24
		searchDataIndex = -1;
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	9f ef       	ldi	r25, 0xFF	; 255
     a7a:	90 93 d5 02 	sts	0x02D5, r25
     a7e:	80 93 d4 02 	sts	0x02D4, r24
     a82:	59 c0       	rjmp	.+178    	; 0xb36 <__vector_25+0x266>
	}
	
	else if(searchData[searchDataIndex] == 3)
     a84:	fc 01       	movw	r30, r24
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	e0 59       	subi	r30, 0x90	; 144
     a8c:	fd 4f       	sbci	r31, 0xFD	; 253
     a8e:	20 81       	ld	r18, Z
     a90:	31 81       	ldd	r19, Z+1	; 0x01
     a92:	23 30       	cpi	r18, 0x03	; 3
     a94:	31 05       	cpc	r19, r1
     a96:	99 f5       	brne	.+102    	; 0xafe <__vector_25+0x22e>
	{
		cinfo[searchData[0]][4] = 1;
     a98:	80 91 70 02 	lds	r24, 0x0270
     a9c:	90 91 71 02 	lds	r25, 0x0271
     aa0:	fc 01       	movw	r30, r24
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	e8 0f       	add	r30, r24
     ab4:	f9 1f       	adc	r31, r25
     ab6:	eb 5a       	subi	r30, 0xAB	; 171
     ab8:	fc 4f       	sbci	r31, 0xFC	; 252
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	91 87       	std	Z+9, r25	; 0x09
     ac0:	80 87       	std	Z+8, r24	; 0x08
		vertexWithBlackDebris[blackDebrisCounter] = searchData[0];
     ac2:	e0 91 9b 07 	lds	r30, 0x079B
     ac6:	f0 91 9c 07 	lds	r31, 0x079C
     aca:	80 91 70 02 	lds	r24, 0x0270
     ace:	90 91 71 02 	lds	r25, 0x0271
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	e3 5c       	subi	r30, 0xC3	; 195
     ad8:	f8 4f       	sbci	r31, 0xF8	; 248
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
		blackDebrisCounter++;
     ade:	80 91 9b 07 	lds	r24, 0x079B
     ae2:	90 91 9c 07 	lds	r25, 0x079C
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	90 93 9c 07 	sts	0x079C, r25
     aec:	80 93 9b 07 	sts	0x079B, r24
		searchDataIndex = -1;
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	9f ef       	ldi	r25, 0xFF	; 255
     af4:	90 93 d5 02 	sts	0x02D5, r25
     af8:	80 93 d4 02 	sts	0x02D4, r24
     afc:	1c c0       	rjmp	.+56     	; 0xb36 <__vector_25+0x266>
	}
	
	else if(searchData[searchDataIndex] == 1)
     afe:	fc 01       	movw	r30, r24
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	e0 59       	subi	r30, 0x90	; 144
     b06:	fd 4f       	sbci	r31, 0xFD	; 253
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	91 05       	cpc	r25, r1
     b10:	91 f4       	brne	.+36     	; 0xb36 <__vector_25+0x266>
	{
		releaseOldSearchPath();
     b12:	0e 94 34 04 	call	0x868	; 0x868 <releaseOldSearchPath>
		searchPathLength = searchDataIndex;
     b16:	80 91 d4 02 	lds	r24, 0x02D4
     b1a:	90 91 d5 02 	lds	r25, 0x02D5
     b1e:	90 93 54 03 	sts	0x0354, r25
     b22:	80 93 53 03 	sts	0x0353, r24
		updateNewSearchPath();
     b26:	0e 94 44 04 	call	0x888	; 0x888 <updateNewSearchPath>
		searchDataIndex = -1;
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	9f ef       	ldi	r25, 0xFF	; 255
     b2e:	90 93 d5 02 	sts	0x02D5, r25
     b32:	80 93 d4 02 	sts	0x02D4, r24
	}
	
	searchDataIndex++;
     b36:	80 91 d4 02 	lds	r24, 0x02D4
     b3a:	90 91 d5 02 	lds	r25, 0x02D5
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	90 93 d5 02 	sts	0x02D5, r25
     b44:	80 93 d4 02 	sts	0x02D4, r24
}
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0b be       	out	0x3b, r0	; 59
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     b6e:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b70:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     b72:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b74:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     b76:	92 b9       	out	0x02, r25	; 2
}
     b78:	08 95       	ret

00000b7a <forward>:

//both wheels forward
void forward (void) 
{
	motion_set(0x06);
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <motion_set>
}
     b80:	08 95       	ret

00000b82 <back>:

//both wheels backward
void back (void) 
{
	motion_set(0x09);
     b82:	89 e0       	ldi	r24, 0x09	; 9
     b84:	0e 94 b7 05 	call	0xb6e	; 0xb6e <motion_set>
}
     b88:	08 95       	ret

00000b8a <left>:

//Left wheel backward, Right wheel forward
void left (void) 
{
	motion_set(0x05);
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <motion_set>
}
     b90:	08 95       	ret

00000b92 <right>:

//Left wheel forward, Right wheel backward
void right (void) 
{
	motion_set(0x0A);
     b92:	8a e0       	ldi	r24, 0x0A	; 10
     b94:	0e 94 b7 05 	call	0xb6e	; 0xb6e <motion_set>
}
     b98:	08 95       	ret

00000b9a <stop>:

//stops the both wheels
void stop (void)
{
	motion_set(0x00);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <motion_set>
}
     ba0:	08 95       	ret

00000ba2 <Sharp_GP2D12_estimation>:

// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor.
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     ba6:	68 2f       	mov	r22, r24
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatunsisf>
     bb2:	2f ee       	ldi	r18, 0xEF	; 239
     bb4:	39 ec       	ldi	r19, 0xC9	; 201
     bb6:	43 e9       	ldi	r20, 0x93	; 147
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 2a 1c 	call	0x3854	; 0x3854 <pow>
     bbe:	b6 2f       	mov	r27, r22
     bc0:	a7 2f       	mov	r26, r23
     bc2:	38 2f       	mov	r19, r24
     bc4:	29 2f       	mov	r18, r25
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	80 e8       	ldi	r24, 0x80	; 128
     bcc:	9f e3       	ldi	r25, 0x3F	; 63
     bce:	42 2f       	mov	r20, r18
     bd0:	0b 2f       	mov	r16, r27
     bd2:	1a 2f       	mov	r17, r26
     bd4:	23 2f       	mov	r18, r19
     bd6:	34 2f       	mov	r19, r20
     bd8:	a9 01       	movw	r20, r18
     bda:	98 01       	movw	r18, r16
     bdc:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
     be0:	2a e9       	ldi	r18, 0x9A	; 154
     be2:	39 ef       	ldi	r19, 0xF9	; 249
     be4:	4e e2       	ldi	r20, 0x2E	; 46
     be6:	55 e4       	ldi	r21, 0x45	; 69
     be8:	0e 94 c7 1b 	call	0x378e	; 0x378e <__mulsf3>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 c7 1b 	call	0x378e	; 0x378e <__mulsf3>
     bf8:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fixsfsi>
     bfc:	88 27       	eor	r24, r24
     bfe:	77 fd       	sbrc	r23, 7
     c00:	80 95       	com	r24
     c02:	98 2f       	mov	r25, r24
     c04:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__floatsisf>
	distanceInt = (int)distance;
     c08:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     c0c:	86 2f       	mov	r24, r22
     c0e:	97 2f       	mov	r25, r23
     c10:	23 e0       	ldi	r18, 0x03	; 3
     c12:	81 32       	cpi	r24, 0x21	; 33
     c14:	92 07       	cpc	r25, r18
     c16:	10 f0       	brcs	.+4      	; 0xc1c <Sharp_GP2D12_estimation+0x7a>
     c18:	80 e2       	ldi	r24, 0x20	; 32
     c1a:	93 e0       	ldi	r25, 0x03	; 3
}
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;
	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     c28:	bc 01       	movw	r22, r24
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatunsisf>
     c32:	28 e4       	ldi	r18, 0x48	; 72
     c34:	31 ee       	ldi	r19, 0xE1	; 225
     c36:	42 e8       	ldi	r20, 0x82	; 130
     c38:	50 e4       	ldi	r21, 0x40	; 64
     c3a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     c3e:	0e 94 0d 1b 	call	0x361a	; 0x361a <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	a0 e0       	ldi	r26, 0x00	; 0
     c48:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     c4a:	10 92 e1 02 	sts	0x02E1, r1
     c4e:	10 92 e2 02 	sts	0x02E2, r1
     c52:	10 92 e3 02 	sts	0x02E3, r1
     c56:	10 92 e4 02 	sts	0x02E4, r1
	ShaftCountLeft = 0;
     c5a:	10 92 e5 02 	sts	0x02E5, r1
     c5e:	10 92 e6 02 	sts	0x02E6, r1
     c62:	10 92 e7 02 	sts	0x02E7, r1
     c66:	10 92 e8 02 	sts	0x02E8, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	40 91 e1 02 	lds	r20, 0x02E1
     c72:	50 91 e2 02 	lds	r21, 0x02E2
     c76:	60 91 e3 02 	lds	r22, 0x02E3
     c7a:	70 91 e4 02 	lds	r23, 0x02E4
     c7e:	00 91 e5 02 	lds	r16, 0x02E5
     c82:	10 91 e6 02 	lds	r17, 0x02E6
     c86:	20 91 e7 02 	lds	r18, 0x02E7
     c8a:	30 91 e8 02 	lds	r19, 0x02E8
     c8e:	ef 2f       	mov	r30, r31
     c90:	48 17       	cp	r20, r24
     c92:	59 07       	cpc	r21, r25
     c94:	6a 07       	cpc	r22, r26
     c96:	7b 07       	cpc	r23, r27
     c98:	08 f4       	brcc	.+2      	; 0xc9c <angle_rotate+0x7a>
     c9a:	ec 2f       	mov	r30, r28
     c9c:	ee 23       	and	r30, r30
     c9e:	49 f4       	brne	.+18     	; 0xcb2 <angle_rotate+0x90>
     ca0:	4f 2f       	mov	r20, r31
     ca2:	08 17       	cp	r16, r24
     ca4:	19 07       	cpc	r17, r25
     ca6:	2a 07       	cpc	r18, r26
     ca8:	3b 07       	cpc	r19, r27
     caa:	08 f4       	brcc	.+2      	; 0xcae <angle_rotate+0x8c>
     cac:	4c 2f       	mov	r20, r28
     cae:	44 23       	and	r20, r20
     cb0:	f1 f2       	breq	.-68     	; 0xc6e <angle_rotate+0x4c>
			break;
	}
	stop(); //Stop robot
     cb2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
}
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     cbe:	bc 01       	movw	r22, r24
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 39 1b 	call	0x3672	; 0x3672 <__floatunsisf>
     cc8:	25 ee       	ldi	r18, 0xE5	; 229
     cca:	30 ed       	ldi	r19, 0xD0	; 208
     ccc:	4a ea       	ldi	r20, 0xAA	; 170
     cce:	50 e4       	ldi	r21, 0x40	; 64
     cd0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     cd4:	0e 94 0d 1b 	call	0x361a	; 0x361a <__fixunssfsi>
     cd8:	46 2f       	mov	r20, r22
     cda:	57 2f       	mov	r21, r23
     cdc:	68 2f       	mov	r22, r24
     cde:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     ce0:	10 92 e1 02 	sts	0x02E1, r1
     ce4:	10 92 e2 02 	sts	0x02E2, r1
     ce8:	10 92 e3 02 	sts	0x02E3, r1
     cec:	10 92 e4 02 	sts	0x02E4, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     cf0:	80 91 e1 02 	lds	r24, 0x02E1
     cf4:	90 91 e2 02 	lds	r25, 0x02E2
     cf8:	a0 91 e3 02 	lds	r26, 0x02E3
     cfc:	b0 91 e4 02 	lds	r27, 0x02E4
     d00:	48 17       	cp	r20, r24
     d02:	59 07       	cpc	r21, r25
     d04:	6a 07       	cpc	r22, r26
     d06:	7b 07       	cpc	r23, r27
     d08:	98 f7       	brcc	.-26     	; 0xcf0 <linear_distance_mm+0x32>
		{
			break;
		}
	}
	//stop(); //Stop robot
}
     d0a:	08 95       	ret

00000d0c <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	ec 01       	movw	r28, r24
	forward();
     d12:	0e 94 bd 05 	call	0xb7a	; 0xb7a <forward>
	linear_distance_mm(DistanceInMM);
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 5f 06 	call	0xcbe	; 0xcbe <linear_distance_mm>
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
	back();
     d28:	0e 94 c1 05 	call	0xb82	; 0xb82 <back>
	linear_distance_mm(DistanceInMM);
     d2c:	ce 01       	movw	r24, r28
     d2e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <linear_distance_mm>
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     d3e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <left>
	angle_rotate(Degrees);
     d42:	ce 01       	movw	r24, r28
     d44:	0e 94 11 06 	call	0xc22	; 0xc22 <angle_rotate>
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <right_degrees>:

void right_degrees(unsigned int Degrees)
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     d54:	0e 94 c9 05 	call	0xb92	; 0xb92 <right>
	angle_rotate(Degrees);
     d58:	ce 01       	movw	r24, r28
     d5a:	0e 94 11 06 	call	0xc22	; 0xc22 <angle_rotate>
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     d64:	87 b1       	in	r24, 0x07	; 7
     d66:	87 6f       	ori	r24, 0xF7	; 247
     d68:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     d6a:	88 b1       	in	r24, 0x08	; 8
     d6c:	80 78       	andi	r24, 0x80	; 128
     d6e:	88 b9       	out	0x08, r24	; 8
}
     d70:	08 95       	ret

00000d72 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     d72:	e1 ec       	ldi	r30, 0xC1	; 193
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     d78:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     d7c:	86 e0       	ldi	r24, 0x06	; 6
     d7e:	80 93 c2 00 	sts	0x00C2, r24
	//UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
     d82:	8f e5       	ldi	r24, 0x5F	; 95
     d84:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     d88:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     d8c:	88 e9       	ldi	r24, 0x98	; 152
     d8e:	80 83       	st	Z, r24
}
     d90:	08 95       	ret

00000d92 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     d92:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     d94:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     d96:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     d9a:	10 92 08 01 	sts	0x0108, r1
}
     d9e:	08 95       	ret

00000da0 <buzzer_pin_config>:

void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;			//Setting PORTC 3 as output
     da0:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     da2:	43 98       	cbi	0x08, 3	; 8
}
     da4:	08 95       	ret

00000da6 <port_init>:

//Function to Initialize PORTS
void port_init()
{
	motion_pin_config();			//robot motion pins config
     da6:	0e 94 2e 03 	call	0x65c	; 0x65c <motion_pin_config>
	left_encoder_pin_config();		//left encoder pin config
     daa:	0e 94 3f 03 	call	0x67e	; 0x67e <left_encoder_pin_config>
	right_encoder_pin_config();	    //right encoder pin config
     dae:	0e 94 42 03 	call	0x684	; 0x684 <right_encoder_pin_config>
	buzzer_pin_config();			//buzzer pin config
     db2:	0e 94 d0 06 	call	0xda0	; 0xda0 <buzzer_pin_config>
	lcd_port_config();				//lcd pin config
     db6:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_port_config>
	adc_pin_config();				//adc pin config
     dba:	0e 94 c9 06 	call	0xd92	; 0xd92 <adc_pin_config>
	motion_pin_config();			//motor driver pin config
     dbe:	0e 94 2e 03 	call	0x65c	; 0x65c <motion_pin_config>
	base_servo_pin_config();
     dc2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <base_servo_pin_config>
	deposition_servo_pin_config();
     dc6:	0e 94 56 02 	call	0x4ac	; 0x4ac <deposition_servo_pin_config>
	led_port_config();
     dca:	0e 94 3a 02 	call	0x474	; 0x474 <led_port_config>
}
     dce:	08 95       	ret

00000dd0 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     dd0:	e1 e2       	ldi	r30, 0x21	; 33
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     de2:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     de6:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     dea:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     dee:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     df2:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     df6:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     dfa:	89 ea       	ldi	r24, 0xA9	; 169
     dfc:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     e00:	8b e0       	ldi	r24, 0x0B	; 11
     e02:	80 83       	st	Z, r24
}
     e04:	08 95       	ret

00000e06 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     e06:	ea e7       	ldi	r30, 0x7A	; 122
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     e0c:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     e16:	80 e8       	ldi	r24, 0x80	; 128
     e18:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     e1a:	86 e8       	ldi	r24, 0x86	; 134
     e1c:	80 83       	st	Z, r24
}
     e1e:	08 95       	ret

00000e20 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     e20:	88 30       	cpi	r24, 0x08	; 8
     e22:	18 f0       	brcs	.+6      	; 0xe2a <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     e24:	98 e0       	ldi	r25, 0x08	; 8
     e26:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     e2a:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     e2c:	80 62       	ori	r24, 0x20	; 32
     e2e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     e32:	ea e7       	ldi	r30, 0x7A	; 122
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 64       	ori	r24, 0x40	; 64
     e3a:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     e3c:	80 81       	ld	r24, Z
     e3e:	84 ff       	sbrs	r24, 4
     e40:	fd cf       	rjmp	.-6      	; 0xe3c <ADC_Conversion+0x1c>
	a=ADCH;
     e42:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     e46:	ea e7       	ldi	r30, 0x7A	; 122
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	90 81       	ld	r25, Z
     e4c:	90 61       	ori	r25, 0x10	; 16
     e4e:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     e50:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     e54:	08 95       	ret

00000e56 <print_sensor>:

//Function To Print Sensor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	d8 2f       	mov	r29, r24
     e5c:	c6 2f       	mov	r28, r22
     e5e:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     e60:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
     e64:	48 2f       	mov	r20, r24
     e66:	80 93 dd 07 	sts	0x07DD, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     e6a:	8d 2f       	mov	r24, r29
     e6c:	6c 2f       	mov	r22, r28
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	23 e0       	ldi	r18, 0x03	; 3
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <scanForBlackDebris>:
*				  3) send information about this black debris to rescue robot
* Example Call:	  scanForBlackDebris();
*
*/
void scanForBlackDebris()
{
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
	int blackDebrisPos;  //variable to store calculated black debris position
	int x, y;
	x = current_pos % 10; //extract x from current position
     e86:	20 91 9d 07 	lds	r18, 0x079D
     e8a:	30 91 9e 07 	lds	r19, 0x079E
     e8e:	c9 01       	movw	r24, r18
     e90:	6a e0       	ldi	r22, 0x0A	; 10
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
	y = current_pos / 10; //extract y from current position
	
	//if both x and y are odd means robot is standing on node then scan for black debris in front of it
	if (x % 2 != 0 && y %2 != 0)
     e98:	80 ff       	sbrs	r24, 0
     e9a:	c7 c0       	rjmp	.+398    	; 0x102a <scanForBlackDebris+0x1ac>
void scanForBlackDebris()
{
	int blackDebrisPos;  //variable to store calculated black debris position
	int x, y;
	x = current_pos % 10; //extract x from current position
	y = current_pos / 10; //extract y from current position
     e9c:	c9 01       	movw	r24, r18
     e9e:	6a e0       	ldi	r22, 0x0A	; 10
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
	
	//if both x and y are odd means robot is standing on node then scan for black debris in front of it
	if (x % 2 != 0 && y %2 != 0)
     ea6:	60 ff       	sbrs	r22, 0
     ea8:	c0 c0       	rjmp	.+384    	; 0x102a <scanForBlackDebris+0x1ac>
	{
		//take reading from sharp IR sensor
		int sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     eaa:	8b e0       	ldi	r24, 0x0B	; 11
     eac:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
		int value = Sharp_GP2D12_estimation(sharp);
     eb0:	0e 94 d1 05 	call	0xba2	; 0xba2 <Sharp_GP2D12_estimation>
     eb4:	ec 01       	movw	r28, r24
		lcd_print(2,1,value,3);
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	ae 01       	movw	r20, r28
     ebc:	23 e0       	ldi	r18, 0x03	; 3
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
		
		if(value < 230 && value > 0)  //if value is less then 230 that means black debris is present
     ec4:	21 97       	sbiw	r28, 0x01	; 1
     ec6:	c5 3e       	cpi	r28, 0xE5	; 229
     ec8:	d1 05       	cpc	r29, r1
     eca:	08 f0       	brcs	.+2      	; 0xece <scanForBlackDebris+0x50>
     ecc:	ae c0       	rjmp	.+348    	; 0x102a <scanForBlackDebris+0x1ac>
		{
			resetPath = 1;  //set resetPath flag to 1 indicating path needs to recalculated excluding found black debris
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	90 93 98 07 	sts	0x0798, r25
     ed6:	80 93 97 07 	sts	0x0797, r24
			print_sensor(2,1,11);
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	4b e0       	ldi	r20, 0x0B	; 11
     ee0:	0e 94 2b 07 	call	0xe56	; 0xe56 <print_sensor>
			
			//calculate position of black debris based on orientation of the robot
			if(orientation == point_north)
     ee4:	80 91 dc 02 	lds	r24, 0x02DC
     ee8:	90 91 dd 02 	lds	r25, 0x02DD
     eec:	20 91 9f 07 	lds	r18, 0x079F
     ef0:	30 91 a0 07 	lds	r19, 0x07A0
     ef4:	82 17       	cp	r24, r18
     ef6:	93 07       	cpc	r25, r19
     ef8:	39 f4       	brne	.+14     	; 0xf08 <scanForBlackDebris+0x8a>
			blackDebrisPos = current_pos + 10;
     efa:	00 91 9d 07 	lds	r16, 0x079D
     efe:	10 91 9e 07 	lds	r17, 0x079E
     f02:	06 5f       	subi	r16, 0xF6	; 246
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	29 c0       	rjmp	.+82     	; 0xf5a <scanForBlackDebris+0xdc>
			else if(orientation == point_south)
     f08:	20 91 69 02 	lds	r18, 0x0269
     f0c:	30 91 6a 02 	lds	r19, 0x026A
     f10:	82 17       	cp	r24, r18
     f12:	93 07       	cpc	r25, r19
     f14:	39 f4       	brne	.+14     	; 0xf24 <scanForBlackDebris+0xa6>
			blackDebrisPos = current_pos - 10;
     f16:	00 91 9d 07 	lds	r16, 0x079D
     f1a:	10 91 9e 07 	lds	r17, 0x079E
     f1e:	0a 50       	subi	r16, 0x0A	; 10
     f20:	10 40       	sbci	r17, 0x00	; 0
     f22:	1b c0       	rjmp	.+54     	; 0xf5a <scanForBlackDebris+0xdc>
			else if(orientation == point_east)
     f24:	20 91 6b 02 	lds	r18, 0x026B
     f28:	30 91 6c 02 	lds	r19, 0x026C
     f2c:	82 17       	cp	r24, r18
     f2e:	93 07       	cpc	r25, r19
     f30:	39 f4       	brne	.+14     	; 0xf40 <scanForBlackDebris+0xc2>
			blackDebrisPos = current_pos + 1;
     f32:	00 91 9d 07 	lds	r16, 0x079D
     f36:	10 91 9e 07 	lds	r17, 0x079E
     f3a:	0f 5f       	subi	r16, 0xFF	; 255
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <scanForBlackDebris+0xdc>
			else if(orientation == point_west)
     f40:	20 91 67 02 	lds	r18, 0x0267
     f44:	30 91 68 02 	lds	r19, 0x0268
     f48:	82 17       	cp	r24, r18
     f4a:	93 07       	cpc	r25, r19
     f4c:	31 f4       	brne	.+12     	; 0xf5a <scanForBlackDebris+0xdc>
			blackDebrisPos = current_pos - 1;
     f4e:	00 91 9d 07 	lds	r16, 0x079D
     f52:	10 91 9e 07 	lds	r17, 0x079E
     f56:	01 50       	subi	r16, 0x01	; 1
     f58:	10 40       	sbci	r17, 0x00	; 0
			
			//There is a possibility that search robot is standing on midpoint and rescue robot is standing on node facing search robot
			//rescue robot will scan that mid point for black debris and the calculated value will be less then 230. In this case we don't have to consider
			//that mid point as black debris so before updating cinfo matrix, vertexWithBlackDebris sending it's position to search robot
			//check if calculated black debris position is equal to search robot position or not. If it is equal then do not consider it as a black debris
			if(blackDebrisPos != searchCurrentPosition)
     f5a:	80 91 e9 02 	lds	r24, 0x02E9
     f5e:	90 91 ea 02 	lds	r25, 0x02EA
     f62:	08 17       	cp	r16, r24
     f64:	19 07       	cpc	r17, r25
     f66:	09 f4       	brne	.+2      	; 0xf6a <scanForBlackDebris+0xec>
     f68:	60 c0       	rjmp	.+192    	; 0x102a <scanForBlackDebris+0x1ac>
			{
				//if calculated black debris position is not equal to rescue robots current position then before doing anything check if it is already scanned or not
				for (int i = 0; vertexWithBlackDebris[i] != 0; i++)
     f6a:	80 91 3d 07 	lds	r24, 0x073D
     f6e:	90 91 3e 07 	lds	r25, 0x073E
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	21 f1       	breq	.+72     	; 0xfbe <scanForBlackDebris+0x140>
				{
					//if that position is already scanned then it will be present in vertexWithBlackDebris
					if(vertexWithBlackDebris[i] == blackDebrisPos)
     f76:	80 91 3d 07 	lds	r24, 0x073D
     f7a:	90 91 3e 07 	lds	r25, 0x073E
     f7e:	b8 01       	movw	r22, r16
     f80:	80 17       	cp	r24, r16
     f82:	91 07       	cpc	r25, r17
     f84:	09 f4       	brne	.+2      	; 0xf88 <scanForBlackDebris+0x10a>
     f86:	51 c0       	rjmp	.+162    	; 0x102a <scanForBlackDebris+0x1ac>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
			//that mid point as black debris so before updating cinfo matrix, vertexWithBlackDebris sending it's position to search robot
			//check if calculated black debris position is equal to search robot position or not. If it is equal then do not consider it as a black debris
			if(blackDebrisPos != searchCurrentPosition)
			{
				//if calculated black debris position is not equal to rescue robots current position then before doing anything check if it is already scanned or not
				for (int i = 0; vertexWithBlackDebris[i] != 0; i++)
     f8c:	4d e3       	ldi	r20, 0x3D	; 61
     f8e:	57 e0       	ldi	r21, 0x07	; 7
     f90:	0b c0       	rjmp	.+22     	; 0xfa8 <scanForBlackDebris+0x12a>
				{
					//if that position is already scanned then it will be present in vertexWithBlackDebris
					if(vertexWithBlackDebris[i] == blackDebrisPos)
     f92:	f9 01       	movw	r30, r18
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e4 0f       	add	r30, r20
     f9a:	f5 1f       	adc	r31, r21
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	68 17       	cp	r22, r24
     fa2:	79 07       	cpc	r23, r25
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <scanForBlackDebris+0x12a>
     fa6:	41 c0       	rjmp	.+130    	; 0x102a <scanForBlackDebris+0x1ac>
			//that mid point as black debris so before updating cinfo matrix, vertexWithBlackDebris sending it's position to search robot
			//check if calculated black debris position is equal to search robot position or not. If it is equal then do not consider it as a black debris
			if(blackDebrisPos != searchCurrentPosition)
			{
				//if calculated black debris position is not equal to rescue robots current position then before doing anything check if it is already scanned or not
				for (int i = 0; vertexWithBlackDebris[i] != 0; i++)
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	f9 01       	movw	r30, r18
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	e4 0f       	add	r30, r20
     fb4:	f5 1f       	adc	r31, r21
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	51 f7       	brne	.-44     	; 0xf92 <scanForBlackDebris+0x114>
					if(vertexWithBlackDebris[i] == blackDebrisPos)
					return;  //if it is present then return before updating it
				}
				
				//if it is not present then update vertexWithBlackDebris with calculated position
				vertexWithBlackDebris[blackDebrisCounter] = blackDebrisPos;
     fbe:	e0 91 9b 07 	lds	r30, 0x079B
     fc2:	f0 91 9c 07 	lds	r31, 0x079C
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	e3 5c       	subi	r30, 0xC3	; 195
     fcc:	f8 4f       	sbci	r31, 0xF8	; 248
     fce:	11 83       	std	Z+1, r17	; 0x01
     fd0:	00 83       	st	Z, r16
				cinfo[blackDebrisPos][4] = 1;  //update cinfo matrix
     fd2:	f8 01       	movw	r30, r16
     fd4:	ee 0f       	add	r30, r30
     fd6:	ff 1f       	adc	r31, r31
     fd8:	c8 01       	movw	r24, r16
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	e8 0f       	add	r30, r24
     fe8:	f9 1f       	adc	r31, r25
     fea:	eb 5a       	subi	r30, 0xAB	; 171
     fec:	fc 4f       	sbci	r31, 0xFC	; 252
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	91 87       	std	Z+9, r25	; 0x09
     ff4:	80 87       	std	Z+8, r24	; 0x08
				
				UDR0 = (char)blackDebrisPos;  //send calculated black debris coordinate to rescue robot
     ff6:	e6 ec       	ldi	r30, 0xC6	; 198
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	00 83       	st	Z, r16
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	97 e4       	ldi	r25, 0x47	; 71
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <scanForBlackDebris+0x182>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <scanForBlackDebris+0x188>
    1006:	00 00       	nop
				_delay_ms(5);  //wait for data to be sent
				UDR0 = 3;  //send end packet as 3 indicating previous data sent must be information about black debris position
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	80 83       	st	Z, r24
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	97 e4       	ldi	r25, 0x47	; 71
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <scanForBlackDebris+0x192>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <scanForBlackDebris+0x198>
    1016:	00 00       	nop
				_delay_ms(5);  //wait for data to be sent
				blackDebrisCounter++;  //increment blackDebrisCounter for the next time use
    1018:	80 91 9b 07 	lds	r24, 0x079B
    101c:	90 91 9c 07 	lds	r25, 0x079C
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	90 93 9c 07 	sts	0x079C, r25
    1026:	80 93 9b 07 	sts	0x079B, r24
			}
		}
	}
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <velocity>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1034:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1038:	60 93 2a 01 	sts	0x012A, r22
}
    103c:	08 95       	ret

0000103e <init_devices>:

//Initialize the devices
void init_devices (void)
{
 	cli(); //Clears the global interrupts
    103e:	f8 94       	cli
	port_init();
    1040:	0e 94 d3 06 	call	0xda6	; 0xda6 <port_init>
	adc_init();
    1044:	0e 94 03 07 	call	0xe06	; 0xe06 <adc_init>
	timer5_init();
    1048:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <timer5_init>
	timer1_init();
    104c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <timer1_init>
	uart0_init();
    1050:	0e 94 b9 06 	call	0xd72	; 0xd72 <uart0_init>
	left_position_encoder_interrupt_init();
    1054:	0e 94 45 03 	call	0x68a	; 0x68a <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1058:	0e 94 4e 03 	call	0x69c	; 0x69c <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
    105c:	78 94       	sei
}
    105e:	08 95       	ret

00001060 <buzzer_on>:


void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    1060:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
    1062:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
    1064:	88 b9       	out	0x08, r24	; 8
}
    1066:	08 95       	ret

00001068 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
    1068:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
    106a:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
    106c:	88 b9       	out	0x08, r24	; 8
}
    106e:	08 95       	ret

00001070 <isValidNode>:
*				 4) If both the above conditions are false then node_coordinate is valid and return 1
* Example Call:	 isValidNode(85);
*
*/
int isValidNode(int node_coordinate)
{
    1070:	9c 01       	movw	r18, r24
	int x, y;
	x = node_coordinate % 10; //extract x coordinate
    1072:	6a e0       	ldi	r22, 0x0A	; 10
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    107a:	e8 2f       	mov	r30, r24
    107c:	f9 2f       	mov	r31, r25
	y = node_coordinate / 10; //extract y coordinate
	
	//If both are event means its a plot coordinate then return 0
	if(x % 2 == 0 && y % 2 == 0)
    107e:	80 fd       	sbrc	r24, 0
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <isValidNode+0x20>
*/
int isValidNode(int node_coordinate)
{
	int x, y;
	x = node_coordinate % 10; //extract x coordinate
	y = node_coordinate / 10; //extract y coordinate
    1082:	c9 01       	movw	r24, r18
    1084:	6a e0       	ldi	r22, 0x0A	; 10
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
	
	//If both are event means its a plot coordinate then return 0
	if(x % 2 == 0 && y % 2 == 0)
    108c:	60 ff       	sbrs	r22, 0
    108e:	0c c0       	rjmp	.+24     	; 0x10a8 <isValidNode+0x38>
	return 0;
	
	//if it is less then 11 or greater then 99 or its a multiple of 10 then passed coordinate is not part of arena then return 0
	if((node_coordinate % 10 == 0) || (node_coordinate < 11 || node_coordinate > 99))
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	69 f0       	breq	.+26     	; 0x10ae <isValidNode+0x3e>
    1094:	2b 50       	subi	r18, 0x0B	; 11
    1096:	30 40       	sbci	r19, 0x00	; 0
	x = node_coordinate % 10; //extract x coordinate
	y = node_coordinate / 10; //extract y coordinate
	
	//If both are event means its a plot coordinate then return 0
	if(x % 2 == 0 && y % 2 == 0)
	return 0;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	29 35       	cpi	r18, 0x59	; 89
    109e:	31 05       	cpc	r19, r1
    10a0:	40 f0       	brcs	.+16     	; 0x10b2 <isValidNode+0x42>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	08 95       	ret
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	08 95       	ret
	
	//if it is less then 11 or greater then 99 or its a multiple of 10 then passed coordinate is not part of arena then return 0
	if((node_coordinate % 10 == 0) || (node_coordinate < 11 || node_coordinate > 99))
	return 0;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
	
	//if above both the conditions are false then passed coordinate is valid so return 1
	return 1;
}
    10b2:	08 95       	ret

000010b4 <turn_left>:
*				     comes on the black line
* Example Call:	  turn_left();
*
*/
void turn_left(unsigned int deg)
{
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	ec 01       	movw	r28, r24
	velocity(255, 255);
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	6f ef       	ldi	r22, 0xFF	; 255
    10be:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
	left_degrees(deg);  //turn left by degree specified
    10c2:	ce 01       	movw	r24, r28
    10c4:	0e 94 9c 06 	call	0xd38	; 0xd38 <left_degrees>
	Center_white_line = ADC_Conversion(2);  //take readings of white line sensor
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    10ce:	80 93 df 02 	sts	0x02DF, r24
	if(Center_white_line < 70)  //check if center white line sensor is on black line or not
    10d2:	86 34       	cpi	r24, 0x46	; 70
    10d4:	a0 f4       	brcc	.+40     	; 0x10fe <turn_left+0x4a>
	{
		velocity(150,150);
    10d6:	86 e9       	ldi	r24, 0x96	; 150
    10d8:	66 e9       	ldi	r22, 0x96	; 150
    10da:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		left();//if center white line is not on black line then turn left
    10de:	0e 94 c5 05 	call	0xb8a	; 0xb8a <left>
		Center_white_line = ADC_Conversion(2);//take readings of white line sensor
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    10e8:	80 93 df 02 	sts	0x02DF, r24
		while (Center_white_line < 70)  //keep turning left while center white line does not come on black line
    10ec:	86 34       	cpi	r24, 0x46	; 70
    10ee:	38 f4       	brcc	.+14     	; 0x10fe <turn_left+0x4a>
			Center_white_line = ADC_Conversion(2);//while turning keep checking the white line sensor
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    10f6:	80 93 df 02 	sts	0x02DF, r24
	if(Center_white_line < 70)  //check if center white line sensor is on black line or not
	{
		velocity(150,150);
		left();//if center white line is not on black line then turn left
		Center_white_line = ADC_Conversion(2);//take readings of white line sensor
		while (Center_white_line < 70)  //keep turning left while center white line does not come on black line
    10fa:	86 34       	cpi	r24, 0x46	; 70
    10fc:	c8 f3       	brcs	.-14     	; 0x10f0 <turn_left+0x3c>
    10fe:	82 e3       	ldi	r24, 0x32	; 50
    1100:	93 eb       	ldi	r25, 0xB3	; 179
    1102:	a2 e0       	ldi	r26, 0x02	; 2
    1104:	81 50       	subi	r24, 0x01	; 1
    1106:	90 40       	sbci	r25, 0x00	; 0
    1108:	a0 40       	sbci	r26, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <turn_left+0x50>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <turn_left+0x5a>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <turn_left+0x5c>
			Center_white_line = ADC_Conversion(2);//while turning keep checking the white line sensor
	}
	_delay_ms(60);//wait for some time
	stop();//stop after turning left
    1110:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <turn_right>:
*				     comes on the black line
* Example Call:	  turn_right();
*
*/
void turn_right(unsigned int deg)
{
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	ec 01       	movw	r28, r24
	velocity(252, 255);
    1120:	8c ef       	ldi	r24, 0xFC	; 252
    1122:	6f ef       	ldi	r22, 0xFF	; 255
    1124:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
	right_degrees(deg);//turn right by degree specified
    1128:	ce 01       	movw	r24, r28
    112a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <right_degrees>
	Center_white_line = ADC_Conversion(2);//take readings of white line sensor
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    1134:	80 93 df 02 	sts	0x02DF, r24
	if(Center_white_line < 70)//check if center white line sensor is on black line or not
    1138:	86 34       	cpi	r24, 0x46	; 70
    113a:	a0 f4       	brcc	.+40     	; 0x1164 <turn_right+0x4a>
	{
		velocity(150,150);
    113c:	86 e9       	ldi	r24, 0x96	; 150
    113e:	66 e9       	ldi	r22, 0x96	; 150
    1140:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		right();//if center white line is not on black line then turn right
    1144:	0e 94 c9 05 	call	0xb92	; 0xb92 <right>
		Center_white_line = ADC_Conversion(2);//take readings of white line sensor
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    114e:	80 93 df 02 	sts	0x02DF, r24
		while (Center_white_line < 70)//keep turning right while center white line does not come on black line
    1152:	86 34       	cpi	r24, 0x46	; 70
    1154:	38 f4       	brcc	.+14     	; 0x1164 <turn_right+0x4a>
			Center_white_line = ADC_Conversion(2);//while turning keep checking the white line sensor
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    115c:	80 93 df 02 	sts	0x02DF, r24
	if(Center_white_line < 70)//check if center white line sensor is on black line or not
	{
		velocity(150,150);
		right();//if center white line is not on black line then turn right
		Center_white_line = ADC_Conversion(2);//take readings of white line sensor
		while (Center_white_line < 70)//keep turning right while center white line does not come on black line
    1160:	86 34       	cpi	r24, 0x46	; 70
    1162:	c8 f3       	brcs	.-14     	; 0x1156 <turn_right+0x3c>
    1164:	82 e3       	ldi	r24, 0x32	; 50
    1166:	93 eb       	ldi	r25, 0xB3	; 179
    1168:	a2 e0       	ldi	r26, 0x02	; 2
    116a:	81 50       	subi	r24, 0x01	; 1
    116c:	90 40       	sbci	r25, 0x00	; 0
    116e:	a0 40       	sbci	r26, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <turn_right+0x50>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <turn_right+0x5a>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <turn_right+0x5c>
			Center_white_line = ADC_Conversion(2);//while turning keep checking the white line sensor
	}
	_delay_ms(60); //wait for some time
	stop(); //stop after turning right
    1176:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <isPlotValid>:
*				 3) If above condition are false then plot_coordinate is valid and return 1
* Example Call:	 isPlotValid(22);
*
*/
int isPlotValid(int plot_coordinate)
{
    1180:	9c 01       	movw	r18, r24
	//if it is less then 11 or greater then 99 or its a multiple of 10 then passed coordinate is not part of arena then return 0
	if(plot_coordinate % 10 == 0 || plot_coordinate < 11 || plot_coordinate > 99)
    1182:	6a e0       	ldi	r22, 0x0A	; 10
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	59 f0       	breq	.+22     	; 0x11a4 <isPlotValid+0x24>
    118e:	2b 30       	cpi	r18, 0x0B	; 11
    1190:	31 05       	cpc	r19, r1
    1192:	5c f0       	brlt	.+22     	; 0x11aa <isPlotValid+0x2a>
		return 0;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	24 36       	cpi	r18, 0x64	; 100
    119a:	31 05       	cpc	r19, r1
    119c:	44 f0       	brlt	.+16     	; 0x11ae <isPlotValid+0x2e>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	08 95       	ret
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	08 95       	ret
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
	else
		return 1;
}
    11ae:	08 95       	ret

000011b0 <init_cinfo_matrix>:
*
* Example Call:	  init_cinfo_matrix();
*
*/
void init_cinfo_matrix()
{
    11b0:	8f 92       	push	r8
    11b2:	9f 92       	push	r9
    11b4:	af 92       	push	r10
    11b6:	bf 92       	push	r11
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	0f 2e       	mov	r0, r31
    11ca:	f5 e1       	ldi	r31, 0x15	; 21
    11cc:	ef 2e       	mov	r14, r31
    11ce:	ff 24       	eor	r15, r15
    11d0:	f0 2d       	mov	r31, r0
    11d2:	cc 24       	eor	r12, r12
    11d4:	dd 24       	eor	r13, r13
    11d6:	c3 94       	inc	r12
    11d8:	0f 2e       	mov	r0, r31
    11da:	fa e0       	ldi	r31, 0x0A	; 10
    11dc:	af 2e       	mov	r10, r31
    11de:	bb 24       	eor	r11, r11
    11e0:	f0 2d       	mov	r31, r0
    11e2:	0c e0       	ldi	r16, 0x0C	; 12
    11e4:	10 e0       	ldi	r17, 0x00	; 0
			if(isValidNode(temp))  //temp shall hold the node to the west which shall be the N-1 
				cinfo[i][j+3] = temp; //checks if the node to west is valid or not
			else
				cinfo[i][j+3] = 0;  //if node is invalid then it shall be zero
			
			cinfo[i][j+4] = 0; //initially all the coordinates are set as unblocked by BLACK DERBIS
    11e6:	0f 2e       	mov	r0, r31
    11e8:	f5 e5       	ldi	r31, 0x55	; 85
    11ea:	8f 2e       	mov	r8, r31
    11ec:	f3 e0       	ldi	r31, 0x03	; 3
    11ee:	9f 2e       	mov	r9, r31
    11f0:	f0 2d       	mov	r31, r0
*				  5) the entry at the 4th position shall be 0 for all vertices i.e initially all co-ordinates shall be UNBLOCKED
*
* Example Call:	  init_cinfo_matrix();
*
*/
void init_cinfo_matrix()
    11f2:	e8 01       	movw	r28, r16
    11f4:	21 97       	sbiw	r28, 0x01	; 1
{
	int i, j, temp;
	for(i = 11; i <= 99; i++)
	{
		if(isValidNode(i))
    11f6:	ce 01       	movw	r24, r28
    11f8:	0e 94 38 08 	call	0x1070	; 0x1070 <isValidNode>
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	09 f4       	brne	.+2      	; 0x1202 <init_cinfo_matrix+0x52>
    1200:	b1 c0       	rjmp	.+354    	; 0x1364 <init_cinfo_matrix+0x1b4>
		{
			//for j value  0 = north, 1 = east, 2 = south, 3 = west, 4 = black debris present or not
			j = 0;
			temp = i + 10;   //temp shall hold the node to the north which shall be the N+10 
			if(isValidNode(temp))  //checks if the node to north is valid or not
    1202:	c7 01       	movw	r24, r14
    1204:	0e 94 38 08 	call	0x1070	; 0x1070 <isValidNode>
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	91 f0       	breq	.+36     	; 0x1230 <init_cinfo_matrix+0x80>
				cinfo[i][j] = temp;  
    120c:	ce 01       	movw	r24, r28
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	9e 01       	movw	r18, r28
    1214:	22 0f       	add	r18, r18
    1216:	33 1f       	adc	r19, r19
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	82 0f       	add	r24, r18
    1222:	93 1f       	adc	r25, r19
    1224:	88 0d       	add	r24, r8
    1226:	99 1d       	adc	r25, r9
    1228:	fc 01       	movw	r30, r24
    122a:	f1 82       	std	Z+1, r15	; 0x01
    122c:	e0 82       	st	Z, r14
    122e:	11 c0       	rjmp	.+34     	; 0x1252 <init_cinfo_matrix+0xa2>
			else
				cinfo[i][j] = 0; //if node is invalid then it shall be zero
    1230:	ce 01       	movw	r24, r28
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	9e 01       	movw	r18, r28
    1238:	22 0f       	add	r18, r18
    123a:	33 1f       	adc	r19, r19
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	88 0d       	add	r24, r8
    124a:	99 1d       	adc	r25, r9
    124c:	fc 01       	movw	r30, r24
    124e:	11 82       	std	Z+1, r1	; 0x01
    1250:	10 82       	st	Z, r1

			temp = i + 1;
			if(isValidNode(temp))  //temp shall hold the node to the east which shall be the N+1 
    1252:	c8 01       	movw	r24, r16
    1254:	0e 94 38 08 	call	0x1070	; 0x1070 <isValidNode>
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	91 f0       	breq	.+36     	; 0x1280 <init_cinfo_matrix+0xd0>
				cinfo[i][j+1] = temp; //checks if the node to east is valid or not
    125c:	ce 01       	movw	r24, r28
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	9e 01       	movw	r18, r28
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
    1274:	88 0d       	add	r24, r8
    1276:	99 1d       	adc	r25, r9
    1278:	fc 01       	movw	r30, r24
    127a:	13 83       	std	Z+3, r17	; 0x03
    127c:	02 83       	std	Z+2, r16	; 0x02
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <init_cinfo_matrix+0xf2>
			else
				cinfo[i][j+1] = 0;  //if node is invalid then it shall be zero
    1280:	ce 01       	movw	r24, r28
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	9e 01       	movw	r18, r28
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	82 0f       	add	r24, r18
    1296:	93 1f       	adc	r25, r19
    1298:	88 0d       	add	r24, r8
    129a:	99 1d       	adc	r25, r9
    129c:	fc 01       	movw	r30, r24
    129e:	13 82       	std	Z+3, r1	; 0x03
    12a0:	12 82       	std	Z+2, r1	; 0x02

			temp = i - 10;
			if(isValidNode(temp))  //temp shall hold the node to the south which shall be the N-10 
    12a2:	c6 01       	movw	r24, r12
    12a4:	0e 94 38 08 	call	0x1070	; 0x1070 <isValidNode>
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	91 f0       	breq	.+36     	; 0x12d0 <init_cinfo_matrix+0x120>
				cinfo[i][j+2] = temp;  //checks if the node to south is valid or not
    12ac:	ce 01       	movw	r24, r28
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	9e 01       	movw	r18, r28
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	88 0d       	add	r24, r8
    12c6:	99 1d       	adc	r25, r9
    12c8:	fc 01       	movw	r30, r24
    12ca:	d5 82       	std	Z+5, r13	; 0x05
    12cc:	c4 82       	std	Z+4, r12	; 0x04
    12ce:	11 c0       	rjmp	.+34     	; 0x12f2 <init_cinfo_matrix+0x142>
			else
				cinfo[i][j+2] = 0;  //if node is invalid then it shall be zero
    12d0:	ce 01       	movw	r24, r28
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	9e 01       	movw	r18, r28
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	82 0f       	add	r24, r18
    12e6:	93 1f       	adc	r25, r19
    12e8:	88 0d       	add	r24, r8
    12ea:	99 1d       	adc	r25, r9
    12ec:	fc 01       	movw	r30, r24
    12ee:	15 82       	std	Z+5, r1	; 0x05
    12f0:	14 82       	std	Z+4, r1	; 0x04

			temp = i - 1;
			if(isValidNode(temp))  //temp shall hold the node to the west which shall be the N-1 
    12f2:	c5 01       	movw	r24, r10
    12f4:	0e 94 38 08 	call	0x1070	; 0x1070 <isValidNode>
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	91 f0       	breq	.+36     	; 0x1320 <init_cinfo_matrix+0x170>
				cinfo[i][j+3] = temp; //checks if the node to west is valid or not
    12fc:	ce 01       	movw	r24, r28
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	9e 01       	movw	r18, r28
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	88 0d       	add	r24, r8
    1316:	99 1d       	adc	r25, r9
    1318:	fc 01       	movw	r30, r24
    131a:	b7 82       	std	Z+7, r11	; 0x07
    131c:	a6 82       	std	Z+6, r10	; 0x06
    131e:	11 c0       	rjmp	.+34     	; 0x1342 <init_cinfo_matrix+0x192>
			else
				cinfo[i][j+3] = 0;  //if node is invalid then it shall be zero
    1320:	ce 01       	movw	r24, r28
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	9e 01       	movw	r18, r28
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	82 0f       	add	r24, r18
    1336:	93 1f       	adc	r25, r19
    1338:	88 0d       	add	r24, r8
    133a:	99 1d       	adc	r25, r9
    133c:	fc 01       	movw	r30, r24
    133e:	17 82       	std	Z+7, r1	; 0x07
    1340:	16 82       	std	Z+6, r1	; 0x06
			
			cinfo[i][j+4] = 0; //initially all the coordinates are set as unblocked by BLACK DERBIS
    1342:	9e 01       	movw	r18, r28
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	ce 01       	movw	r24, r28
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	82 0f       	add	r24, r18
    1358:	93 1f       	adc	r25, r19
    135a:	88 0d       	add	r24, r8
    135c:	99 1d       	adc	r25, r9
    135e:	fc 01       	movw	r30, r24
    1360:	11 86       	std	Z+9, r1	; 0x09
    1362:	10 86       	std	Z+8, r1	; 0x08
    1364:	0f 5f       	subi	r16, 0xFF	; 255
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
    1368:	08 94       	sec
    136a:	a1 1c       	adc	r10, r1
    136c:	b1 1c       	adc	r11, r1
    136e:	08 94       	sec
    1370:	c1 1c       	adc	r12, r1
    1372:	d1 1c       	adc	r13, r1
    1374:	08 94       	sec
    1376:	e1 1c       	adc	r14, r1
    1378:	f1 1c       	adc	r15, r1
*
*/
void init_cinfo_matrix()
{
	int i, j, temp;
	for(i = 11; i <= 99; i++)
    137a:	05 36       	cpi	r16, 0x65	; 101
    137c:	11 05       	cpc	r17, r1
    137e:	09 f0       	breq	.+2      	; 0x1382 <init_cinfo_matrix+0x1d2>
    1380:	38 cf       	rjmp	.-400    	; 0x11f2 <init_cinfo_matrix+0x42>
				cinfo[i][j+3] = 0;  //if node is invalid then it shall be zero
			
			cinfo[i][j+4] = 0; //initially all the coordinates are set as unblocked by BLACK DERBIS
		}
	}
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	bf 90       	pop	r11
    1394:	af 90       	pop	r10
    1396:	9f 90       	pop	r9
    1398:	8f 90       	pop	r8
    139a:	08 95       	ret

0000139c <change_location>:
*
* Example Call: change_location();
*
*/
void change_location(){
	int x=current_pos%10;  //x bit is obtained 
    139c:	80 91 9d 07 	lds	r24, 0x079D
    13a0:	90 91 9e 07 	lds	r25, 0x079E
    13a4:	6a e0       	ldi	r22, 0x0A	; 10
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    13ac:	ac 01       	movw	r20, r24
	int y=current_pos/10;  //y-bit is obtained
	if (orientation==point_north)//if orientation is north 
    13ae:	80 91 dc 02 	lds	r24, 0x02DC
    13b2:	90 91 dd 02 	lds	r25, 0x02DD
    13b6:	20 91 9f 07 	lds	r18, 0x079F
    13ba:	30 91 a0 07 	lds	r19, 0x07A0
    13be:	82 17       	cp	r24, r18
    13c0:	93 07       	cpc	r25, r19
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <change_location+0x50>
	{
		y++; //co-ordinate changed in positive y direction
    13c4:	6f 5f       	subi	r22, 0xFF	; 255
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
		current_pos=y*10+x;
    13c8:	cb 01       	movw	r24, r22
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	66 0f       	add	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	86 0f       	add	r24, r22
    13dc:	97 1f       	adc	r25, r23
    13de:	48 0f       	add	r20, r24
    13e0:	59 1f       	adc	r21, r25
    13e2:	50 93 9e 07 	sts	0x079E, r21
    13e6:	40 93 9d 07 	sts	0x079D, r20
    13ea:	08 95       	ret
	}
	else if (orientation==point_west)//if orientation is west
    13ec:	20 91 67 02 	lds	r18, 0x0267
    13f0:	30 91 68 02 	lds	r19, 0x0268
    13f4:	82 17       	cp	r24, r18
    13f6:	93 07       	cpc	r25, r19
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <change_location+0x86>
	{
		x--; //co-ordinate changed in negative x direction
		current_pos=y*10+x;
    13fa:	cb 01       	movw	r24, r22
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	66 0f       	add	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	86 0f       	add	r24, r22
    140e:	97 1f       	adc	r25, r23
		y++; //co-ordinate changed in positive y direction
		current_pos=y*10+x;
	}
	else if (orientation==point_west)//if orientation is west
	{
		x--; //co-ordinate changed in negative x direction
    1410:	41 50       	subi	r20, 0x01	; 1
    1412:	50 40       	sbci	r21, 0x00	; 0
		current_pos=y*10+x;
    1414:	84 0f       	add	r24, r20
    1416:	95 1f       	adc	r25, r21
    1418:	90 93 9e 07 	sts	0x079E, r25
    141c:	80 93 9d 07 	sts	0x079D, r24
    1420:	08 95       	ret
	}
	else if (orientation==point_east)//if orientation is east
    1422:	20 91 6b 02 	lds	r18, 0x026B
    1426:	30 91 6c 02 	lds	r19, 0x026C
    142a:	82 17       	cp	r24, r18
    142c:	93 07       	cpc	r25, r19
    142e:	a1 f4       	brne	.+40     	; 0x1458 <change_location+0xbc>
	{
		x++; //co-ordinate changed in positive x direction
		current_pos=y*10+x;
    1430:	cb 01       	movw	r24, r22
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	86 0f       	add	r24, r22
    1444:	97 1f       	adc	r25, r23
		x--; //co-ordinate changed in negative x direction
		current_pos=y*10+x;
	}
	else if (orientation==point_east)//if orientation is east
	{
		x++; //co-ordinate changed in positive x direction
    1446:	4f 5f       	subi	r20, 0xFF	; 255
    1448:	5f 4f       	sbci	r21, 0xFF	; 255
		current_pos=y*10+x;
    144a:	84 0f       	add	r24, r20
    144c:	95 1f       	adc	r25, r21
    144e:	90 93 9e 07 	sts	0x079E, r25
    1452:	80 93 9d 07 	sts	0x079D, r24
    1456:	08 95       	ret
	}
	else if(orientation==point_south){ //if orientation is south 
    1458:	20 91 69 02 	lds	r18, 0x0269
    145c:	30 91 6a 02 	lds	r19, 0x026A
    1460:	82 17       	cp	r24, r18
    1462:	93 07       	cpc	r25, r19
    1464:	99 f4       	brne	.+38     	; 0x148c <change_location+0xf0>
		y--;  //co-ordinate changed in negative y direction
    1466:	61 50       	subi	r22, 0x01	; 1
    1468:	70 40       	sbci	r23, 0x00	; 0
		current_pos=y*10+x;
    146a:	cb 01       	movw	r24, r22
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	66 0f       	add	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	66 0f       	add	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	86 0f       	add	r24, r22
    147e:	97 1f       	adc	r25, r23
    1480:	48 0f       	add	r20, r24
    1482:	59 1f       	adc	r21, r25
    1484:	50 93 9e 07 	sts	0x079E, r21
    1488:	40 93 9d 07 	sts	0x079D, r20
    148c:	08 95       	ret

0000148e <getAdjacentPlotPoints>:
*				  2) if black debris is present on any of the adjacent point then it will set 0 on its position in array
* Example Call:	  getAdjacentPlotPoints(46);
*
*/
void getAdjacentPlotPoints(int plot)
{
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
	int i,j;
	pltadjpoints[0] = plot+10;  //calculate adjacent point present on north side of the plot
    149a:	2d e8       	ldi	r18, 0x8D	; 141
    149c:	37 e0       	ldi	r19, 0x07	; 7
    149e:	ac 01       	movw	r20, r24
    14a0:	46 5f       	subi	r20, 0xF6	; 246
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	50 93 8e 07 	sts	0x078E, r21
    14a8:	40 93 8d 07 	sts	0x078D, r20
	pltadjpoints[1] = plot+1;   //calculate adjacent point present on east side of the plot
    14ac:	ac 01       	movw	r20, r24
    14ae:	4f 5f       	subi	r20, 0xFF	; 255
    14b0:	5f 4f       	sbci	r21, 0xFF	; 255
    14b2:	50 93 90 07 	sts	0x0790, r21
    14b6:	40 93 8f 07 	sts	0x078F, r20
	pltadjpoints[2] = plot-10;  //calculate adjacent point present on south side of the plot
    14ba:	ac 01       	movw	r20, r24
    14bc:	4a 50       	subi	r20, 0x0A	; 10
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	50 93 92 07 	sts	0x0792, r21
    14c4:	40 93 91 07 	sts	0x0791, r20
	pltadjpoints[3] = plot-1;   //calculate adjacent point present on west side of the plot
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	90 93 94 07 	sts	0x0794, r25
    14ce:	80 93 93 07 	sts	0x0793, r24
    14d2:	d9 01       	movw	r26, r18
*					 this will indicate all the available plot adjacent points
*				  2) if black debris is present on any of the adjacent point then it will set 0 on its position in array
* Example Call:	  getAdjacentPlotPoints(46);
*
*/
void getAdjacentPlotPoints(int plot)
    14d4:	b9 01       	movw	r22, r18
    14d6:	68 5f       	subi	r22, 0xF8	; 248
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
	//iterate over all calculated adjacent point to check if black debris is present on them or not
	for(i=0;i<4;i++)
	{
		j=0;
		//go through vertexWithBlackDebris array and compare them with the selected adjacent point
		while(vertexWithBlackDebris[j]!=0)
    14da:	ed e3       	ldi	r30, 0x3D	; 61
    14dc:	f7 e0       	ldi	r31, 0x07	; 7
    14de:	00 e0       	ldi	r16, 0x00	; 0
    14e0:	10 e0       	ldi	r17, 0x00	; 0
    14e2:	23 c0       	rjmp	.+70     	; 0x152a <getAdjacentPlotPoints+0x9c>
    14e4:	a8 01       	movw	r20, r16
*					 this will indicate all the available plot adjacent points
*				  2) if black debris is present on any of the adjacent point then it will set 0 on its position in array
* Example Call:	  getAdjacentPlotPoints(46);
*
*/
void getAdjacentPlotPoints(int plot)
    14e6:	7d 01       	movw	r14, r26
		j=0;
		//go through vertexWithBlackDebris array and compare them with the selected adjacent point
		while(vertexWithBlackDebris[j]!=0)
		{
			//if any of the black debris coordinate present in array is equal to adjacent point then it is blocked
			if(vertexWithBlackDebris[j] == pltadjpoints[i])
    14e8:	ca 01       	movw	r24, r20
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	8e 0f       	add	r24, r30
    14f0:	9f 1f       	adc	r25, r31
    14f2:	ec 01       	movw	r28, r24
    14f4:	88 81       	ld	r24, Y
    14f6:	99 81       	ldd	r25, Y+1	; 0x01
    14f8:	2d 91       	ld	r18, X+
    14fa:	3c 91       	ld	r19, X
    14fc:	11 97       	sbiw	r26, 0x01	; 1
    14fe:	82 17       	cp	r24, r18
    1500:	93 07       	cpc	r25, r19
    1502:	19 f4       	brne	.+6      	; 0x150a <getAdjacentPlotPoints+0x7c>
			pltadjpoints[i] = 0;//set 0 in place of blocked adjacent point
    1504:	e7 01       	movw	r28, r14
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	18 82       	st	Y, r1
			j++;//increment j to goto next vertexWithBlackDebris position
    150a:	4f 5f       	subi	r20, 0xFF	; 255
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
	//iterate over all calculated adjacent point to check if black debris is present on them or not
	for(i=0;i<4;i++)
	{
		j=0;
		//go through vertexWithBlackDebris array and compare them with the selected adjacent point
		while(vertexWithBlackDebris[j]!=0)
    150e:	ca 01       	movw	r24, r20
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	8e 0f       	add	r24, r30
    1516:	9f 1f       	adc	r25, r31
    1518:	ec 01       	movw	r28, r24
    151a:	88 81       	ld	r24, Y
    151c:	99 81       	ldd	r25, Y+1	; 0x01
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	19 f7       	brne	.-58     	; 0x14e8 <getAdjacentPlotPoints+0x5a>
    1522:	12 96       	adiw	r26, 0x02	; 2
	pltadjpoints[0] = plot+10;  //calculate adjacent point present on north side of the plot
	pltadjpoints[1] = plot+1;   //calculate adjacent point present on east side of the plot
	pltadjpoints[2] = plot-10;  //calculate adjacent point present on south side of the plot
	pltadjpoints[3] = plot-1;   //calculate adjacent point present on west side of the plot
	//iterate over all calculated adjacent point to check if black debris is present on them or not
	for(i=0;i<4;i++)
    1524:	a6 17       	cp	r26, r22
    1526:	b7 07       	cpc	r27, r23
    1528:	29 f0       	breq	.+10     	; 0x1534 <getAdjacentPlotPoints+0xa6>
	{
		j=0;
		//go through vertexWithBlackDebris array and compare them with the selected adjacent point
		while(vertexWithBlackDebris[j]!=0)
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	c9 f6       	brne	.-78     	; 0x14e4 <getAdjacentPlotPoints+0x56>
    1532:	f7 cf       	rjmp	.-18     	; 0x1522 <getAdjacentPlotPoints+0x94>
			if(vertexWithBlackDebris[j] == pltadjpoints[i])
			pltadjpoints[i] = 0;//set 0 in place of blocked adjacent point
			j++;//increment j to goto next vertexWithBlackDebris position
		}
	}
}
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	08 95       	ret

00001542 <computeMinIndex>:
* 
* 
* Example Call: computeMinIndex(int d[],int v[]);
*
*/
int computeMinIndex(int d[],int v[]){
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
	int min_i=0; // it is the index of the element with least value
	for(i=0;i<100;i++)     
	{
		if(min>d[i]&&v[i]==0)   //if the min is greater that the distance array element being pointed to and is unvisited(i.e. v[i]==0) then...
		{
			min=d[i];           //min is assigned the above condition is true
    1546:	a8 2f       	mov	r26, r24
    1548:	b9 2f       	mov	r27, r25
    154a:	e6 2f       	mov	r30, r22
    154c:	f7 2f       	mov	r31, r23
*
*/
int computeMinIndex(int d[],int v[]){
	int i;
	int min=999; // variable is set to a large value(infinity)
	int min_i=0; // it is the index of the element with least value
    154e:	c0 e0       	ldi	r28, 0x00	; 0
    1550:	d0 e0       	ldi	r29, 0x00	; 0
* Example Call: computeMinIndex(int d[],int v[]);
*
*/
int computeMinIndex(int d[],int v[]){
	int i;
	int min=999; // variable is set to a large value(infinity)
    1552:	67 ee       	ldi	r22, 0xE7	; 231
    1554:	73 e0       	ldi	r23, 0x03	; 3
	int min_i=0; // it is the index of the element with least value
	for(i=0;i<100;i++)     
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(min>d[i]&&v[i]==0)   //if the min is greater that the distance array element being pointed to and is unvisited(i.e. v[i]==0) then...
    155a:	4d 91       	ld	r20, X+
    155c:	5d 91       	ld	r21, X+
    155e:	46 17       	cp	r20, r22
    1560:	57 07       	cpc	r21, r23
    1562:	34 f4       	brge	.+12     	; 0x1570 <computeMinIndex+0x2e>
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	11 f4       	brne	.+4      	; 0x1570 <computeMinIndex+0x2e>
    156c:	e9 01       	movw	r28, r18
		{
			min=d[i];           //min is assigned the above condition is true
    156e:	ba 01       	movw	r22, r20
*/
int computeMinIndex(int d[],int v[]){
	int i;
	int min=999; // variable is set to a large value(infinity)
	int min_i=0; // it is the index of the element with least value
	for(i=0;i<100;i++)     
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	32 96       	adiw	r30, 0x02	; 2
    1576:	24 36       	cpi	r18, 0x64	; 100
    1578:	31 05       	cpc	r19, r1
    157a:	79 f7       	brne	.-34     	; 0x155a <computeMinIndex+0x18>
			min=d[i];           //min is assigned the above condition is true
			min_i=i;            // the index of that node which also happens to be it co-ordinate
		}
	}
	return min_i;               
}
    157c:	8c 2f       	mov	r24, r28
    157e:	9d 2f       	mov	r25, r29
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <findPath>:
* Example Call: findPath(int s, int d);
*
*/

struct pathStack findPath(int s, int d)
{
    1586:	2f 92       	push	r2
    1588:	3f 92       	push	r3
    158a:	4f 92       	push	r4
    158c:	5f 92       	push	r5
    158e:	6f 92       	push	r6
    1590:	7f 92       	push	r7
    1592:	8f 92       	push	r8
    1594:	9f 92       	push	r9
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	c8 52       	subi	r28, 0x28	; 40
    15b0:	d3 40       	sbci	r29, 0x03	; 3
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	cd 5d       	subi	r28, 0xDD	; 221
    15be:	dc 4f       	sbci	r29, 0xFC	; 252
    15c0:	99 83       	std	Y+1, r25	; 0x01
    15c2:	88 83       	st	Y, r24
    15c4:	c3 52       	subi	r28, 0x23	; 35
    15c6:	d3 40       	sbci	r29, 0x03	; 3
    15c8:	7b 01       	movw	r14, r22
    15ca:	cb 5d       	subi	r28, 0xDB	; 219
    15cc:	dc 4f       	sbci	r29, 0xFC	; 252
    15ce:	59 83       	std	Y+1, r21	; 0x01
    15d0:	48 83       	st	Y, r20
    15d2:	c5 52       	subi	r28, 0x25	; 37
    15d4:	d3 40       	sbci	r29, 0x03	; 3
	int visited[100] = {0};  //all elements of the visited array is set to 0 i.e all are set as unvisited
    15d6:	fe 01       	movw	r30, r28
    15d8:	31 96       	adiw	r30, 0x01	; 1
    15da:	88 ec       	ldi	r24, 0xC8	; 200
    15dc:	df 01       	movw	r26, r30
    15de:	1d 92       	st	X+, r1
    15e0:	8a 95       	dec	r24
    15e2:	e9 f7       	brne	.-6      	; 0x15de <findPath+0x58>
	int distance[100];  //the distance stores the distance of all the coordinates from the source
	int parent[100];  //this array stores the parent of each node to be that must be reached to reach with minimum path
	int temp;  
	struct pathStack paths;  //this structure shall contain requested path to be followed. It shall be returned later
	if(s == d)  //if the source and destination are the same then a path containing the source and destination with length equal to one should be sent
    15e4:	cb 5d       	subi	r28, 0xDB	; 219
    15e6:	dc 4f       	sbci	r29, 0xFC	; 252
    15e8:	08 81       	ld	r16, Y
    15ea:	19 81       	ldd	r17, Y+1	; 0x01
    15ec:	c5 52       	subi	r28, 0x25	; 37
    15ee:	d3 40       	sbci	r29, 0x03	; 3
    15f0:	60 17       	cp	r22, r16
    15f2:	71 07       	cpc	r23, r17
    15f4:	39 f5       	brne	.+78     	; 0x1644 <findPath+0xbe>
	{
		paths.TOP = 1;  //length of path shall be 1
		paths.path[0] = d; //the destination is at the end 
    15f6:	c7 5a       	subi	r28, 0xA7	; 167
    15f8:	dd 4f       	sbci	r29, 0xFD	; 253
    15fa:	79 83       	std	Y+1, r23	; 0x01
    15fc:	68 83       	st	Y, r22
    15fe:	c9 55       	subi	r28, 0x59	; 89
    1600:	d2 40       	sbci	r29, 0x02	; 2
		paths.path[1] = s; //the source is at the beginning
    1602:	c5 5a       	subi	r28, 0xA5	; 165
    1604:	dd 4f       	sbci	r29, 0xFD	; 253
    1606:	79 83       	std	Y+1, r23	; 0x01
    1608:	68 83       	st	Y, r22
    160a:	cb 55       	subi	r28, 0x5B	; 91
    160c:	d2 40       	sbci	r29, 0x02	; 2
		return paths;
    160e:	cd 5d       	subi	r28, 0xDD	; 221
    1610:	dc 4f       	sbci	r29, 0xFC	; 252
    1612:	a8 81       	ld	r26, Y
    1614:	b9 81       	ldd	r27, Y+1	; 0x01
    1616:	c3 52       	subi	r28, 0x23	; 35
    1618:	d3 40       	sbci	r29, 0x03	; 3
    161a:	fe 01       	movw	r30, r28
    161c:	e7 5a       	subi	r30, 0xA7	; 167
    161e:	fd 4f       	sbci	r31, 0xFD	; 253
    1620:	8a ec       	ldi	r24, 0xCA	; 202
    1622:	01 90       	ld	r0, Z+
    1624:	0d 92       	st	X+, r0
    1626:	81 50       	subi	r24, 0x01	; 1
    1628:	e1 f7       	brne	.-8      	; 0x1622 <findPath+0x9c>
    162a:	cd 5d       	subi	r28, 0xDD	; 221
    162c:	dc 4f       	sbci	r29, 0xFC	; 252
    162e:	e8 81       	ld	r30, Y
    1630:	f9 81       	ldd	r31, Y+1	; 0x01
    1632:	c3 52       	subi	r28, 0x23	; 35
    1634:	d3 40       	sbci	r29, 0x03	; 3
    1636:	e8 53       	subi	r30, 0x38	; 56
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	b6 c1       	rjmp	.+876    	; 0x19b0 <findPath+0x42a>
    1644:	fe 01       	movw	r30, r28
    1646:	ef 56       	subi	r30, 0x6F	; 111
    1648:	fe 4f       	sbci	r31, 0xFE	; 254
    164a:	de 01       	movw	r26, r28
    164c:	a7 53       	subi	r26, 0x37	; 55
    164e:	bf 4f       	sbci	r27, 0xFF	; 255
*
* Example Call: findPath(int s, int d);
*
*/

struct pathStack findPath(int s, int d)
    1650:	ce 01       	movw	r24, r28
    1652:	87 5a       	subi	r24, 0xA7	; 167
    1654:	9d 4f       	sbci	r25, 0xFD	; 253
		return paths;
	}
	int i,j,k,min_index,top_temp=-1;;
	for(i=0;i<100;i++)
	{
		parent[i] =- 1; //the parent of all nodes is set to -1
    1656:	2f ef       	ldi	r18, 0xFF	; 255
    1658:	3f ef       	ldi	r19, 0xFF	; 255
		distance[i] = 999; //the distance of the nodes from the source 's' set to a large value(infinity)
    165a:	47 ee       	ldi	r20, 0xE7	; 231
    165c:	53 e0       	ldi	r21, 0x03	; 3
		return paths;
	}
	int i,j,k,min_index,top_temp=-1;;
	for(i=0;i<100;i++)
	{
		parent[i] =- 1; //the parent of all nodes is set to -1
    165e:	21 93       	st	Z+, r18
    1660:	31 93       	st	Z+, r19
		distance[i] = 999; //the distance of the nodes from the source 's' set to a large value(infinity)
    1662:	4d 93       	st	X+, r20
    1664:	5d 93       	st	X+, r21
		paths.path[0] = d; //the destination is at the end 
		paths.path[1] = s; //the source is at the beginning
		return paths;
	}
	int i,j,k,min_index,top_temp=-1;;
	for(i=0;i<100;i++)
    1666:	e8 17       	cp	r30, r24
    1668:	f9 07       	cpc	r31, r25
    166a:	c9 f7       	brne	.-14     	; 0x165e <findPath+0xd8>
	{
		parent[i] =- 1; //the parent of all nodes is set to -1
		distance[i] = 999; //the distance of the nodes from the source 's' set to a large value(infinity)
	}
	visited[s] = 1; //parent is set as visited
    166c:	c7 01       	movw	r24, r14
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	fe 01       	movw	r30, r28
    1674:	e8 0f       	add	r30, r24
    1676:	f9 1f       	adc	r31, r25
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	32 83       	std	Z+2, r19	; 0x02
    167e:	21 83       	std	Z+1, r18	; 0x01
	distance[s] = 0; //distance of source vertex from itself shall be 0
    1680:	e9 ec       	ldi	r30, 0xC9	; 201
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	ec 0f       	add	r30, r28
    1686:	fd 1f       	adc	r31, r29
    1688:	e8 0f       	add	r30, r24
    168a:	f9 1f       	adc	r31, r25
    168c:	11 82       	std	Z+1, r1	; 0x01
    168e:	10 82       	st	Z, r1
	parent[s] = s; //parent of the source node shall be itself
    1690:	21 e9       	ldi	r18, 0x91	; 145
    1692:	31 e0       	ldi	r19, 0x01	; 1
    1694:	2c 0f       	add	r18, r28
    1696:	3d 1f       	adc	r19, r29
    1698:	82 0f       	add	r24, r18
    169a:	93 1f       	adc	r25, r19
    169c:	dc 01       	movw	r26, r24
    169e:	11 96       	adiw	r26, 0x01	; 1
    16a0:	fc 92       	st	X, r15
    16a2:	ee 92       	st	-X, r14
	k = 1;
	for(j=0;j<4;j++) //the loop iterates 4 times since in our graph(i.e arena) any node can have maximum of 4 neighbors
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(cinfo[s][j ] != 0) //it is checked whether the node is a valid vertex or not
    16a8:	c7 01       	movw	r24, r14
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	ac 01       	movw	r20, r24
    16b4:	4e 0d       	add	r20, r14
    16b6:	5f 1d       	adc	r21, r15
    16b8:	65 e5       	ldi	r22, 0x55	; 85
    16ba:	73 e0       	ldi	r23, 0x03	; 3
		{
			distance[cinfo[s][j]] = 1; //distance of all the coordinates adjacent to the source is et to 1
    16bc:	cc 24       	eor	r12, r12
    16be:	dd 24       	eor	r13, r13
    16c0:	c3 94       	inc	r12
	distance[s] = 0; //distance of source vertex from itself shall be 0
	parent[s] = s; //parent of the source node shall be itself
	k = 1;
	for(j=0;j<4;j++) //the loop iterates 4 times since in our graph(i.e arena) any node can have maximum of 4 neighbors
	{
		if(cinfo[s][j ] != 0) //it is checked whether the node is a valid vertex or not
    16c2:	ca 01       	movw	r24, r20
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	86 0f       	add	r24, r22
    16ce:	97 1f       	adc	r25, r23
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	19 f1       	breq	.+70     	; 0x1720 <findPath+0x19a>
		{
			distance[cinfo[s][j]] = 1; //distance of all the coordinates adjacent to the source is et to 1
    16da:	ca 01       	movw	r24, r20
    16dc:	82 0f       	add	r24, r18
    16de:	93 1f       	adc	r25, r19
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	fb 01       	movw	r30, r22
    16e6:	e8 0f       	add	r30, r24
    16e8:	f9 1f       	adc	r31, r25
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	09 ec       	ldi	r16, 0xC9	; 201
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	0c 0f       	add	r16, r28
    16f8:	1d 1f       	adc	r17, r29
    16fa:	80 0f       	add	r24, r16
    16fc:	91 1f       	adc	r25, r17
    16fe:	dc 01       	movw	r26, r24
    1700:	cd 92       	st	X+, r12
    1702:	dc 92       	st	X, r13
			parent[cinfo[s][j]] =s ;//the parent of these coordinates is set to the source itself
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	e1 e9       	ldi	r30, 0x91	; 145
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	ec 0f       	add	r30, r28
    1712:	fd 1f       	adc	r31, r29
    1714:	8e 0f       	add	r24, r30
    1716:	9f 1f       	adc	r25, r31
    1718:	dc 01       	movw	r26, r24
    171a:	11 96       	adiw	r26, 0x01	; 1
    171c:	fc 92       	st	X, r15
    171e:	ee 92       	st	-X, r14
	}
	visited[s] = 1; //parent is set as visited
	distance[s] = 0; //distance of source vertex from itself shall be 0
	parent[s] = s; //parent of the source node shall be itself
	k = 1;
	for(j=0;j<4;j++) //the loop iterates 4 times since in our graph(i.e arena) any node can have maximum of 4 neighbors
    1720:	2f 5f       	subi	r18, 0xFF	; 255
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	24 30       	cpi	r18, 0x04	; 4
    1726:	31 05       	cpc	r19, r1
    1728:	61 f6       	brne	.-104    	; 0x16c2 <findPath+0x13c>
    172a:	0f 2e       	mov	r0, r31
    172c:	f4 ef       	ldi	r31, 0xF4	; 244
    172e:	cf 2e       	mov	r12, r31
    1730:	f1 e0       	ldi	r31, 0x01	; 1
    1732:	df 2e       	mov	r13, r31
    1734:	f0 2d       	mov	r31, r0
			distance[cinfo[s][j]] = 1; //distance of all the coordinates adjacent to the source is et to 1
			parent[cinfo[s][j]] =s ;//the parent of these coordinates is set to the source itself
		}
	}
	
	while(visited[d] != 1) //the while loop shall iterate until the destination is marked visited
    1736:	cb 5d       	subi	r28, 0xDB	; 219
    1738:	dc 4f       	sbci	r29, 0xFC	; 252
    173a:	88 81       	ld	r24, Y
    173c:	99 81       	ldd	r25, Y+1	; 0x01
    173e:	c5 52       	subi	r28, 0x25	; 37
    1740:	d3 40       	sbci	r29, 0x03	; 3
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	66 24       	eor	r6, r6
    1748:	77 24       	eor	r7, r7
    174a:	63 94       	inc	r6
    174c:	6c 0e       	add	r6, r28
    174e:	7d 1e       	adc	r7, r29
    1750:	68 0e       	add	r6, r24
    1752:	79 1e       	adc	r7, r25
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed 
		visited[min_index]=1; //the node computed in the previous node is marked as visited
    1754:	44 24       	eor	r4, r4
    1756:	55 24       	eor	r5, r5
    1758:	43 94       	inc	r4
		for(j=0;j<4;j++)
    175a:	22 24       	eor	r2, r2
    175c:	33 24       	eor	r3, r3
		{
			if(cinfo[min_index][j]!=0) //validity of the node adjacent to min_index is checked
    175e:	05 e5       	ldi	r16, 0x55	; 85
    1760:	13 e0       	ldi	r17, 0x03	; 3
    1762:	47 01       	movw	r8, r14
    1764:	c4 c0       	rjmp	.+392    	; 0x18ee <findPath+0x368>
		}
	}
	
	while(visited[d] != 1) //the while loop shall iterate until the destination is marked visited
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed 
    1766:	ce 01       	movw	r24, r28
    1768:	87 53       	subi	r24, 0x37	; 55
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	be 01       	movw	r22, r28
    176e:	6f 5f       	subi	r22, 0xFF	; 255
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	0e 94 a1 0a 	call	0x1542	; 0x1542 <computeMinIndex>
    1776:	dc 01       	movw	r26, r24
		visited[min_index]=1; //the node computed in the previous node is marked as visited
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	e1 e0       	ldi	r30, 0x01	; 1
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	ec 0f       	add	r30, r28
    1782:	fd 1f       	adc	r31, r29
    1784:	8e 0f       	add	r24, r30
    1786:	9f 1f       	adc	r25, r31
    1788:	fc 01       	movw	r30, r24
    178a:	51 82       	std	Z+1, r5	; 0x01
    178c:	40 82       	st	Z, r4
		for(j=0;j<4;j++)
    178e:	a1 01       	movw	r20, r2
		{
			if(cinfo[min_index][j]!=0) //validity of the node adjacent to min_index is checked
    1790:	cd 01       	movw	r24, r26
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	fc 01       	movw	r30, r24
    179c:	ea 0f       	add	r30, r26
    179e:	fb 1f       	adc	r31, r27
			{
				if( distance[cinfo[min_index][j]]>distance[min_index]+1   //this condition checks whether the distance of the node adjacent to the min_index, from the source, is less greater than 1 edge more than that of the min_index 
    17a0:	cd 01       	movw	r24, r26
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0f 2e       	mov	r0, r31
    17a8:	f9 ec       	ldi	r31, 0xC9	; 201
    17aa:	ef 2e       	mov	r14, r31
    17ac:	ff 24       	eor	r15, r15
    17ae:	f0 2d       	mov	r31, r0
    17b0:	ec 0e       	add	r14, r28
    17b2:	fd 1e       	adc	r15, r29
    17b4:	e8 0e       	add	r14, r24
    17b6:	f9 1e       	adc	r15, r25
				                                    &&  cinfo[min_index][4]==0 )  //checks if the node is having a black debris(checks if its blocked) or not. IF zero then its UNBLOCKED 
    17b8:	9d 01       	movw	r18, r26
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	22 0f       	add	r18, r18
    17c0:	33 1f       	adc	r19, r19
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	82 0f       	add	r24, r18
    17c8:	93 1f       	adc	r25, r19
    17ca:	80 0f       	add	r24, r16
    17cc:	91 1f       	adc	r25, r17
    17ce:	aa 24       	eor	r10, r10
    17d0:	bb 24       	eor	r11, r11
    17d2:	68 94       	set
    17d4:	a3 f8       	bld	r10, 3
    17d6:	a8 0e       	add	r10, r24
    17d8:	b9 1e       	adc	r11, r25
    17da:	c7 01       	movw	r24, r14
    17dc:	7d 01       	movw	r14, r26
    17de:	c9 5d       	subi	r28, 0xD9	; 217
    17e0:	dc 4f       	sbci	r29, 0xFC	; 252
    17e2:	99 83       	std	Y+1, r25	; 0x01
    17e4:	88 83       	st	Y, r24
    17e6:	c7 52       	subi	r28, 0x27	; 39
    17e8:	d3 40       	sbci	r29, 0x03	; 3
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed 
		visited[min_index]=1; //the node computed in the previous node is marked as visited
		for(j=0;j<4;j++)
		{
			if(cinfo[min_index][j]!=0) //validity of the node adjacent to min_index is checked
    17ea:	cf 01       	movw	r24, r30
    17ec:	84 0f       	add	r24, r20
    17ee:	95 1f       	adc	r25, r21
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	80 0f       	add	r24, r16
    17f6:	91 1f       	adc	r25, r17
    17f8:	dc 01       	movw	r26, r24
    17fa:	8d 91       	ld	r24, X+
    17fc:	9c 91       	ld	r25, X
    17fe:	11 97       	sbiw	r26, 0x01	; 1
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	09 f4       	brne	.+2      	; 0x1806 <findPath+0x280>
    1804:	48 c0       	rjmp	.+144    	; 0x1896 <findPath+0x310>
			{
				if( distance[cinfo[min_index][j]]>distance[min_index]+1   //this condition checks whether the distance of the node adjacent to the min_index, from the source, is less greater than 1 edge more than that of the min_index 
    1806:	2d 91       	ld	r18, X+
    1808:	3c 91       	ld	r19, X
    180a:	c9 5d       	subi	r28, 0xD9	; 217
    180c:	dc 4f       	sbci	r29, 0xFC	; 252
    180e:	a8 81       	ld	r26, Y
    1810:	b9 81       	ldd	r27, Y+1	; 0x01
    1812:	c7 52       	subi	r28, 0x27	; 39
    1814:	d3 40       	sbci	r29, 0x03	; 3
    1816:	8d 91       	ld	r24, X+
    1818:	9c 91       	ld	r25, X
    181a:	bc 01       	movw	r22, r24
    181c:	6f 5f       	subi	r22, 0xFF	; 255
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	c9 01       	movw	r24, r18
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	29 ec       	ldi	r18, 0xC9	; 201
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	2c 0f       	add	r18, r28
    182c:	3d 1f       	adc	r19, r29
    182e:	82 0f       	add	r24, r18
    1830:	93 1f       	adc	r25, r19
    1832:	dc 01       	movw	r26, r24
    1834:	8d 91       	ld	r24, X+
    1836:	9c 91       	ld	r25, X
    1838:	11 97       	sbiw	r26, 0x01	; 1
    183a:	68 17       	cp	r22, r24
    183c:	79 07       	cpc	r23, r25
    183e:	5c f5       	brge	.+86     	; 0x1896 <findPath+0x310>
				                                    &&  cinfo[min_index][4]==0 )  //checks if the node is having a black debris(checks if its blocked) or not. IF zero then its UNBLOCKED 
    1840:	d5 01       	movw	r26, r10
    1842:	8d 91       	ld	r24, X+
    1844:	9c 91       	ld	r25, X
    1846:	11 97       	sbiw	r26, 0x01	; 1
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	29 f5       	brne	.+74     	; 0x1896 <findPath+0x310>
				{
					distance[cinfo[min_index][j]]=distance[min_index]+1; //the shorter distance is saved 
    184c:	cf 01       	movw	r24, r30
    184e:	84 0f       	add	r24, r20
    1850:	95 1f       	adc	r25, r21
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	98 01       	movw	r18, r16
    1858:	28 0f       	add	r18, r24
    185a:	39 1f       	adc	r19, r25
    185c:	d9 01       	movw	r26, r18
    185e:	8d 91       	ld	r24, X+
    1860:	9c 91       	ld	r25, X
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	a9 ec       	ldi	r26, 0xC9	; 201
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ac 0f       	add	r26, r28
    186c:	bd 1f       	adc	r27, r29
    186e:	8a 0f       	add	r24, r26
    1870:	9b 1f       	adc	r25, r27
    1872:	dc 01       	movw	r26, r24
    1874:	6d 93       	st	X+, r22
    1876:	7c 93       	st	X, r23
					parent[cinfo[min_index][j]]=min_index; //parent of this node is set to the min_index
    1878:	d9 01       	movw	r26, r18
    187a:	8d 91       	ld	r24, X+
    187c:	9c 91       	ld	r25, X
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	21 e9       	ldi	r18, 0x91	; 145
    1884:	31 e0       	ldi	r19, 0x01	; 1
    1886:	2c 0f       	add	r18, r28
    1888:	3d 1f       	adc	r19, r29
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	dc 01       	movw	r26, r24
    1890:	11 96       	adiw	r26, 0x01	; 1
    1892:	fc 92       	st	X, r15
    1894:	ee 92       	st	-X, r14
	
	while(visited[d] != 1) //the while loop shall iterate until the destination is marked visited
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed 
		visited[min_index]=1; //the node computed in the previous node is marked as visited
		for(j=0;j<4;j++)
    1896:	4f 5f       	subi	r20, 0xFF	; 255
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	44 30       	cpi	r20, 0x04	; 4
    189c:	51 05       	cpc	r21, r1
    189e:	09 f0       	breq	.+2      	; 0x18a2 <findPath+0x31c>
    18a0:	a4 cf       	rjmp	.-184    	; 0x17ea <findPath+0x264>
    18a2:	08 94       	sec
    18a4:	c1 08       	sbc	r12, r1
    18a6:	d1 08       	sbc	r13, r1
					parent[cinfo[min_index][j]]=min_index; //parent of this node is set to the min_index
				}
			}
		}
		k++;//counter incremented
		if (k > 500) //if the iterations exceeds 500 then no path can be found hence a deadlock has risen 
    18a8:	c1 14       	cp	r12, r1
    18aa:	d1 04       	cpc	r13, r1
    18ac:	01 f5       	brne	.+64     	; 0x18ee <findPath+0x368>
		{
			lcd_wr_command(0x01);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
			lcd_string("deadlockinf");
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
			paths.TOP = 0;
			return paths;
    18bc:	cd 5d       	subi	r28, 0xDD	; 221
    18be:	dc 4f       	sbci	r29, 0xFC	; 252
    18c0:	a8 81       	ld	r26, Y
    18c2:	b9 81       	ldd	r27, Y+1	; 0x01
    18c4:	c3 52       	subi	r28, 0x23	; 35
    18c6:	d3 40       	sbci	r29, 0x03	; 3
    18c8:	fe 01       	movw	r30, r28
    18ca:	e7 5a       	subi	r30, 0xA7	; 167
    18cc:	fd 4f       	sbci	r31, 0xFD	; 253
    18ce:	8a ec       	ldi	r24, 0xCA	; 202
    18d0:	01 90       	ld	r0, Z+
    18d2:	0d 92       	st	X+, r0
    18d4:	81 50       	subi	r24, 0x01	; 1
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <findPath+0x34a>
    18d8:	cd 5d       	subi	r28, 0xDD	; 221
    18da:	dc 4f       	sbci	r29, 0xFC	; 252
    18dc:	e8 81       	ld	r30, Y
    18de:	f9 81       	ldd	r31, Y+1	; 0x01
    18e0:	c3 52       	subi	r28, 0x23	; 35
    18e2:	d3 40       	sbci	r29, 0x03	; 3
    18e4:	e8 53       	subi	r30, 0x38	; 56
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	11 82       	std	Z+1, r1	; 0x01
    18ea:	10 82       	st	Z, r1
    18ec:	61 c0       	rjmp	.+194    	; 0x19b0 <findPath+0x42a>
			distance[cinfo[s][j]] = 1; //distance of all the coordinates adjacent to the source is et to 1
			parent[cinfo[s][j]] =s ;//the parent of these coordinates is set to the source itself
		}
	}
	
	while(visited[d] != 1) //the while loop shall iterate until the destination is marked visited
    18ee:	f3 01       	movw	r30, r6
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	09 f0       	breq	.+2      	; 0x18fc <findPath+0x376>
    18fa:	35 cf       	rjmp	.-406    	; 0x1766 <findPath+0x1e0>
    18fc:	74 01       	movw	r14, r8
		}
	}
	
	//In the following lines the path from the specified source (s) to the destination (d) shall be computed
	paths.TOP=top_temp;  //the top of the stack is set to -1
	paths.path[++paths.TOP]=d;//the destination shall be at the bottom of the stack and the source at the top
    18fe:	cb 5d       	subi	r28, 0xDB	; 219
    1900:	dc 4f       	sbci	r29, 0xFC	; 252
    1902:	08 81       	ld	r16, Y
    1904:	19 81       	ldd	r17, Y+1	; 0x01
    1906:	c5 52       	subi	r28, 0x25	; 37
    1908:	d3 40       	sbci	r29, 0x03	; 3
    190a:	c7 5a       	subi	r28, 0xA7	; 167
    190c:	dd 4f       	sbci	r29, 0xFD	; 253
    190e:	19 83       	std	Y+1, r17	; 0x01
    1910:	08 83       	st	Y, r16
    1912:	c9 55       	subi	r28, 0x59	; 89
    1914:	d2 40       	sbci	r29, 0x02	; 2
	temp=parent[d]; //parent of the destination node is stored in temp
    1916:	f8 01       	movw	r30, r16
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	21 e9       	ldi	r18, 0x91	; 145
    191e:	31 e0       	ldi	r19, 0x01	; 1
    1920:	2c 0f       	add	r18, r28
    1922:	3d 1f       	adc	r19, r29
    1924:	e2 0f       	add	r30, r18
    1926:	f3 1f       	adc	r31, r19
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
	while(temp!=s) //until the source is reached the path stack will keep building up
    192c:	88 16       	cp	r8, r24
    192e:	99 06       	cpc	r9, r25
    1930:	d1 f0       	breq	.+52     	; 0x1966 <findPath+0x3e0>
    1932:	fe 01       	movw	r30, r28
    1934:	e5 5a       	subi	r30, 0xA5	; 165
    1936:	fd 4f       	sbci	r31, 0xFD	; 253
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	30 e0       	ldi	r19, 0x00	; 0
	{
		paths.path[++paths.TOP]=temp; //the parent node(which must be arrived to to get shortest distance) is saved. This shall precede its intended destination
    193c:	a9 01       	movw	r20, r18
    193e:	81 93       	st	Z+, r24
    1940:	91 93       	st	Z+, r25
		temp=parent[temp]; //parent of the other parent is then copied in a temporary variable
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	61 e9       	ldi	r22, 0x91	; 145
    1948:	71 e0       	ldi	r23, 0x01	; 1
    194a:	6c 0f       	add	r22, r28
    194c:	7d 1f       	adc	r23, r29
    194e:	86 0f       	add	r24, r22
    1950:	97 1f       	adc	r25, r23
    1952:	dc 01       	movw	r26, r24
    1954:	8d 91       	ld	r24, X+
    1956:	9c 91       	ld	r25, X
    1958:	11 97       	sbiw	r26, 0x01	; 1
    195a:	2f 5f       	subi	r18, 0xFF	; 255
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//In the following lines the path from the specified source (s) to the destination (d) shall be computed
	paths.TOP=top_temp;  //the top of the stack is set to -1
	paths.path[++paths.TOP]=d;//the destination shall be at the bottom of the stack and the source at the top
	temp=parent[d]; //parent of the destination node is stored in temp
	while(temp!=s) //until the source is reached the path stack will keep building up
    195e:	e8 16       	cp	r14, r24
    1960:	f9 06       	cpc	r15, r25
    1962:	61 f7       	brne	.-40     	; 0x193c <findPath+0x3b6>
    1964:	02 c0       	rjmp	.+4      	; 0x196a <findPath+0x3e4>
		}
	}
	
	//In the following lines the path from the specified source (s) to the destination (d) shall be computed
	paths.TOP=top_temp;  //the top of the stack is set to -1
	paths.path[++paths.TOP]=d;//the destination shall be at the bottom of the stack and the source at the top
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
	while(temp!=s) //until the source is reached the path stack will keep building up
	{
		paths.path[++paths.TOP]=temp; //the parent node(which must be arrived to to get shortest distance) is saved. This shall precede its intended destination
		temp=parent[temp]; //parent of the other parent is then copied in a temporary variable
	}	
	paths.path[++paths.TOP]=s; //since the loop terminated at the arrival of the source. The source is saved at the top of the stack
    196a:	4f 5f       	subi	r20, 0xFF	; 255
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	fa 01       	movw	r30, r20
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	09 e5       	ldi	r16, 0x59	; 89
    1976:	12 e0       	ldi	r17, 0x02	; 2
    1978:	0c 0f       	add	r16, r28
    197a:	1d 1f       	adc	r17, r29
    197c:	e0 0f       	add	r30, r16
    197e:	f1 1f       	adc	r31, r17
    1980:	f1 82       	std	Z+1, r15	; 0x01
    1982:	e0 82       	st	Z, r14
	return paths; //the path is returned
    1984:	cd 5d       	subi	r28, 0xDD	; 221
    1986:	dc 4f       	sbci	r29, 0xFC	; 252
    1988:	a8 81       	ld	r26, Y
    198a:	b9 81       	ldd	r27, Y+1	; 0x01
    198c:	c3 52       	subi	r28, 0x23	; 35
    198e:	d3 40       	sbci	r29, 0x03	; 3
    1990:	f8 01       	movw	r30, r16
    1992:	8a ec       	ldi	r24, 0xCA	; 202
    1994:	01 90       	ld	r0, Z+
    1996:	0d 92       	st	X+, r0
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	e1 f7       	brne	.-8      	; 0x1994 <findPath+0x40e>
    199c:	cd 5d       	subi	r28, 0xDD	; 221
    199e:	dc 4f       	sbci	r29, 0xFC	; 252
    19a0:	e8 81       	ld	r30, Y
    19a2:	f9 81       	ldd	r31, Y+1	; 0x01
    19a4:	c3 52       	subi	r28, 0x23	; 35
    19a6:	d3 40       	sbci	r29, 0x03	; 3
    19a8:	e8 53       	subi	r30, 0x38	; 56
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	51 83       	std	Z+1, r21	; 0x01
    19ae:	40 83       	st	Z, r20
}
    19b0:	cd 5d       	subi	r28, 0xDD	; 221
    19b2:	dc 4f       	sbci	r29, 0xFC	; 252
    19b4:	88 81       	ld	r24, Y
    19b6:	99 81       	ldd	r25, Y+1	; 0x01
    19b8:	c3 52       	subi	r28, 0x23	; 35
    19ba:	d3 40       	sbci	r29, 0x03	; 3
    19bc:	c8 5d       	subi	r28, 0xD8	; 216
    19be:	dc 4f       	sbci	r29, 0xFC	; 252
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	6f 90       	pop	r6
    19e6:	5f 90       	pop	r5
    19e8:	4f 90       	pop	r4
    19ea:	3f 90       	pop	r3
    19ec:	2f 90       	pop	r2
    19ee:	08 95       	ret

000019f0 <selectMinPathtoDestinationPlot>:
*				  4) finally return path which has minimum length and minimum turns
* Example Call:	  selectMinPathtoDestinationPlot();
*
*/
struct pathStack selectMinPathtoDestinationPlot()
{
    19f0:	2f 92       	push	r2
    19f2:	3f 92       	push	r3
    19f4:	4f 92       	push	r4
    19f6:	5f 92       	push	r5
    19f8:	6f 92       	push	r6
    19fa:	7f 92       	push	r7
    19fc:	8f 92       	push	r8
    19fe:	9f 92       	push	r9
    1a00:	af 92       	push	r10
    1a02:	bf 92       	push	r11
    1a04:	cf 92       	push	r12
    1a06:	df 92       	push	r13
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	c6 59       	subi	r28, 0x96	; 150
    1a1a:	d1 40       	sbci	r29, 0x01	; 1
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	1c 01       	movw	r2, r24
					a3 = minpath.path[i+1];
					if(abs(a1-a2) != abs(a2-a3))
						turn2++;
				}
				if(turn1 < turn2)  //if the calculated path turn in less then turn2
					minpath = path;  //then assign calculated path minpath 
    1a28:	0f 2e       	mov	r0, r31
    1a2a:	fd e8       	ldi	r31, 0x8D	; 141
    1a2c:	8f 2e       	mov	r8, r31
    1a2e:	f7 e0       	ldi	r31, 0x07	; 7
    1a30:	9f 2e       	mov	r9, r31
    1a32:	f0 2d       	mov	r31, r0
*                    turns will be only compared when 2 paths have same length
*				  4) finally return path which has minimum length and minimum turns
* Example Call:	  selectMinPathtoDestinationPlot();
*
*/
struct pathStack selectMinPathtoDestinationPlot()
    1a34:	66 24       	eor	r6, r6
    1a36:	77 24       	eor	r7, r7
    1a38:	68 94       	set
    1a3a:	63 f8       	bld	r6, 3
    1a3c:	68 0c       	add	r6, r8
    1a3e:	79 1c       	adc	r7, r9
{
	int minlength = 999;  //initialize minlength to infinity
    1a40:	07 ee       	ldi	r16, 0xE7	; 231
    1a42:	13 e0       	ldi	r17, 0x03	; 3
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <selectMinPathtoDestinationPlot+0x5a>
	int turn1 = 0; //initialize turns for the path that is calculated
	int turn2 = 0; //initialize turns for path that is stored in minpath
	struct pathStack path, minpath;//declare variables to store minpath and calculated path
	for(int i = 0; i < 4; i++)  //iterate over all the 4 plot adjacent point stored in pltadjpoints array
    1a46:	05 2d       	mov	r16, r5
    1a48:	14 2d       	mov	r17, r4
	{
		if(pltadjpoints[i] != 0)  //if the adjacent point is not 0
    1a4a:	f4 01       	movw	r30, r8
    1a4c:	41 91       	ld	r20, Z+
    1a4e:	51 91       	ld	r21, Z+
    1a50:	4f 01       	movw	r8, r30
    1a52:	41 15       	cp	r20, r1
    1a54:	51 05       	cpc	r21, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <selectMinPathtoDestinationPlot+0x6a>
    1a58:	a0 c0       	rjmp	.+320    	; 0x1b9a <selectMinPathtoDestinationPlot+0x1aa>
		{
			path = findPath(current_pos, pltadjpoints[i]); // calculate the path between current position and selected adjacent point   
    1a5a:	60 91 9d 07 	lds	r22, 0x079D
    1a5e:	70 91 9e 07 	lds	r23, 0x079E
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	0e 94 c3 0a 	call	0x1586	; 0x1586 <findPath>
    1a6a:	c7 53       	subi	r28, 0x37	; 55
    1a6c:	df 4f       	sbci	r29, 0xFF	; 255
    1a6e:	a8 80       	ld	r10, Y
    1a70:	b9 80       	ldd	r11, Y+1	; 0x01
    1a72:	c9 5c       	subi	r28, 0xC9	; 201
    1a74:	d0 40       	sbci	r29, 0x00	; 0
			
			if(path.TOP < minlength) //compare path length with minlength
    1a76:	a0 16       	cp	r10, r16
    1a78:	b1 06       	cpc	r11, r17
    1a7a:	6c f4       	brge	.+26     	; 0x1a96 <selectMinPathtoDestinationPlot+0xa6>
			{
				minlength = path.TOP; //if calculated path length is less then minlength then assign path length to minlength
				minpath = path;  //assign calculated path to minpath
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e5 53       	subi	r30, 0x35	; 53
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	de 01       	movw	r26, r28
    1a84:	11 96       	adiw	r26, 0x01	; 1
    1a86:	8a ec       	ldi	r24, 0xCA	; 202
    1a88:	0d 90       	ld	r0, X+
    1a8a:	01 92       	st	Z+, r0
    1a8c:	81 50       	subi	r24, 0x01	; 1
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <selectMinPathtoDestinationPlot+0x98>
    1a90:	5a 2c       	mov	r5, r10
    1a92:	4b 2c       	mov	r4, r11
    1a94:	82 c0       	rjmp	.+260    	; 0x1b9a <selectMinPathtoDestinationPlot+0x1aa>
			}
			else if(path.TOP == minlength)  //if calculated path length and minlength both are same
    1a96:	a0 16       	cp	r10, r16
    1a98:	b1 06       	cpc	r11, r17
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <selectMinPathtoDestinationPlot+0xae>
    1a9c:	7e c0       	rjmp	.+252    	; 0x1b9a <selectMinPathtoDestinationPlot+0x1aa>
			{
				//then calculate the numbers of turns available in both the paths
				for(int i = 1; i < minlength; i++)
    1a9e:	f2 e0       	ldi	r31, 0x02	; 2
    1aa0:	af 16       	cp	r10, r31
    1aa2:	b1 04       	cpc	r11, r1
    1aa4:	0c f4       	brge	.+2      	; 0x1aa8 <selectMinPathtoDestinationPlot+0xb8>
    1aa6:	79 c0       	rjmp	.+242    	; 0x1b9a <selectMinPathtoDestinationPlot+0x1aa>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	31 96       	adiw	r30, 0x01	; 1
    1aac:	de 01       	movw	r26, r28
    1aae:	a5 53       	subi	r26, 0x35	; 53
    1ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab2:	01 e0       	ldi	r16, 0x01	; 1
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	ee 24       	eor	r14, r14
    1ab8:	ff 24       	eor	r15, r15
    1aba:	cc 24       	eor	r12, r12
    1abc:	dd 24       	eor	r13, r13
    1abe:	cb 56       	subi	r28, 0x6B	; 107
    1ac0:	de 4f       	sbci	r29, 0xFE	; 254
    1ac2:	f9 83       	std	Y+1, r31	; 0x01
    1ac4:	e8 83       	st	Y, r30
    1ac6:	c5 59       	subi	r28, 0x95	; 149
    1ac8:	d1 40       	sbci	r29, 0x01	; 1
*                    turns will be only compared when 2 paths have same length
*				  4) finally return path which has minimum length and minimum turns
* Example Call:	  selectMinPathtoDestinationPlot();
*
*/
struct pathStack selectMinPathtoDestinationPlot()
    1aca:	cb 56       	subi	r28, 0x6B	; 107
    1acc:	de 4f       	sbci	r29, 0xFE	; 254
    1ace:	68 81       	ld	r22, Y
    1ad0:	79 81       	ldd	r23, Y+1	; 0x01
    1ad2:	c5 59       	subi	r28, 0x95	; 149
    1ad4:	d1 40       	sbci	r29, 0x01	; 1
			{
				//then calculate the numbers of turns available in both the paths
				for(int i = 1; i < minlength; i++)
				{
					int a1 = path.path[i-1];
					int a2 = path.path[i];
    1ad6:	fb 01       	movw	r30, r22
    1ad8:	42 81       	ldd	r20, Z+2	; 0x02
    1ada:	53 81       	ldd	r21, Z+3	; 0x03
					int a3 = path.path[i+1];
    1adc:	0f 5f       	subi	r16, 0xFF	; 255
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
					if(abs(a1-a2) != abs(a2-a3))
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	9c 01       	movw	r18, r24
    1ae6:	24 1b       	sub	r18, r20
    1ae8:	35 0b       	sbc	r19, r21
    1aea:	1a f4       	brpl	.+6      	; 0x1af2 <selectMinPathtoDestinationPlot+0x102>
    1aec:	30 95       	com	r19
    1aee:	21 95       	neg	r18
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	fb 01       	movw	r30, r22
    1af4:	84 81       	ldd	r24, Z+4	; 0x04
    1af6:	95 81       	ldd	r25, Z+5	; 0x05
    1af8:	ba 01       	movw	r22, r20
    1afa:	68 1b       	sub	r22, r24
    1afc:	79 0b       	sbc	r23, r25
    1afe:	cb 01       	movw	r24, r22
    1b00:	99 23       	and	r25, r25
    1b02:	1c f4       	brge	.+6      	; 0x1b0a <selectMinPathtoDestinationPlot+0x11a>
    1b04:	90 95       	com	r25
    1b06:	81 95       	neg	r24
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	28 17       	cp	r18, r24
    1b0c:	39 07       	cpc	r19, r25
    1b0e:	19 f0       	breq	.+6      	; 0x1b16 <selectMinPathtoDestinationPlot+0x126>
						turn1++;
    1b10:	08 94       	sec
    1b12:	c1 1c       	adc	r12, r1
    1b14:	d1 1c       	adc	r13, r1
*                    turns will be only compared when 2 paths have same length
*				  4) finally return path which has minimum length and minimum turns
* Example Call:	  selectMinPathtoDestinationPlot();
*
*/
struct pathStack selectMinPathtoDestinationPlot()
    1b16:	bd 01       	movw	r22, r26
					int a3 = path.path[i+1];
					if(abs(a1-a2) != abs(a2-a3))
						turn1++;
					
					a1 = minpath.path[i-1];
					a2 = minpath.path[i];
    1b18:	12 96       	adiw	r26, 0x02	; 2
    1b1a:	4d 91       	ld	r20, X+
    1b1c:	5c 91       	ld	r21, X
    1b1e:	13 97       	sbiw	r26, 0x03	; 3
					a3 = minpath.path[i+1];
					if(abs(a1-a2) != abs(a2-a3))
    1b20:	8d 91       	ld	r24, X+
    1b22:	9c 91       	ld	r25, X
    1b24:	11 97       	sbiw	r26, 0x01	; 1
    1b26:	9c 01       	movw	r18, r24
    1b28:	24 1b       	sub	r18, r20
    1b2a:	35 0b       	sbc	r19, r21
    1b2c:	1a f4       	brpl	.+6      	; 0x1b34 <selectMinPathtoDestinationPlot+0x144>
    1b2e:	30 95       	com	r19
    1b30:	21 95       	neg	r18
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	fb 01       	movw	r30, r22
    1b36:	84 81       	ldd	r24, Z+4	; 0x04
    1b38:	95 81       	ldd	r25, Z+5	; 0x05
    1b3a:	ba 01       	movw	r22, r20
    1b3c:	68 1b       	sub	r22, r24
    1b3e:	79 0b       	sbc	r23, r25
    1b40:	cb 01       	movw	r24, r22
    1b42:	99 23       	and	r25, r25
    1b44:	1c f4       	brge	.+6      	; 0x1b4c <selectMinPathtoDestinationPlot+0x15c>
    1b46:	90 95       	com	r25
    1b48:	81 95       	neg	r24
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	28 17       	cp	r18, r24
    1b4e:	39 07       	cpc	r19, r25
    1b50:	19 f0       	breq	.+6      	; 0x1b58 <selectMinPathtoDestinationPlot+0x168>
						turn2++;
    1b52:	08 94       	sec
    1b54:	e1 1c       	adc	r14, r1
    1b56:	f1 1c       	adc	r15, r1
    1b58:	cb 56       	subi	r28, 0x6B	; 107
    1b5a:	de 4f       	sbci	r29, 0xFE	; 254
    1b5c:	88 81       	ld	r24, Y
    1b5e:	99 81       	ldd	r25, Y+1	; 0x01
    1b60:	c5 59       	subi	r28, 0x95	; 149
    1b62:	d1 40       	sbci	r29, 0x01	; 1
    1b64:	02 96       	adiw	r24, 0x02	; 2
    1b66:	cb 56       	subi	r28, 0x6B	; 107
    1b68:	de 4f       	sbci	r29, 0xFE	; 254
    1b6a:	99 83       	std	Y+1, r25	; 0x01
    1b6c:	88 83       	st	Y, r24
    1b6e:	c5 59       	subi	r28, 0x95	; 149
    1b70:	d1 40       	sbci	r29, 0x01	; 1
    1b72:	12 96       	adiw	r26, 0x02	; 2
				minpath = path;  //assign calculated path to minpath
			}
			else if(path.TOP == minlength)  //if calculated path length and minlength both are same
			{
				//then calculate the numbers of turns available in both the paths
				for(int i = 1; i < minlength; i++)
    1b74:	0a 15       	cp	r16, r10
    1b76:	1b 05       	cpc	r17, r11
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <selectMinPathtoDestinationPlot+0x18c>
    1b7a:	a7 cf       	rjmp	.-178    	; 0x1aca <selectMinPathtoDestinationPlot+0xda>
					a2 = minpath.path[i];
					a3 = minpath.path[i+1];
					if(abs(a1-a2) != abs(a2-a3))
						turn2++;
				}
				if(turn1 < turn2)  //if the calculated path turn in less then turn2
    1b7c:	ce 14       	cp	r12, r14
    1b7e:	df 04       	cpc	r13, r15
    1b80:	64 f4       	brge	.+24     	; 0x1b9a <selectMinPathtoDestinationPlot+0x1aa>
					minpath = path;  //then assign calculated path minpath 
    1b82:	fe 01       	movw	r30, r28
    1b84:	e5 53       	subi	r30, 0x35	; 53
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	de 01       	movw	r26, r28
    1b8a:	11 96       	adiw	r26, 0x01	; 1
    1b8c:	8a ec       	ldi	r24, 0xCA	; 202
    1b8e:	0d 90       	ld	r0, X+
    1b90:	01 92       	st	Z+, r0
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	e1 f7       	brne	.-8      	; 0x1b8e <selectMinPathtoDestinationPlot+0x19e>
    1b96:	5a 2c       	mov	r5, r10
    1b98:	4b 2c       	mov	r4, r11
{
	int minlength = 999;  //initialize minlength to infinity
	int turn1 = 0; //initialize turns for the path that is calculated
	int turn2 = 0; //initialize turns for path that is stored in minpath
	struct pathStack path, minpath;//declare variables to store minpath and calculated path
	for(int i = 0; i < 4; i++)  //iterate over all the 4 plot adjacent point stored in pltadjpoints array
    1b9a:	86 14       	cp	r8, r6
    1b9c:	97 04       	cpc	r9, r7
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <selectMinPathtoDestinationPlot+0x1b2>
    1ba0:	52 cf       	rjmp	.-348    	; 0x1a46 <selectMinPathtoDestinationPlot+0x56>
			}
		}
		turn1 = turn2 = 0;   //reset both path turn1 and turn2 to 0
		minlength = minpath.TOP; //assign minpathlength to minlength variable
	}
	return minpath; //finally return calculated minpath. 
    1ba2:	d1 01       	movw	r26, r2
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e5 53       	subi	r30, 0x35	; 53
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	8a ec       	ldi	r24, 0xCA	; 202
    1bac:	01 90       	ld	r0, Z+
    1bae:	0d 92       	st	X+, r0
    1bb0:	81 50       	subi	r24, 0x01	; 1
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <selectMinPathtoDestinationPlot+0x1bc>
    1bb4:	f1 01       	movw	r30, r2
    1bb6:	e8 53       	subi	r30, 0x38	; 56
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	50 82       	st	Z, r5
    1bbc:	41 82       	std	Z+1, r4	; 0x01
}
    1bbe:	c1 01       	movw	r24, r2
    1bc0:	ca 56       	subi	r28, 0x6A	; 106
    1bc2:	de 4f       	sbci	r29, 0xFE	; 254
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	7f 90       	pop	r7
    1be8:	6f 90       	pop	r6
    1bea:	5f 90       	pop	r5
    1bec:	4f 90       	pop	r4
    1bee:	3f 90       	pop	r3
    1bf0:	2f 90       	pop	r2
    1bf2:	08 95       	ret

00001bf4 <follow>:
*				  or else it will follow the line
* Example Call:	  follow();
*
*/
void follow()
{
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
	lcd_wr_command(0x01);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_string("follow");
    1bfe:	8c e0       	ldi	r24, 0x0C	; 12
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    1c0c:	80 93 e0 02 	sts	0x02E0, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    1c16:	80 93 df 02 	sts	0x02DF, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	0e 94 10 07 	call	0xe20	; 0xe20 <ADC_Conversion>
    1c20:	80 93 de 02 	sts	0x02DE, r24
		
		//sum value will be greater than 150 if bot is on the one of the node of midpoint
		int sum = Left_white_line + Center_white_line + Right_white_line;
    1c24:	40 91 e0 02 	lds	r20, 0x02E0
    1c28:	90 91 df 02 	lds	r25, 0x02DF
    1c2c:	29 2f       	mov	r18, r25
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	24 0f       	add	r18, r20
    1c32:	31 1d       	adc	r19, r1
    1c34:	28 0f       	add	r18, r24
    1c36:	31 1d       	adc	r19, r1
		
		//if sum value is greater than 140 or left or right white senor is on node or midpoint increase the counter
		//first bot will encounter the node, counter value increase to 1. Then bot will encounter midpoint, counter value increase to 2.
		//So whenever bot encounters the node counter value will be ODD and whenever bot will encounter the midpoint counter value will be EVEN 
		if(sum > 130)  //if sum value is greater than 130 then bot is on the node or midpoint
    1c38:	23 38       	cpi	r18, 0x83	; 131
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	0c f4       	brge	.+2      	; 0x1c40 <follow+0x4c>
    1c3e:	5f c0       	rjmp	.+190    	; 0x1cfe <follow+0x10a>
		{
			//below condition will be used at the start of the run. At start the current_pos of rescue robot will be initialized to 0
			//when it encounters the node then it will be set to 59 according to our coordinate system
			if(current_pos == 0)
    1c40:	80 91 9d 07 	lds	r24, 0x079D
    1c44:	90 91 9e 07 	lds	r25, 0x079E
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	99 f4       	brne	.+38     	; 0x1c72 <follow+0x7e>
			{
				current_pos = 59;
    1c4c:	8b e3       	ldi	r24, 0x3B	; 59
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	90 93 9e 07 	sts	0x079E, r25
    1c54:	80 93 9d 07 	sts	0x079D, r24
				orientation = point_west;
    1c58:	80 91 67 02 	lds	r24, 0x0267
    1c5c:	90 91 68 02 	lds	r25, 0x0268
    1c60:	90 93 dd 02 	sts	0x02DD, r25
    1c64:	80 93 dc 02 	sts	0x02DC, r24
				forward_mm(55); //set orientation to west because at the start of the run bot will be facing west
    1c68:	87 e3       	ldi	r24, 0x37	; 55
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 86 06 	call	0xd0c	; 0xd0c <forward_mm>
				return;
    1c70:	68 c0       	rjmp	.+208    	; 0x1d42 <follow+0x14e>
			}
			change_location(current_pos); //change the current position after encountering the node
    1c72:	0e 94 ce 09 	call	0x139c	; 0x139c <change_location>
			UDR0 = (char)current_pos;   //send rescue robot position after changing it
    1c76:	80 91 9d 07 	lds	r24, 0x079D
    1c7a:	e6 ec       	ldi	r30, 0xC6	; 198
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 83       	st	Z, r24
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	97 e4       	ldi	r25, 0x47	; 71
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <follow+0x90>
    1c88:	00 c0       	rjmp	.+0      	; 0x1c8a <follow+0x96>
    1c8a:	00 00       	nop
			_delay_ms(5);   //wait for data to be sent
			UDR0 = 2;//send terminal packet as 2 indicating previous data sent must be rescue robots current position
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	80 83       	st	Z, r24
    1c90:	af ef       	ldi	r26, 0xFF	; 255
    1c92:	b7 e4       	ldi	r27, 0x47	; 71
    1c94:	11 97       	sbiw	r26, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <follow+0xa0>
    1c98:	00 c0       	rjmp	.+0      	; 0x1c9a <follow+0xa6>
    1c9a:	00 00       	nop
			_delay_ms(5);   //wait for data to be sent
			stop();
    1c9c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
			buzzer_on();
    1ca0:	0e 94 30 08 	call	0x1060	; 0x1060 <buzzer_on>
    1ca4:	8f ef       	ldi	r24, 0xFF	; 255
    1ca6:	9f e3       	ldi	r25, 0x3F	; 63
    1ca8:	a2 e0       	ldi	r26, 0x02	; 2
    1caa:	81 50       	subi	r24, 0x01	; 1
    1cac:	90 40       	sbci	r25, 0x00	; 0
    1cae:	a0 40       	sbci	r26, 0x00	; 0
    1cb0:	e1 f7       	brne	.-8      	; 0x1caa <follow+0xb6>
    1cb2:	00 c0       	rjmp	.+0      	; 0x1cb4 <follow+0xc0>
    1cb4:	00 00       	nop
		    _delay_ms(50);
			buzzer_off();
    1cb6:	0e 94 34 08 	call	0x1068	; 0x1068 <buzzer_off>
			//extract x and y from current position
			int x = current_pos % 10;
    1cba:	c0 91 9d 07 	lds	r28, 0x079D
    1cbe:	d0 91 9e 07 	lds	r29, 0x079E
			int y = current_pos / 10;
			velocity(251,255);
    1cc2:	8b ef       	ldi	r24, 0xFB	; 251
    1cc4:	6f ef       	ldi	r22, 0xFF	; 255
    1cc6:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
			scanForBlackDebris();//scan for black debris in fron of bot
    1cca:	0e 94 3f 07 	call	0xe7e	; 0xe7e <scanForBlackDebris>
			stop();
			buzzer_on();
		    _delay_ms(50);
			buzzer_off();
			//extract x and y from current position
			int x = current_pos % 10;
    1cce:	ce 01       	movw	r24, r28
    1cd0:	6a e0       	ldi	r22, 0x0A	; 10
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
			int y = current_pos / 10;
			velocity(251,255);
			scanForBlackDebris();//scan for black debris in fron of bot
			if(x % 2 != 0 && y % 2 != 0)//if the bot is at a node which is at a corner of the survivor plot then go forward by 70mm
    1cd8:	80 ff       	sbrs	r24, 0
    1cda:	0c c0       	rjmp	.+24     	; 0x1cf4 <follow+0x100>
			buzzer_on();
		    _delay_ms(50);
			buzzer_off();
			//extract x and y from current position
			int x = current_pos % 10;
			int y = current_pos / 10;
    1cdc:	ce 01       	movw	r24, r28
    1cde:	6a e0       	ldi	r22, 0x0A	; 10
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
			velocity(251,255);
			scanForBlackDebris();//scan for black debris in fron of bot
			if(x % 2 != 0 && y % 2 != 0)//if the bot is at a node which is at a corner of the survivor plot then go forward by 70mm
    1ce6:	60 ff       	sbrs	r22, 0
    1ce8:	05 c0       	rjmp	.+10     	; 0x1cf4 <follow+0x100>
				forward_mm(70);
    1cea:	86 e4       	ldi	r24, 0x46	; 70
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 86 06 	call	0xd0c	; 0xd0c <forward_mm>
    1cf2:	27 c0       	rjmp	.+78     	; 0x1d42 <follow+0x14e>
			else
				forward_mm(15);//if at a mid-point node then go forward by 15mm
    1cf4:	8f e0       	ldi	r24, 0x0F	; 15
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	0e 94 86 06 	call	0xd0c	; 0xd0c <forward_mm>
    1cfc:	22 c0       	rjmp	.+68     	; 0x1d42 <follow+0x14e>
			break;
		}
        //if no node is encounter then simply follow the line
		if(Center_white_line > 10)
    1cfe:	9b 30       	cpi	r25, 0x0B	; 11
    1d00:	38 f0       	brcs	.+14     	; 0x1d10 <follow+0x11c>
		{
			velocity(255,255);
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	6f ef       	ldi	r22, 0xFF	; 255
    1d06:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
			forward();
    1d0a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <forward>
    1d0e:	7b cf       	rjmp	.-266    	; 0x1c06 <follow+0x12>
		}

		else if(Left_white_line > 10)
    1d10:	4b 30       	cpi	r20, 0x0B	; 11
    1d12:	38 f0       	brcs	.+14     	; 0x1d22 <follow+0x12e>
		{
			velocity(150,255);
    1d14:	86 e9       	ldi	r24, 0x96	; 150
    1d16:	6f ef       	ldi	r22, 0xFF	; 255
    1d18:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
			forward();
    1d1c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <forward>
    1d20:	72 cf       	rjmp	.-284    	; 0x1c06 <follow+0x12>
			/*stop();
			velocity(150,150);
			left();*/
		}

		else if(Right_white_line > 10)
    1d22:	8b 30       	cpi	r24, 0x0B	; 11
    1d24:	38 f0       	brcs	.+14     	; 0x1d34 <follow+0x140>
		{
			velocity(255,150);
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	66 e9       	ldi	r22, 0x96	; 150
    1d2a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
			forward();
    1d2e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <forward>
    1d32:	69 cf       	rjmp	.-302    	; 0x1c06 <follow+0x12>
			right();*/
		}
		
		else if(Center_white_line <= 10 && Left_white_line <= 10 && Right_white_line <= 10)
		{
			velocity(255,255);
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	6f ef       	ldi	r22, 0xFF	; 255
    1d38:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
			forward();
    1d3c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <forward>
    1d40:	62 cf       	rjmp	.-316    	; 0x1c06 <follow+0x12>
		}
	}
}
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	08 95       	ret

00001d48 <north>:
 * Example Call: north(pointing_east);
 *
 */
void north(unsigned int current_orientation) 
{
	if (current_orientation == point_east) 
    1d48:	20 91 6b 02 	lds	r18, 0x026B
    1d4c:	30 91 6c 02 	lds	r19, 0x026C
    1d50:	28 17       	cp	r18, r24
    1d52:	39 07       	cpc	r19, r25
    1d54:	49 f4       	brne	.+18     	; 0x1d68 <north+0x20>
	{
        velocity(255,255);
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	6f ef       	ldi	r22, 0xFF	; 255
    1d5a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_left(60);
    1d5e:	8c e3       	ldi	r24, 0x3C	; 60
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <turn_left>
    1d66:	1f c0       	rjmp	.+62     	; 0x1da6 <north+0x5e>
    } 
	else if (current_orientation == point_west) 
    1d68:	20 91 67 02 	lds	r18, 0x0267
    1d6c:	30 91 68 02 	lds	r19, 0x0268
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	49 f4       	brne	.+18     	; 0x1d88 <north+0x40>
	{ 
        velocity(255,255);
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	6f ef       	ldi	r22, 0xFF	; 255
    1d7a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_right(60);
    1d7e:	8c e3       	ldi	r24, 0x3C	; 60
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <north+0x5e>
    }
	else if (current_orientation == point_south)
    1d88:	20 91 69 02 	lds	r18, 0x0269
    1d8c:	30 91 6a 02 	lds	r19, 0x026A
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	41 f4       	brne	.+16     	; 0x1da6 <north+0x5e>
	{
		velocity(255,255);
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	6f ef       	ldi	r22, 0xFF	; 255
    1d9a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_left(160);
    1d9e:	80 ea       	ldi	r24, 0xA0	; 160
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <turn_left>
	}
	orientation = point_north;
    1da6:	80 91 9f 07 	lds	r24, 0x079F
    1daa:	90 91 a0 07 	lds	r25, 0x07A0
    1dae:	90 93 dd 02 	sts	0x02DD, r25
    1db2:	80 93 dc 02 	sts	0x02DC, r24
}
    1db6:	08 95       	ret

00001db8 <south>:
 * Example Call: south(pointing_east);
 *
 */
void south(unsigned int current_orientation) 
{
    if (current_orientation == point_east) 
    1db8:	20 91 6b 02 	lds	r18, 0x026B
    1dbc:	30 91 6c 02 	lds	r19, 0x026C
    1dc0:	28 17       	cp	r18, r24
    1dc2:	39 07       	cpc	r19, r25
    1dc4:	49 f4       	brne	.+18     	; 0x1dd8 <south+0x20>
	{
        velocity(255,255);
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	6f ef       	ldi	r22, 0xFF	; 255
    1dca:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_right(60);
    1dce:	8c e3       	ldi	r24, 0x3C	; 60
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
    1dd6:	1f c0       	rjmp	.+62     	; 0x1e16 <south+0x5e>
    } 
	else if (current_orientation == point_west) 
    1dd8:	20 91 67 02 	lds	r18, 0x0267
    1ddc:	30 91 68 02 	lds	r19, 0x0268
    1de0:	28 17       	cp	r18, r24
    1de2:	39 07       	cpc	r19, r25
    1de4:	49 f4       	brne	.+18     	; 0x1df8 <south+0x40>
	{
        velocity(255,255);
    1de6:	8f ef       	ldi	r24, 0xFF	; 255
    1de8:	6f ef       	ldi	r22, 0xFF	; 255
    1dea:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_left(60);
    1dee:	8c e3       	ldi	r24, 0x3C	; 60
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <turn_left>
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <south+0x5e>
    }
	else if (current_orientation == point_north)
    1df8:	20 91 9f 07 	lds	r18, 0x079F
    1dfc:	30 91 a0 07 	lds	r19, 0x07A0
    1e00:	28 17       	cp	r18, r24
    1e02:	39 07       	cpc	r19, r25
    1e04:	41 f4       	brne	.+16     	; 0x1e16 <south+0x5e>
	{
		velocity(255,255);
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	6f ef       	ldi	r22, 0xFF	; 255
    1e0a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_right(160);
    1e0e:	80 ea       	ldi	r24, 0xA0	; 160
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
	}
    orientation = point_south;
    1e16:	80 91 69 02 	lds	r24, 0x0269
    1e1a:	90 91 6a 02 	lds	r25, 0x026A
    1e1e:	90 93 dd 02 	sts	0x02DD, r25
    1e22:	80 93 dc 02 	sts	0x02DC, r24
}
    1e26:	08 95       	ret

00001e28 <west>:
 * Example Call: north(pointing_east);
 *
 */
void west(unsigned int current_orientation) 
{ 
    if (current_orientation == point_north) 
    1e28:	20 91 9f 07 	lds	r18, 0x079F
    1e2c:	30 91 a0 07 	lds	r19, 0x07A0
    1e30:	28 17       	cp	r18, r24
    1e32:	39 07       	cpc	r19, r25
    1e34:	49 f4       	brne	.+18     	; 0x1e48 <west+0x20>
	{ 
        velocity(255,255);
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	6f ef       	ldi	r22, 0xFF	; 255
    1e3a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
	    turn_left(60);
    1e3e:	8c e3       	ldi	r24, 0x3C	; 60
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <turn_left>
    1e46:	1f c0       	rjmp	.+62     	; 0x1e86 <west+0x5e>
    } 
	else if (current_orientation == point_south) 
    1e48:	20 91 69 02 	lds	r18, 0x0269
    1e4c:	30 91 6a 02 	lds	r19, 0x026A
    1e50:	28 17       	cp	r18, r24
    1e52:	39 07       	cpc	r19, r25
    1e54:	49 f4       	brne	.+18     	; 0x1e68 <west+0x40>
	{ 
		velocity(255,255);
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	6f ef       	ldi	r22, 0xFF	; 255
    1e5a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
        turn_right(60);      
    1e5e:	8c e3       	ldi	r24, 0x3C	; 60
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <west+0x5e>
    }
	else if (current_orientation == point_east)
    1e68:	20 91 6b 02 	lds	r18, 0x026B
    1e6c:	30 91 6c 02 	lds	r19, 0x026C
    1e70:	28 17       	cp	r18, r24
    1e72:	39 07       	cpc	r19, r25
    1e74:	41 f4       	brne	.+16     	; 0x1e86 <west+0x5e>
	{ 
		velocity(255,255);
    1e76:	8f ef       	ldi	r24, 0xFF	; 255
    1e78:	6f ef       	ldi	r22, 0xFF	; 255
    1e7a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_right(160);
    1e7e:	80 ea       	ldi	r24, 0xA0	; 160
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
	}
    orientation = point_west;
    1e86:	80 91 67 02 	lds	r24, 0x0267
    1e8a:	90 91 68 02 	lds	r25, 0x0268
    1e8e:	90 93 dd 02 	sts	0x02DD, r25
    1e92:	80 93 dc 02 	sts	0x02DC, r24
}
    1e96:	08 95       	ret

00001e98 <east>:
 * Example Call: south(pointing_east);
 *
 */
void east(int current_orientation) 
{
    if (current_orientation == point_north) 
    1e98:	20 91 9f 07 	lds	r18, 0x079F
    1e9c:	30 91 a0 07 	lds	r19, 0x07A0
    1ea0:	82 17       	cp	r24, r18
    1ea2:	93 07       	cpc	r25, r19
    1ea4:	49 f4       	brne	.+18     	; 0x1eb8 <east+0x20>
	{
       velocity(255,255);
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	6f ef       	ldi	r22, 0xFF	; 255
    1eaa:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
	   turn_right(60);
    1eae:	8c e3       	ldi	r24, 0x3C	; 60
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
    1eb6:	1f c0       	rjmp	.+62     	; 0x1ef6 <east+0x5e>
    } 
	else if (current_orientation == point_south) 
    1eb8:	20 91 69 02 	lds	r18, 0x0269
    1ebc:	30 91 6a 02 	lds	r19, 0x026A
    1ec0:	82 17       	cp	r24, r18
    1ec2:	93 07       	cpc	r25, r19
    1ec4:	49 f4       	brne	.+18     	; 0x1ed8 <east+0x40>
	{ 
        velocity(255,255);
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	6f ef       	ldi	r22, 0xFF	; 255
    1eca:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
        turn_left(60);
    1ece:	8c e3       	ldi	r24, 0x3C	; 60
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <turn_left>
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <east+0x5e>
    }
	else if (current_orientation == point_west)
    1ed8:	20 91 67 02 	lds	r18, 0x0267
    1edc:	30 91 68 02 	lds	r19, 0x0268
    1ee0:	82 17       	cp	r24, r18
    1ee2:	93 07       	cpc	r25, r19
    1ee4:	41 f4       	brne	.+16     	; 0x1ef6 <east+0x5e>
	{
		velocity(255,255);
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	6f ef       	ldi	r22, 0xFF	; 255
    1eea:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
		turn_right(160);
    1eee:	80 ea       	ldi	r24, 0xA0	; 160
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
	}
    orientation = point_east;
    1ef6:	80 91 6b 02 	lds	r24, 0x026B
    1efa:	90 91 6c 02 	lds	r25, 0x026C
    1efe:	90 93 dd 02 	sts	0x02DD, r25
    1f02:	80 93 dc 02 	sts	0x02DC, r24
}
    1f06:	08 95       	ret

00001f08 <travel>:
 * Example Call: travel(12,13);
 *					OR
 *				  travel(current_position,next_position)
 */
void travel(int from, int to) 
{
    1f08:	cf 92       	push	r12
    1f0a:	df 92       	push	r13
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	7c 01       	movw	r14, r24
    1f1a:	6b 01       	movw	r12, r22
    int x1 = from % 10;
    int y1 = from / 10;
    int x2 = to % 10;
    int y2 = to / 10;
	lcd_print(2,5,from,2);
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	65 e0       	ldi	r22, 0x05	; 5
    1f20:	a7 01       	movw	r20, r14
    1f22:	22 e0       	ldi	r18, 0x02	; 2
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
	lcd_print(2,8,to,2);
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	68 e0       	ldi	r22, 0x08	; 8
    1f2e:	a6 01       	movw	r20, r12
    1f30:	22 e0       	ldi	r18, 0x02	; 2
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
    if (from != to) 
    1f38:	ec 14       	cp	r14, r12
    1f3a:	fd 04       	cpc	r15, r13
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <travel+0x38>
    1f3e:	63 c0       	rjmp	.+198    	; 0x2006 <travel+0xfe>
 *				  travel(current_position,next_position)
 */
void travel(int from, int to) 
{
    int x1 = from % 10;
    int y1 = from / 10;
    1f40:	2a e0       	ldi	r18, 0x0A	; 10
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	c7 01       	movw	r24, r14
    1f46:	b9 01       	movw	r22, r18
    1f48:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    1f4c:	8b 01       	movw	r16, r22
    int x2 = to % 10;
    int y2 = to / 10;
    1f4e:	c6 01       	movw	r24, r12
    1f50:	b9 01       	movw	r22, r18
    1f52:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    1f56:	eb 01       	movw	r28, r22
	lcd_print(2,5,from,2);
	lcd_print(2,8,to,2);
    if (from != to) 
	{
            if (y1 != y2) 
    1f58:	06 17       	cp	r16, r22
    1f5a:	17 07       	cpc	r17, r23
    1f5c:	e9 f0       	breq	.+58     	; 0x1f98 <travel+0x90>
			{
                if (y1 > y2) // e.g travel(21,11) in this case one has to travel south
    1f5e:	60 17       	cp	r22, r16
    1f60:	71 07       	cpc	r23, r17
    1f62:	64 f4       	brge	.+24     	; 0x1f7c <travel+0x74>
                    while (y1 != y2) 
					{
                        south(orientation);
    1f64:	80 91 dc 02 	lds	r24, 0x02DC
    1f68:	90 91 dd 02 	lds	r25, 0x02DD
    1f6c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <south>
                        y1--;
    1f70:	01 50       	subi	r16, 0x01	; 1
    1f72:	10 40       	sbci	r17, 0x00	; 0
    if (from != to) 
	{
            if (y1 != y2) 
			{
                if (y1 > y2) // e.g travel(21,11) in this case one has to travel south
                    while (y1 != y2) 
    1f74:	c0 17       	cp	r28, r16
    1f76:	d1 07       	cpc	r29, r17
    1f78:	a9 f7       	brne	.-22     	; 0x1f64 <travel+0x5c>
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <travel+0x90>
					{
                        south(orientation);
                        y1--;
                    } 
				else if (y2 > y1)// e.g travel(11,21) in this case one has to travel north
    1f7c:	06 17       	cp	r16, r22
    1f7e:	17 07       	cpc	r17, r23
    1f80:	5c f4       	brge	.+22     	; 0x1f98 <travel+0x90>
                    while (y2 != y1) 
					{
                        north(orientation);
    1f82:	80 91 dc 02 	lds	r24, 0x02DC
    1f86:	90 91 dd 02 	lds	r25, 0x02DD
    1f8a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <north>
                        y1++;
    1f8e:	0f 5f       	subi	r16, 0xFF	; 255
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
					{
                        south(orientation);
                        y1--;
                    } 
				else if (y2 > y1)// e.g travel(11,21) in this case one has to travel north
                    while (y2 != y1) 
    1f92:	c0 17       	cp	r28, r16
    1f94:	d1 07       	cpc	r29, r17
    1f96:	a9 f7       	brne	.-22     	; 0x1f82 <travel+0x7a>
 *					OR
 *				  travel(current_position,next_position)
 */
void travel(int from, int to) 
{
    int x1 = from % 10;
    1f98:	2a e0       	ldi	r18, 0x0A	; 10
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	c7 01       	movw	r24, r14
    1f9e:	b9 01       	movw	r22, r18
    1fa0:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    1fa4:	8c 01       	movw	r16, r24
    int y1 = from / 10;
    int x2 = to % 10;
    1fa6:	c6 01       	movw	r24, r12
    1fa8:	b9 01       	movw	r22, r18
    1faa:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    1fae:	ec 01       	movw	r28, r24
					{
                        north(orientation);
                        y1++;
                    }
            }
            if (x1 != x2) 
    1fb0:	08 17       	cp	r16, r24
    1fb2:	19 07       	cpc	r17, r25
    1fb4:	e9 f0       	breq	.+58     	; 0x1ff0 <travel+0xe8>
			{
                if (x1 > x2)// e.g travel(12,11) in this case one has to travel west
    1fb6:	80 17       	cp	r24, r16
    1fb8:	91 07       	cpc	r25, r17
    1fba:	64 f4       	brge	.+24     	; 0x1fd4 <travel+0xcc>
                    while (x1 != x2) 
					{
                        west(orientation);
    1fbc:	80 91 dc 02 	lds	r24, 0x02DC
    1fc0:	90 91 dd 02 	lds	r25, 0x02DD
    1fc4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <west>
                        x1--;
    1fc8:	01 50       	subi	r16, 0x01	; 1
    1fca:	10 40       	sbci	r17, 0x00	; 0
                    }
            }
            if (x1 != x2) 
			{
                if (x1 > x2)// e.g travel(12,11) in this case one has to travel west
                    while (x1 != x2) 
    1fcc:	c0 17       	cp	r28, r16
    1fce:	d1 07       	cpc	r29, r17
    1fd0:	a9 f7       	brne	.-22     	; 0x1fbc <travel+0xb4>
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <travel+0xe8>
					{
                        west(orientation);
                        x1--;

                    } 
				else if (x2 > x1)// e.g travel(11,12) in this case one has to travel east
    1fd4:	08 17       	cp	r16, r24
    1fd6:	19 07       	cpc	r17, r25
    1fd8:	5c f4       	brge	.+22     	; 0x1ff0 <travel+0xe8>
                    while (x1 != x2) 
					{
                        east(orientation);
    1fda:	80 91 dc 02 	lds	r24, 0x02DC
    1fde:	90 91 dd 02 	lds	r25, 0x02DD
    1fe2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <east>
                        x1++;
    1fe6:	0f 5f       	subi	r16, 0xFF	; 255
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
                        west(orientation);
                        x1--;

                    } 
				else if (x2 > x1)// e.g travel(11,12) in this case one has to travel east
                    while (x1 != x2) 
    1fea:	c0 17       	cp	r28, r16
    1fec:	d1 07       	cpc	r29, r17
    1fee:	a9 f7       	brne	.-22     	; 0x1fda <travel+0xd2>
					}
            }
        }
		else
			return;
		scanForBlackDebris();
    1ff0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <scanForBlackDebris>
		if(resetPath != 1)
    1ff4:	80 91 97 07 	lds	r24, 0x0797
    1ff8:	90 91 98 07 	lds	r25, 0x0798
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	91 05       	cpc	r25, r1
    2000:	11 f0       	breq	.+4      	; 0x2006 <travel+0xfe>
			follow();
    2002:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <follow>
}
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	df 90       	pop	r13
    2014:	cf 90       	pop	r12
    2016:	08 95       	ret

00002018 <RescueIsAllowedtoGo>:
*
* Example Call: RescueIsAllowedtoGo(52);
*
*/
int RescueIsAllowedtoGo(int node_pos)
{
    2018:	bc 01       	movw	r22, r24
	for(int i = 0; i < searchPathLength; i++) // length of the search robot's path is stored in the global variable searchPathLength. the loop shall iterate those many times 
    201a:	80 91 53 03 	lds	r24, 0x0353
    201e:	90 91 54 03 	lds	r25, 0x0354
    2022:	18 16       	cp	r1, r24
    2024:	19 06       	cpc	r1, r25
    2026:	0c f5       	brge	.+66     	; 0x206a <RescueIsAllowedtoGo+0x52>
		if(node_pos == searchPath[i]) //checks if the content of the array at 'i'th location matches the node_pos. If yes then it is in the search robots path 
    2028:	80 91 ef 02 	lds	r24, 0x02EF
    202c:	90 91 f0 02 	lds	r25, 0x02F0
    2030:	86 17       	cp	r24, r22
    2032:	97 07       	cpc	r25, r23
    2034:	e9 f0       	breq	.+58     	; 0x2070 <RescueIsAllowedtoGo+0x58>
* Example Call: RescueIsAllowedtoGo(52);
*
*/
int RescueIsAllowedtoGo(int node_pos)
{
	for(int i = 0; i < searchPathLength; i++) // length of the search robot's path is stored in the global variable searchPathLength. the loop shall iterate those many times 
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
		if(node_pos == searchPath[i]) //checks if the content of the array at 'i'th location matches the node_pos. If yes then it is in the search robots path 
    203a:	4f ee       	ldi	r20, 0xEF	; 239
    203c:	52 e0       	ldi	r21, 0x02	; 2
    203e:	0a c0       	rjmp	.+20     	; 0x2054 <RescueIsAllowedtoGo+0x3c>
    2040:	fc 01       	movw	r30, r24
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	e4 0f       	add	r30, r20
    2048:	f5 1f       	adc	r31, r21
    204a:	20 81       	ld	r18, Z
    204c:	31 81       	ldd	r19, Z+1	; 0x01
    204e:	26 17       	cp	r18, r22
    2050:	37 07       	cpc	r19, r23
    2052:	89 f0       	breq	.+34     	; 0x2076 <RescueIsAllowedtoGo+0x5e>
* Example Call: RescueIsAllowedtoGo(52);
*
*/
int RescueIsAllowedtoGo(int node_pos)
{
	for(int i = 0; i < searchPathLength; i++) // length of the search robot's path is stored in the global variable searchPathLength. the loop shall iterate those many times 
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	20 91 53 03 	lds	r18, 0x0353
    205a:	30 91 54 03 	lds	r19, 0x0354
    205e:	82 17       	cp	r24, r18
    2060:	93 07       	cpc	r25, r19
    2062:	74 f3       	brlt	.-36     	; 0x2040 <RescueIsAllowedtoGo+0x28>
		if(node_pos == searchPath[i]) //checks if the content of the array at 'i'th location matches the node_pos. If yes then it is in the search robots path 
				return 0; //the function returns false as its not allowed
	
	return 1; //function returns true as the robot is allowed
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	08 95       	ret
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	08 95       	ret
*/
int RescueIsAllowedtoGo(int node_pos)
{
	for(int i = 0; i < searchPathLength; i++) // length of the search robot's path is stored in the global variable searchPathLength. the loop shall iterate those many times 
		if(node_pos == searchPath[i]) //checks if the content of the array at 'i'th location matches the node_pos. If yes then it is in the search robots path 
				return 0; //the function returns false as its not allowed
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	08 95       	ret
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
	
	return 1; //function returns true as the robot is allowed
}
    207a:	08 95       	ret

0000207c <nodeIsInSearchPath>:
* Logic:  the specified node is searched for in the global variable searchPath using a loop, if found then the function shall return true i.e 1 and if not then false i.e. 0
*
* Example Call: nodeIsInSearchPath(72);
*
*/
int nodeIsInSearchPath(int position){
    207c:	ac 01       	movw	r20, r24
   
   for(int i = 0; i < 50; i++)//loop iterates to the maximum size of the searchPath array 
   {
	   if(searchPath[i] == position){ //the content at the 'i'th location of the array is compared to specified position
    207e:	80 91 ef 02 	lds	r24, 0x02EF
    2082:	90 91 f0 02 	lds	r25, 0x02F0
    2086:	84 17       	cp	r24, r20
    2088:	95 07       	cpc	r25, r21
    208a:	a9 f0       	breq	.+42     	; 0x20b6 <nodeIsInSearchPath+0x3a>
* Example Call: nodeIsInSearchPath(72);
*
*/
int nodeIsInSearchPath(int position){
   
   for(int i = 0; i < 50; i++)//loop iterates to the maximum size of the searchPath array 
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
   {
	   if(searchPath[i] == position){ //the content at the 'i'th location of the array is compared to specified position
    2090:	6f ee       	ldi	r22, 0xEF	; 239
    2092:	72 e0       	ldi	r23, 0x02	; 2
    2094:	fc 01       	movw	r30, r24
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	e6 0f       	add	r30, r22
    209c:	f7 1f       	adc	r31, r23
    209e:	20 81       	ld	r18, Z
    20a0:	31 81       	ldd	r19, Z+1	; 0x01
    20a2:	24 17       	cp	r18, r20
    20a4:	35 07       	cpc	r19, r21
    20a6:	51 f0       	breq	.+20     	; 0x20bc <nodeIsInSearchPath+0x40>
* Example Call: nodeIsInSearchPath(72);
*
*/
int nodeIsInSearchPath(int position){
   
   for(int i = 0; i < 50; i++)//loop iterates to the maximum size of the searchPath array 
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	82 33       	cpi	r24, 0x32	; 50
    20ac:	91 05       	cpc	r25, r1
    20ae:	91 f7       	brne	.-28     	; 0x2094 <nodeIsInSearchPath+0x18>
   {
	   if(searchPath[i] == position){ //the content at the 'i'th location of the array is compared to specified position
		   return 1;    //if position exists in search's path he true i.e. 1 is returned
	   }
   }
   return 0; //if the position is not found anywhere in the loop then false. i.e. is returned
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	08 95       	ret
int nodeIsInSearchPath(int position){
   
   for(int i = 0; i < 50; i++)//loop iterates to the maximum size of the searchPath array 
   {
	   if(searchPath[i] == position){ //the content at the 'i'th location of the array is compared to specified position
		   return 1;    //if position exists in search's path he true i.e. 1 is returned
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	08 95       	ret
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
	   }
   }
   return 0; //if the position is not found anywhere in the loop then false. i.e. is returned
}
    20c0:	08 95       	ret

000020c2 <findPathToNearestFreeNode>:
*
* Example Call: findPathToNearestFreeNode()
*
*/
struct pathStack findPathToNearestFreeNode()
{
    20c2:	2f 92       	push	r2
    20c4:	3f 92       	push	r3
    20c6:	4f 92       	push	r4
    20c8:	5f 92       	push	r5
    20ca:	6f 92       	push	r6
    20cc:	7f 92       	push	r7
    20ce:	8f 92       	push	r8
    20d0:	9f 92       	push	r9
    20d2:	af 92       	push	r10
    20d4:	bf 92       	push	r11
    20d6:	cf 92       	push	r12
    20d8:	df 92       	push	r13
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	c6 52       	subi	r28, 0x26	; 38
    20ec:	d3 40       	sbci	r29, 0x03	; 3
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cd 5d       	subi	r28, 0xDD	; 221
    20fa:	dc 4f       	sbci	r29, 0xFC	; 252
    20fc:	99 83       	std	Y+1, r25	; 0x01
    20fe:	88 83       	st	Y, r24
    2100:	c3 52       	subi	r28, 0x23	; 35
    2102:	d3 40       	sbci	r29, 0x03	; 3
	int visited[100] = {0};  //all elements of the visited array is set to 0 i.e all are set as unvisited
    2104:	fe 01       	movw	r30, r28
    2106:	31 96       	adiw	r30, 0x01	; 1
    2108:	88 ec       	ldi	r24, 0xC8	; 200
    210a:	df 01       	movw	r26, r30
    210c:	1d 92       	st	X+, r1
    210e:	8a 95       	dec	r24
    2110:	e9 f7       	brne	.-6      	; 0x210c <findPathToNearestFreeNode+0x4a>
	int distance[100];  //the distance stores the distance of all the coordinates from the source
	int parent[100];  //this array stores the parent of each node to be that must be reached to reach with minimum path
	int temp;
	int s = current_pos;//the source shall be the current position of the robot
    2112:	60 90 9d 07 	lds	r6, 0x079D
    2116:	70 90 9e 07 	lds	r7, 0x079E
    211a:	fe 01       	movw	r30, r28
    211c:	ef 56       	subi	r30, 0x6F	; 111
    211e:	fe 4f       	sbci	r31, 0xFE	; 254
    2120:	de 01       	movw	r26, r28
    2122:	a7 53       	subi	r26, 0x37	; 55
    2124:	bf 4f       	sbci	r27, 0xFF	; 255
*
*
* Example Call: findPathToNearestFreeNode()
*
*/
struct pathStack findPathToNearestFreeNode()
    2126:	ce 01       	movw	r24, r28
    2128:	87 5a       	subi	r24, 0xA7	; 167
    212a:	9d 4f       	sbci	r25, 0xFD	; 253
	int freenode=0; //the free is initialized to 0
	struct pathStack paths;
	int i,j,k,min_index;
	for(i=0;i<100;i++)
	{
		parent[i] =- 1; //the parent of all nodes is set to -1
    212c:	2f ef       	ldi	r18, 0xFF	; 255
    212e:	3f ef       	ldi	r19, 0xFF	; 255
		distance[i] = 999; //the distance of the nodes from the source 's' set to a large value(infinity)
    2130:	47 ee       	ldi	r20, 0xE7	; 231
    2132:	53 e0       	ldi	r21, 0x03	; 3
	int freenode=0; //the free is initialized to 0
	struct pathStack paths;
	int i,j,k,min_index;
	for(i=0;i<100;i++)
	{
		parent[i] =- 1; //the parent of all nodes is set to -1
    2134:	21 93       	st	Z+, r18
    2136:	31 93       	st	Z+, r19
		distance[i] = 999; //the distance of the nodes from the source 's' set to a large value(infinity)
    2138:	4d 93       	st	X+, r20
    213a:	5d 93       	st	X+, r21
	int temp;
	int s = current_pos;//the source shall be the current position of the robot
	int freenode=0; //the free is initialized to 0
	struct pathStack paths;
	int i,j,k,min_index;
	for(i=0;i<100;i++)
    213c:	e8 17       	cp	r30, r24
    213e:	f9 07       	cpc	r31, r25
    2140:	c9 f7       	brne	.-14     	; 0x2134 <findPathToNearestFreeNode+0x72>
	{
		parent[i] =- 1; //the parent of all nodes is set to -1
		distance[i] = 999; //the distance of the nodes from the source 's' set to a large value(infinity)
	}
	visited[s] = 1; //parent is set as visited
    2142:	c3 01       	movw	r24, r6
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	fe 01       	movw	r30, r28
    214a:	e8 0f       	add	r30, r24
    214c:	f9 1f       	adc	r31, r25
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	32 83       	std	Z+2, r19	; 0x02
    2154:	21 83       	std	Z+1, r18	; 0x01
	distance[s] = 0; //distance of source vertex from itself shall be 0
    2156:	e9 ec       	ldi	r30, 0xC9	; 201
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	ec 0f       	add	r30, r28
    215c:	fd 1f       	adc	r31, r29
    215e:	e8 0f       	add	r30, r24
    2160:	f9 1f       	adc	r31, r25
    2162:	11 82       	std	Z+1, r1	; 0x01
    2164:	10 82       	st	Z, r1
	parent[s] = s; //parent of the source node shall be itself
    2166:	e1 e9       	ldi	r30, 0x91	; 145
    2168:	f1 e0       	ldi	r31, 0x01	; 1
    216a:	ec 0f       	add	r30, r28
    216c:	fd 1f       	adc	r31, r29
    216e:	8e 0f       	add	r24, r30
    2170:	9f 1f       	adc	r25, r31
    2172:	dc 01       	movw	r26, r24
    2174:	11 96       	adiw	r26, 0x01	; 1
    2176:	7c 92       	st	X, r7
    2178:	6e 92       	st	-X, r6
	k = 1;	
	
	for(j=0;j<4;j++) //the loop iterates 4 times since in our graph(i.e arena) any node can have maximum of 4 neighbors
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(cinfo[s][j ] != 0) //it is checked whether the node is a valid vertex or not
    217e:	c3 01       	movw	r24, r6
    2180:	88 0f       	add	r24, r24
    2182:	99 1f       	adc	r25, r25
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	ac 01       	movw	r20, r24
    218a:	46 0d       	add	r20, r6
    218c:	57 1d       	adc	r21, r7
    218e:	65 e5       	ldi	r22, 0x55	; 85
    2190:	73 e0       	ldi	r23, 0x03	; 3
		{
			distance[cinfo[s][j]] = 1; //distance of all the coordinates adjacent to the source is et to 1
    2192:	ee 24       	eor	r14, r14
    2194:	ff 24       	eor	r15, r15
    2196:	e3 94       	inc	r14
	parent[s] = s; //parent of the source node shall be itself
	k = 1;	
	
	for(j=0;j<4;j++) //the loop iterates 4 times since in our graph(i.e arena) any node can have maximum of 4 neighbors
	{
		if(cinfo[s][j ] != 0) //it is checked whether the node is a valid vertex or not
    2198:	ca 01       	movw	r24, r20
    219a:	82 0f       	add	r24, r18
    219c:	93 1f       	adc	r25, r19
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	86 0f       	add	r24, r22
    21a4:	97 1f       	adc	r25, r23
    21a6:	fc 01       	movw	r30, r24
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	19 f1       	breq	.+70     	; 0x21f6 <findPathToNearestFreeNode+0x134>
		{
			distance[cinfo[s][j]] = 1; //distance of all the coordinates adjacent to the source is et to 1
    21b0:	ca 01       	movw	r24, r20
    21b2:	82 0f       	add	r24, r18
    21b4:	93 1f       	adc	r25, r19
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	fb 01       	movw	r30, r22
    21bc:	e8 0f       	add	r30, r24
    21be:	f9 1f       	adc	r31, r25
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	09 ec       	ldi	r16, 0xC9	; 201
    21ca:	10 e0       	ldi	r17, 0x00	; 0
    21cc:	0c 0f       	add	r16, r28
    21ce:	1d 1f       	adc	r17, r29
    21d0:	80 0f       	add	r24, r16
    21d2:	91 1f       	adc	r25, r17
    21d4:	dc 01       	movw	r26, r24
    21d6:	ed 92       	st	X+, r14
    21d8:	fc 92       	st	X, r15
			parent[cinfo[s][j]] =s ;//the parent of these coordinates is set to the source itself
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	e1 e9       	ldi	r30, 0x91	; 145
    21e4:	f1 e0       	ldi	r31, 0x01	; 1
    21e6:	ec 0f       	add	r30, r28
    21e8:	fd 1f       	adc	r31, r29
    21ea:	8e 0f       	add	r24, r30
    21ec:	9f 1f       	adc	r25, r31
    21ee:	dc 01       	movw	r26, r24
    21f0:	11 96       	adiw	r26, 0x01	; 1
    21f2:	7c 92       	st	X, r7
    21f4:	6e 92       	st	-X, r6
	visited[s] = 1; //parent is set as visited
	distance[s] = 0; //distance of source vertex from itself shall be 0
	parent[s] = s; //parent of the source node shall be itself
	k = 1;	
	
	for(j=0;j<4;j++) //the loop iterates 4 times since in our graph(i.e arena) any node can have maximum of 4 neighbors
    21f6:	2f 5f       	subi	r18, 0xFF	; 255
    21f8:	3f 4f       	sbci	r19, 0xFF	; 255
    21fa:	24 30       	cpi	r18, 0x04	; 4
    21fc:	31 05       	cpc	r19, r1
    21fe:	61 f6       	brne	.-104    	; 0x2198 <findPathToNearestFreeNode+0xd6>
    2200:	0f 2e       	mov	r0, r31
    2202:	f4 ef       	ldi	r31, 0xF4	; 244
    2204:	af 2e       	mov	r10, r31
    2206:	f1 e0       	ldi	r31, 0x01	; 1
    2208:	bf 2e       	mov	r11, r31
    220a:	f0 2d       	mov	r31, r0
	}
	
	while(1)
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed
		visited[min_index]=1; //the node computed in the previous node is marked as visited
    220c:	44 24       	eor	r4, r4
    220e:	55 24       	eor	r5, r5
    2210:	43 94       	inc	r4
		for(j=0;j<4;j++)
    2212:	22 24       	eor	r2, r2
    2214:	33 24       	eor	r3, r3
		{
			if(cinfo[min_index][j]!=0) //validity of the node adjacent to min_index is checked
    2216:	0f 2e       	mov	r0, r31
    2218:	f5 e5       	ldi	r31, 0x55	; 85
    221a:	ef 2e       	mov	r14, r31
    221c:	f3 e0       	ldi	r31, 0x03	; 3
    221e:	ff 2e       	mov	r15, r31
    2220:	f0 2d       	mov	r31, r0
		}
	}
	
	while(1)
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed
    2222:	ce 01       	movw	r24, r28
    2224:	87 53       	subi	r24, 0x37	; 55
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	be 01       	movw	r22, r28
    222a:	6f 5f       	subi	r22, 0xFF	; 255
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <computeMinIndex>
    2232:	8c 01       	movw	r16, r24
		visited[min_index]=1; //the node computed in the previous node is marked as visited
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	e1 e0       	ldi	r30, 0x01	; 1
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	ec 0f       	add	r30, r28
    223e:	fd 1f       	adc	r31, r29
    2240:	8e 0f       	add	r24, r30
    2242:	9f 1f       	adc	r25, r31
    2244:	dc 01       	movw	r26, r24
    2246:	4d 92       	st	X+, r4
    2248:	5c 92       	st	X, r5
		for(j=0;j<4;j++)
    224a:	a1 01       	movw	r20, r2
		{
			if(cinfo[min_index][j]!=0) //validity of the node adjacent to min_index is checked
    224c:	c8 01       	movw	r24, r16
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	fc 01       	movw	r30, r24
    2258:	e0 0f       	add	r30, r16
    225a:	f1 1f       	adc	r31, r17
			{
				if( distance[cinfo[min_index][j]]>distance[min_index]+1   //this condition checks whether the distance of the node adjacent to the min_index, from the source, is less greater than 1 edge more than that of the min_index
    225c:	c8 01       	movw	r24, r16
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	0f 2e       	mov	r0, r31
    2264:	f9 ec       	ldi	r31, 0xC9	; 201
    2266:	cf 2e       	mov	r12, r31
    2268:	dd 24       	eor	r13, r13
    226a:	f0 2d       	mov	r31, r0
    226c:	cc 0e       	add	r12, r28
    226e:	dd 1e       	adc	r13, r29
    2270:	c8 0e       	add	r12, r24
    2272:	d9 1e       	adc	r13, r25
				                &&  cinfo[min_index][4]==0 )  //checks if the node is having a black debris(checks if its blocked) or not. IF zero then its UNBLOCKED
    2274:	98 01       	movw	r18, r16
    2276:	22 0f       	add	r18, r18
    2278:	33 1f       	adc	r19, r19
    227a:	22 0f       	add	r18, r18
    227c:	33 1f       	adc	r19, r19
    227e:	22 0f       	add	r18, r18
    2280:	33 1f       	adc	r19, r19
    2282:	82 0f       	add	r24, r18
    2284:	93 1f       	adc	r25, r19
    2286:	8e 0d       	add	r24, r14
    2288:	9f 1d       	adc	r25, r15
    228a:	88 24       	eor	r8, r8
    228c:	99 24       	eor	r9, r9
    228e:	68 94       	set
    2290:	83 f8       	bld	r8, 3
    2292:	88 0e       	add	r8, r24
    2294:	99 1e       	adc	r9, r25
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed
		visited[min_index]=1; //the node computed in the previous node is marked as visited
		for(j=0;j<4;j++)
		{
			if(cinfo[min_index][j]!=0) //validity of the node adjacent to min_index is checked
    2296:	cf 01       	movw	r24, r30
    2298:	84 0f       	add	r24, r20
    229a:	95 1f       	adc	r25, r21
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	8e 0d       	add	r24, r14
    22a2:	9f 1d       	adc	r25, r15
    22a4:	dc 01       	movw	r26, r24
    22a6:	8d 91       	ld	r24, X+
    22a8:	9c 91       	ld	r25, X
    22aa:	11 97       	sbiw	r26, 0x01	; 1
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <__stack+0xb3>
    22b0:	4e c0       	rjmp	.+156    	; 0x234e <__stack+0x14f>
			{
				if( distance[cinfo[min_index][j]]>distance[min_index]+1   //this condition checks whether the distance of the node adjacent to the min_index, from the source, is less greater than 1 edge more than that of the min_index
    22b2:	2d 91       	ld	r18, X+
    22b4:	3c 91       	ld	r19, X
    22b6:	d6 01       	movw	r26, r12
    22b8:	8d 91       	ld	r24, X+
    22ba:	9c 91       	ld	r25, X
    22bc:	bc 01       	movw	r22, r24
    22be:	6f 5f       	subi	r22, 0xFF	; 255
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	c9 01       	movw	r24, r18
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	29 ec       	ldi	r18, 0xC9	; 201
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	2c 0f       	add	r18, r28
    22ce:	3d 1f       	adc	r19, r29
    22d0:	82 0f       	add	r24, r18
    22d2:	93 1f       	adc	r25, r19
    22d4:	dc 01       	movw	r26, r24
    22d6:	8d 91       	ld	r24, X+
    22d8:	9c 91       	ld	r25, X
    22da:	11 97       	sbiw	r26, 0x01	; 1
    22dc:	68 17       	cp	r22, r24
    22de:	79 07       	cpc	r23, r25
    22e0:	b4 f5       	brge	.+108    	; 0x234e <__stack+0x14f>
				                &&  cinfo[min_index][4]==0 )  //checks if the node is having a black debris(checks if its blocked) or not. IF zero then its UNBLOCKED
    22e2:	d4 01       	movw	r26, r8
    22e4:	8d 91       	ld	r24, X+
    22e6:	9c 91       	ld	r25, X
    22e8:	11 97       	sbiw	r26, 0x01	; 1
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	81 f5       	brne	.+96     	; 0x234e <__stack+0x14f>
				{
					distance[cinfo[min_index][j]]=distance[min_index]+1; //the shorter distance is saved
    22ee:	cf 01       	movw	r24, r30
    22f0:	84 0f       	add	r24, r20
    22f2:	95 1f       	adc	r25, r21
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	97 01       	movw	r18, r14
    22fa:	28 0f       	add	r18, r24
    22fc:	39 1f       	adc	r19, r25
    22fe:	cb 5d       	subi	r28, 0xDB	; 219
    2300:	dc 4f       	sbci	r29, 0xFC	; 252
    2302:	39 83       	std	Y+1, r19	; 0x01
    2304:	28 83       	st	Y, r18
    2306:	c5 52       	subi	r28, 0x25	; 37
    2308:	d3 40       	sbci	r29, 0x03	; 3
    230a:	d9 01       	movw	r26, r18
    230c:	8d 91       	ld	r24, X+
    230e:	9c 91       	ld	r25, X
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	29 ec       	ldi	r18, 0xC9	; 201
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	2c 0f       	add	r18, r28
    231a:	3d 1f       	adc	r19, r29
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	dc 01       	movw	r26, r24
    2322:	6d 93       	st	X+, r22
    2324:	7c 93       	st	X, r23
					parent[cinfo[min_index][j]]=min_index; //parent of this node is set to the min_index
    2326:	cb 5d       	subi	r28, 0xDB	; 219
    2328:	dc 4f       	sbci	r29, 0xFC	; 252
    232a:	a8 81       	ld	r26, Y
    232c:	b9 81       	ldd	r27, Y+1	; 0x01
    232e:	c5 52       	subi	r28, 0x25	; 37
    2330:	d3 40       	sbci	r29, 0x03	; 3
    2332:	8d 91       	ld	r24, X+
    2334:	9c 91       	ld	r25, X
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	21 e9       	ldi	r18, 0x91	; 145
    233c:	31 e0       	ldi	r19, 0x01	; 1
    233e:	2c 0f       	add	r18, r28
    2340:	3d 1f       	adc	r19, r29
    2342:	82 0f       	add	r24, r18
    2344:	93 1f       	adc	r25, r19
    2346:	dc 01       	movw	r26, r24
    2348:	11 96       	adiw	r26, 0x01	; 1
    234a:	1c 93       	st	X, r17
    234c:	0e 93       	st	-X, r16
	
	while(1)
	{
		min_index=computeMinIndex(distance,visited); //the UNVISITED node with the least distance is computed
		visited[min_index]=1; //the node computed in the previous node is marked as visited
		for(j=0;j<4;j++)
    234e:	4f 5f       	subi	r20, 0xFF	; 255
    2350:	5f 4f       	sbci	r21, 0xFF	; 255
    2352:	44 30       	cpi	r20, 0x04	; 4
    2354:	51 05       	cpc	r21, r1
    2356:	09 f0       	breq	.+2      	; 0x235a <__stack+0x15b>
    2358:	9e cf       	rjmp	.-196    	; 0x2296 <__stack+0x97>
					distance[cinfo[min_index][j]]=distance[min_index]+1; //the shorter distance is saved
					parent[cinfo[min_index][j]]=min_index; //parent of this node is set to the min_index
				}
			}
		}
		if (RescueIsAllowedtoGo(min_index) //checks if the computed min_index lies in the search Robots path or not
    235a:	c8 01       	movw	r24, r16
    235c:	0e 94 0c 10 	call	0x2018	; 0x2018 <RescueIsAllowedtoGo>
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	51 f1       	breq	.+84     	; 0x23b8 <__stack+0x1b9>
		                       && cinfo[min_index][4]==0) //checks if he node is unblocked or not
    2364:	c8 01       	movw	r24, r16
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	98 01       	movw	r18, r16
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	22 0f       	add	r18, r18
    2376:	33 1f       	adc	r19, r19
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	8e 0d       	add	r24, r14
    237e:	9f 1d       	adc	r25, r15
    2380:	fc 01       	movw	r30, r24
    2382:	80 85       	ldd	r24, Z+8	; 0x08
    2384:	91 85       	ldd	r25, Z+9	; 0x09
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	b9 f4       	brne	.+46     	; 0x23b8 <__stack+0x1b9>
			break;
		}
	}
	//In the following lines the path from the specified free source(s) to the destination (freenode) shall be computed
	paths.TOP = -1; //the top of the stack is set to -1
	paths.path[++paths.TOP] = freenode; //the destination shall be at the bottom of the stack and the source at the top
    238a:	c7 5a       	subi	r28, 0xA7	; 167
    238c:	dd 4f       	sbci	r29, 0xFD	; 253
    238e:	19 83       	std	Y+1, r17	; 0x01
    2390:	08 83       	st	Y, r16
    2392:	c9 55       	subi	r28, 0x59	; 89
    2394:	d2 40       	sbci	r29, 0x02	; 2
	temp = parent[freenode]; //parent of the destination node is stored in temp
    2396:	f8 01       	movw	r30, r16
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	01 e9       	ldi	r16, 0x91	; 145
    239e:	11 e0       	ldi	r17, 0x01	; 1
    23a0:	0c 0f       	add	r16, r28
    23a2:	1d 1f       	adc	r17, r29
    23a4:	e0 0f       	add	r30, r16
    23a6:	f1 1f       	adc	r31, r17
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
	while(temp!=s) //until the source is reached the path stack will keep building up
    23ac:	68 16       	cp	r6, r24
    23ae:	79 06       	cpc	r7, r25
    23b0:	51 f5       	brne	.+84     	; 0x2406 <__stack+0x207>
			break;
		}
	}
	//In the following lines the path from the specified free source(s) to the destination (freenode) shall be computed
	paths.TOP = -1; //the top of the stack is set to -1
	paths.path[++paths.TOP] = freenode; //the destination shall be at the bottom of the stack and the source at the top
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	40 c0       	rjmp	.+128    	; 0x2438 <__stack+0x239>
	temp = parent[freenode]; //parent of the destination node is stored in temp
	while(temp!=s) //until the source is reached the path stack will keep building up
    23b8:	08 94       	sec
    23ba:	a1 08       	sbc	r10, r1
    23bc:	b1 08       	sbc	r11, r1
		{
			freenode = min_index; //the free node is saved and the loop is broken
			break;
		}
		k++; //counter incremented
		if (k > 500) //if the iterations exceeds 500 then no path can be found hence a deadlock has risen 
    23be:	a1 14       	cp	r10, r1
    23c0:	b1 04       	cpc	r11, r1
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <__stack+0x1c7>
    23c4:	2e cf       	rjmp	.-420    	; 0x2222 <__stack+0x23>
		{
			lcd_wr_command(0x01);
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
			lcd_string("deadlockinf");
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	92 e0       	ldi	r25, 0x02	; 2
    23d0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
			paths.TOP = 0;
			return paths;
    23d4:	cd 5d       	subi	r28, 0xDD	; 221
    23d6:	dc 4f       	sbci	r29, 0xFC	; 252
    23d8:	a8 81       	ld	r26, Y
    23da:	b9 81       	ldd	r27, Y+1	; 0x01
    23dc:	c3 52       	subi	r28, 0x23	; 35
    23de:	d3 40       	sbci	r29, 0x03	; 3
    23e0:	fe 01       	movw	r30, r28
    23e2:	e7 5a       	subi	r30, 0xA7	; 167
    23e4:	fd 4f       	sbci	r31, 0xFD	; 253
    23e6:	8a ec       	ldi	r24, 0xCA	; 202
    23e8:	01 90       	ld	r0, Z+
    23ea:	0d 92       	st	X+, r0
    23ec:	81 50       	subi	r24, 0x01	; 1
    23ee:	e1 f7       	brne	.-8      	; 0x23e8 <__stack+0x1e9>
    23f0:	cd 5d       	subi	r28, 0xDD	; 221
    23f2:	dc 4f       	sbci	r29, 0xFC	; 252
    23f4:	e8 81       	ld	r30, Y
    23f6:	f9 81       	ldd	r31, Y+1	; 0x01
    23f8:	c3 52       	subi	r28, 0x23	; 35
    23fa:	d3 40       	sbci	r29, 0x03	; 3
    23fc:	e8 53       	subi	r30, 0x38	; 56
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	11 82       	std	Z+1, r1	; 0x01
    2402:	10 82       	st	Z, r1
    2404:	3c c0       	rjmp	.+120    	; 0x247e <__stack+0x27f>
    2406:	fe 01       	movw	r30, r28
    2408:	e5 5a       	subi	r30, 0xA5	; 165
    240a:	fd 4f       	sbci	r31, 0xFD	; 253
	}
	//In the following lines the path from the specified free source(s) to the destination (freenode) shall be computed
	paths.TOP = -1; //the top of the stack is set to -1
	paths.path[++paths.TOP] = freenode; //the destination shall be at the bottom of the stack and the source at the top
	temp = parent[freenode]; //parent of the destination node is stored in temp
	while(temp!=s) //until the source is reached the path stack will keep building up
    240c:	21 e0       	ldi	r18, 0x01	; 1
    240e:	30 e0       	ldi	r19, 0x00	; 0
	{
		paths.path[++paths.TOP]=temp; //the parent node(which must be arrived to to get shortest distance) is saved. This shall precede its intended destination
    2410:	a9 01       	movw	r20, r18
    2412:	81 93       	st	Z+, r24
    2414:	91 93       	st	Z+, r25
		temp=parent[temp]; //parent of the other parent is then copied in a temporary variable
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	61 e9       	ldi	r22, 0x91	; 145
    241c:	71 e0       	ldi	r23, 0x01	; 1
    241e:	6c 0f       	add	r22, r28
    2420:	7d 1f       	adc	r23, r29
    2422:	86 0f       	add	r24, r22
    2424:	97 1f       	adc	r25, r23
    2426:	dc 01       	movw	r26, r24
    2428:	8d 91       	ld	r24, X+
    242a:	9c 91       	ld	r25, X
    242c:	11 97       	sbiw	r26, 0x01	; 1
    242e:	2f 5f       	subi	r18, 0xFF	; 255
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	//In the following lines the path from the specified free source(s) to the destination (freenode) shall be computed
	paths.TOP = -1; //the top of the stack is set to -1
	paths.path[++paths.TOP] = freenode; //the destination shall be at the bottom of the stack and the source at the top
	temp = parent[freenode]; //parent of the destination node is stored in temp
	while(temp!=s) //until the source is reached the path stack will keep building up
    2432:	68 16       	cp	r6, r24
    2434:	79 06       	cpc	r7, r25
    2436:	61 f7       	brne	.-40     	; 0x2410 <__stack+0x211>
	{
		paths.path[++paths.TOP]=temp; //the parent node(which must be arrived to to get shortest distance) is saved. This shall precede its intended destination
		temp=parent[temp]; //parent of the other parent is then copied in a temporary variable
	}
	paths.path[++paths.TOP]=s; //since the loop terminated at the arrival of the source. The source is saved at the top of the stack
    2438:	4f 5f       	subi	r20, 0xFF	; 255
    243a:	5f 4f       	sbci	r21, 0xFF	; 255
    243c:	fa 01       	movw	r30, r20
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	09 e5       	ldi	r16, 0x59	; 89
    2444:	12 e0       	ldi	r17, 0x02	; 2
    2446:	0c 0f       	add	r16, r28
    2448:	1d 1f       	adc	r17, r29
    244a:	e0 0f       	add	r30, r16
    244c:	f1 1f       	adc	r31, r17
    244e:	71 82       	std	Z+1, r7	; 0x01
    2450:	60 82       	st	Z, r6
	return paths; //the path is returned
    2452:	cd 5d       	subi	r28, 0xDD	; 221
    2454:	dc 4f       	sbci	r29, 0xFC	; 252
    2456:	a8 81       	ld	r26, Y
    2458:	b9 81       	ldd	r27, Y+1	; 0x01
    245a:	c3 52       	subi	r28, 0x23	; 35
    245c:	d3 40       	sbci	r29, 0x03	; 3
    245e:	f8 01       	movw	r30, r16
    2460:	8a ec       	ldi	r24, 0xCA	; 202
    2462:	01 90       	ld	r0, Z+
    2464:	0d 92       	st	X+, r0
    2466:	81 50       	subi	r24, 0x01	; 1
    2468:	e1 f7       	brne	.-8      	; 0x2462 <__stack+0x263>
    246a:	cd 5d       	subi	r28, 0xDD	; 221
    246c:	dc 4f       	sbci	r29, 0xFC	; 252
    246e:	e8 81       	ld	r30, Y
    2470:	f9 81       	ldd	r31, Y+1	; 0x01
    2472:	c3 52       	subi	r28, 0x23	; 35
    2474:	d3 40       	sbci	r29, 0x03	; 3
    2476:	e8 53       	subi	r30, 0x38	; 56
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	51 83       	std	Z+1, r21	; 0x01
    247c:	40 83       	st	Z, r20
}
    247e:	cd 5d       	subi	r28, 0xDD	; 221
    2480:	dc 4f       	sbci	r29, 0xFC	; 252
    2482:	88 81       	ld	r24, Y
    2484:	99 81       	ldd	r25, Y+1	; 0x01
    2486:	c3 52       	subi	r28, 0x23	; 35
    2488:	d3 40       	sbci	r29, 0x03	; 3
    248a:	ca 5d       	subi	r28, 0xDA	; 218
    248c:	dc 4f       	sbci	r29, 0xFC	; 252
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	df 90       	pop	r13
    24a6:	cf 90       	pop	r12
    24a8:	bf 90       	pop	r11
    24aa:	af 90       	pop	r10
    24ac:	9f 90       	pop	r9
    24ae:	8f 90       	pop	r8
    24b0:	7f 90       	pop	r7
    24b2:	6f 90       	pop	r6
    24b4:	5f 90       	pop	r5
    24b6:	4f 90       	pop	r4
    24b8:	3f 90       	pop	r3
    24ba:	2f 90       	pop	r2
    24bc:	08 95       	ret

000024be <goToNearestFreeNode>:
* Example Call: RescueIsAllowedtoGo(52);
*
*/

void goToNearestFreeNode()
{
    24be:	2f 92       	push	r2
    24c0:	3f 92       	push	r3
    24c2:	4f 92       	push	r4
    24c4:	5f 92       	push	r5
    24c6:	6f 92       	push	r6
    24c8:	7f 92       	push	r7
    24ca:	8f 92       	push	r8
    24cc:	9f 92       	push	r9
    24ce:	af 92       	push	r10
    24d0:	bf 92       	push	r11
    24d2:	cf 92       	push	r12
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	ca 5c       	subi	r28, 0xCA	; 202
    24e8:	d0 40       	sbci	r29, 0x00	; 0
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
	int freenode;  //the free node computed shall be stored here 
	int i = 0; //counter initialized
    24f4:	88 24       	eor	r8, r8
    24f6:	99 24       	eor	r9, r9
	do
	{
		struct pathStack paths = findPathToNearestFreeNode();  //path to reach the freenode is calculated here. The free_node is calculated by the same
    24f8:	5e 01       	movw	r10, r28
    24fa:	08 94       	sec
    24fc:	a1 1c       	adc	r10, r1
    24fe:	b1 1c       	adc	r11, r1
		cinfo[searchNodetobeExcluded][4] = 0; //set previously blocked search node to UNBLOCKED
    2500:	0f 2e       	mov	r0, r31
    2502:	f5 e5       	ldi	r31, 0x55	; 85
    2504:	4f 2e       	mov	r4, r31
    2506:	f3 e0       	ldi	r31, 0x03	; 3
    2508:	5f 2e       	mov	r5, r31
    250a:	f0 2d       	mov	r31, r0
				break; //break the loop
			}
		}
		
		//now the following code is used to check if the current rescue position is in search path or not 
		int j = 2;
    250c:	22 24       	eor	r2, r2
    250e:	33 24       	eor	r3, r3
    2510:	68 94       	set
    2512:	21 f8       	bld	r2, 1
		for(int i = 0; i < 50; i++) //iterate over search path and compare them with rescue current position
		{
			if(current_pos == searchPath[i]) //if true then increment the j 
    2514:	0f 2e       	mov	r0, r31
    2516:	ff ee       	ldi	r31, 0xEF	; 239
    2518:	ef 2e       	mov	r14, r31
    251a:	f2 e0       	ldi	r31, 0x02	; 2
    251c:	ff 2e       	mov	r15, r31
    251e:	f0 2d       	mov	r31, r0
{
	int freenode;  //the free node computed shall be stored here 
	int i = 0; //counter initialized
	do
	{
		struct pathStack paths = findPathToNearestFreeNode();  //path to reach the freenode is calculated here. The free_node is calculated by the same
    2520:	c5 01       	movw	r24, r10
    2522:	0e 94 61 10 	call	0x20c2	; 0x20c2 <findPathToNearestFreeNode>
		cinfo[searchNodetobeExcluded][4] = 0; //set previously blocked search node to UNBLOCKED
    2526:	80 91 99 07 	lds	r24, 0x0799
    252a:	90 91 9a 07 	lds	r25, 0x079A
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	9c 01       	movw	r18, r24
    2534:	22 0f       	add	r18, r18
    2536:	33 1f       	adc	r19, r19
    2538:	22 0f       	add	r18, r18
    253a:	33 1f       	adc	r19, r19
    253c:	82 0f       	add	r24, r18
    253e:	93 1f       	adc	r25, r19
    2540:	84 0d       	add	r24, r4
    2542:	95 1d       	adc	r25, r5
    2544:	dc 01       	movw	r26, r24
    2546:	19 96       	adiw	r26, 0x09	; 9
    2548:	1c 92       	st	X, r1
    254a:	1e 92       	st	-X, r1
    254c:	18 97       	sbiw	r26, 0x08	; 8
		if(i == 0)  //at the start of the procedure of going to free node wait for 5 seconds until the search bot reaches the next node
    254e:	81 14       	cp	r8, r1
    2550:	91 04       	cpc	r9, r1
    2552:	49 f4       	brne	.+18     	; 0x2566 <goToNearestFreeNode+0xa8>
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	9f ef       	ldi	r25, 0xFF	; 255
    2558:	a0 ee       	ldi	r26, 0xE0	; 224
    255a:	81 50       	subi	r24, 0x01	; 1
    255c:	90 40       	sbci	r25, 0x00	; 0
    255e:	a0 40       	sbci	r26, 0x00	; 0
    2560:	e1 f7       	brne	.-8      	; 0x255a <goToNearestFreeNode+0x9c>
    2562:	00 c0       	rjmp	.+0      	; 0x2564 <goToNearestFreeNode+0xa6>
    2564:	00 00       	nop
			_delay_ms(5000);
		i++;  //counter increment
    2566:	08 94       	sec
    2568:	81 1c       	adc	r8, r1
    256a:	91 1c       	adc	r9, r1
		freenode = paths.path[0];  //in the path stack the destination at 0th position which is be our free node
    256c:	69 80       	ldd	r6, Y+1	; 0x01
    256e:	7a 80       	ldd	r7, Y+2	; 0x02
		for (int i = paths.TOP; i > 0; i--)  //loop iterates along the path
    2570:	c7 53       	subi	r28, 0x37	; 55
    2572:	df 4f       	sbci	r29, 0xFF	; 255
    2574:	28 81       	ld	r18, Y
    2576:	39 81       	ldd	r19, Y+1	; 0x01
    2578:	c9 5c       	subi	r28, 0xC9	; 201
    257a:	d0 40       	sbci	r29, 0x00	; 0
    257c:	12 16       	cp	r1, r18
    257e:	13 06       	cpc	r1, r19
    2580:	0c f0       	brlt	.+2      	; 0x2584 <goToNearestFreeNode+0xc6>
    2582:	59 c0       	rjmp	.+178    	; 0x2636 <goToNearestFreeNode+0x178>
		{
			if(paths.path[i - 1] == searchCurrentPosition)  //if while traveling the next node is the current position of the search bot then the rescue bot must stop traveling to avoid collision
    2584:	c9 01       	movw	r24, r18
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	8a 0d       	add	r24, r10
    258e:	9b 1d       	adc	r25, r11
    2590:	dc 01       	movw	r26, r24
    2592:	6d 91       	ld	r22, X+
    2594:	7c 91       	ld	r23, X
    2596:	11 97       	sbiw	r26, 0x01	; 1
    2598:	80 91 e9 02 	lds	r24, 0x02E9
    259c:	90 91 ea 02 	lds	r25, 0x02EA
    25a0:	68 17       	cp	r22, r24
    25a2:	79 07       	cpc	r23, r25
    25a4:	49 f5       	brne	.+82     	; 0x25f8 <goToNearestFreeNode+0x13a>
    25a6:	0b c0       	rjmp	.+22     	; 0x25be <goToNearestFreeNode+0x100>
    25a8:	f8 01       	movw	r30, r16
    25aa:	72 91       	ld	r23, -Z
    25ac:	62 91       	ld	r22, -Z
    25ae:	8f 01       	movw	r16, r30
    25b0:	80 91 e9 02 	lds	r24, 0x02E9
    25b4:	90 91 ea 02 	lds	r25, 0x02EA
    25b8:	68 17       	cp	r22, r24
    25ba:	79 07       	cpc	r23, r25
    25bc:	29 f5       	brne	.+74     	; 0x2608 <goToNearestFreeNode+0x14a>
			{
				searchNodetobeExcluded = searchCurrentPosition; // the current position of the search bot must now be blocked in the arena
    25be:	80 91 e9 02 	lds	r24, 0x02E9
    25c2:	90 91 ea 02 	lds	r25, 0x02EA
    25c6:	90 93 9a 07 	sts	0x079A, r25
    25ca:	80 93 99 07 	sts	0x0799, r24
				cinfo[searchNodetobeExcluded][4] = 1; 
    25ce:	9c 01       	movw	r18, r24
    25d0:	22 0f       	add	r18, r18
    25d2:	33 1f       	adc	r19, r19
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	82 0f       	add	r24, r18
    25e2:	93 1f       	adc	r25, r19
    25e4:	84 0d       	add	r24, r4
    25e6:	95 1d       	adc	r25, r5
    25e8:	e1 e0       	ldi	r30, 0x01	; 1
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	dc 01       	movw	r26, r24
    25ee:	19 96       	adiw	r26, 0x09	; 9
    25f0:	fc 93       	st	X, r31
    25f2:	ee 93       	st	-X, r30
    25f4:	18 97       	sbiw	r26, 0x08	; 8
				break; //terminate traveling and recalculate a new path
    25f6:	1f c0       	rjmp	.+62     	; 0x2636 <goToNearestFreeNode+0x178>
*
* Example Call: RescueIsAllowedtoGo(52);
*
*/

void goToNearestFreeNode()
    25f8:	c9 01       	movw	r24, r18
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	85 01       	movw	r16, r10
    2602:	08 0f       	add	r16, r24
    2604:	19 1f       	adc	r17, r25
    2606:	65 01       	movw	r12, r10
			{
				searchNodetobeExcluded = searchCurrentPosition; // the current position of the search bot must now be blocked in the arena
				cinfo[searchNodetobeExcluded][4] = 1; 
				break; //terminate traveling and recalculate a new path
			}
			travel(paths.path[i], paths.path[i - 1]);  //travel from current to next position
    2608:	d8 01       	movw	r26, r16
    260a:	12 96       	adiw	r26, 0x02	; 2
    260c:	8d 91       	ld	r24, X+
    260e:	9c 91       	ld	r25, X
    2610:	13 97       	sbiw	r26, 0x03	; 3
    2612:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <travel>
			if(resetPath == 1)  //if reset path flag is set then path needs to be calculated
    2616:	80 91 97 07 	lds	r24, 0x0797
    261a:	90 91 98 07 	lds	r25, 0x0798
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	91 05       	cpc	r25, r1
    2622:	29 f4       	brne	.+10     	; 0x262e <goToNearestFreeNode+0x170>
			{
				resetPath = 0; //reset flag
    2624:	10 92 98 07 	sts	0x0798, r1
    2628:	10 92 97 07 	sts	0x0797, r1
				break; //break the loop
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <goToNearestFreeNode+0x178>
		cinfo[searchNodetobeExcluded][4] = 0; //set previously blocked search node to UNBLOCKED
		if(i == 0)  //at the start of the procedure of going to free node wait for 5 seconds until the search bot reaches the next node
			_delay_ms(5000);
		i++;  //counter increment
		freenode = paths.path[0];  //in the path stack the destination at 0th position which is be our free node
		for (int i = paths.TOP; i > 0; i--)  //loop iterates along the path
    262e:	0c 15       	cp	r16, r12
    2630:	1d 05       	cpc	r17, r13
    2632:	09 f0       	breq	.+2      	; 0x2636 <goToNearestFreeNode+0x178>
    2634:	b9 cf       	rjmp	.-142    	; 0x25a8 <goToNearestFreeNode+0xea>
		
		//now the following code is used to check if the current rescue position is in search path or not 
		int j = 2;
		for(int i = 0; i < 50; i++) //iterate over search path and compare them with rescue current position
		{
			if(current_pos == searchPath[i]) //if true then increment the j 
    2636:	40 91 9d 07 	lds	r20, 0x079D
    263a:	50 91 9e 07 	lds	r21, 0x079E
			}
		}
		
		//now the following code is used to check if the current rescue position is in search path or not 
		int j = 2;
		for(int i = 0; i < 50; i++) //iterate over search path and compare them with rescue current position
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
				break; //break the loop
			}
		}
		
		//now the following code is used to check if the current rescue position is in search path or not 
		int j = 2;
    2642:	b1 01       	movw	r22, r2
		for(int i = 0; i < 50; i++) //iterate over search path and compare them with rescue current position
		{
			if(current_pos == searchPath[i]) //if true then increment the j 
    2644:	c9 01       	movw	r24, r18
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	8e 0d       	add	r24, r14
    264c:	9f 1d       	adc	r25, r15
    264e:	fc 01       	movw	r30, r24
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	84 17       	cp	r24, r20
    2656:	95 07       	cpc	r25, r21
    2658:	11 f4       	brne	.+4      	; 0x265e <goToNearestFreeNode+0x1a0>
				j++;
    265a:	6f 5f       	subi	r22, 0xFF	; 255
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
			}
		}
		
		//now the following code is used to check if the current rescue position is in search path or not 
		int j = 2;
		for(int i = 0; i < 50; i++) //iterate over search path and compare them with rescue current position
    265e:	2f 5f       	subi	r18, 0xFF	; 255
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	22 33       	cpi	r18, 0x32	; 50
    2664:	31 05       	cpc	r19, r1
    2666:	71 f7       	brne	.-36     	; 0x2644 <goToNearestFreeNode+0x186>
		{
			if(current_pos == searchPath[i]) //if true then increment the j 
				j++;
		}
		if(j == 2)  //if the current position is in search path then the value of j will be 2 and it means that rescue has arrived at some free node which is not in search path  
    2668:	62 30       	cpi	r22, 0x02	; 2
    266a:	71 05       	cpc	r23, r1
    266c:	21 f0       	breq	.+8      	; 0x2676 <goToNearestFreeNode+0x1b8>
			break;  //so break the do while loop
	}
	while(current_pos!=freenode);  //loop shall iterate until the current position is equal to the free node
    266e:	64 16       	cp	r6, r20
    2670:	75 06       	cpc	r7, r21
    2672:	09 f0       	breq	.+2      	; 0x2676 <goToNearestFreeNode+0x1b8>
    2674:	55 cf       	rjmp	.-342    	; 0x2520 <goToNearestFreeNode+0x62>
	stop();
    2676:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
}
    267a:	c6 53       	subi	r28, 0x36	; 54
    267c:	df 4f       	sbci	r29, 0xFF	; 255
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	ff 90       	pop	r15
    2692:	ef 90       	pop	r14
    2694:	df 90       	pop	r13
    2696:	cf 90       	pop	r12
    2698:	bf 90       	pop	r11
    269a:	af 90       	pop	r10
    269c:	9f 90       	pop	r9
    269e:	8f 90       	pop	r8
    26a0:	7f 90       	pop	r7
    26a2:	6f 90       	pop	r6
    26a4:	5f 90       	pop	r5
    26a6:	4f 90       	pop	r4
    26a8:	3f 90       	pop	r3
    26aa:	2f 90       	pop	r2
    26ac:	08 95       	ret

000026ae <travelPath>:
*
* Example Call: travelPath(paths);
*
*/
void travelPath(struct pathStack paths)
{
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x01);
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_string("travelPath");
    26c8:	83 e1       	ldi	r24, 0x13	; 19
    26ca:	92 e0       	ldi	r25, 0x02	; 2
    26cc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
	for(int i = paths.TOP; i > 0; i--)  //iterate over the path that has been passed to this function
    26d0:	cc 52       	subi	r28, 0x2C	; 44
    26d2:	df 4f       	sbci	r29, 0xFF	; 255
    26d4:	c8 80       	ld	r12, Y
    26d6:	d9 80       	ldd	r13, Y+1	; 0x01
    26d8:	c4 5d       	subi	r28, 0xD4	; 212
    26da:	d0 40       	sbci	r29, 0x00	; 0
    26dc:	1c 14       	cp	r1, r12
    26de:	1d 04       	cpc	r1, r13
    26e0:	0c f0       	brlt	.+2      	; 0x26e4 <travelPath+0x36>
    26e2:	5c c0       	rjmp	.+184    	; 0x279c <travelPath+0xee>
*         4) and also check the reset path flag if it is one then the path needs to be recalculated so break the current travel path loop
*
* Example Call: travelPath(paths);
*
*/
void travelPath(struct pathStack paths)
    26e4:	76 01       	movw	r14, r12
    26e6:	ee 0c       	add	r14, r14
    26e8:	ff 1c       	adc	r15, r15
    26ea:	8c e0       	ldi	r24, 0x0C	; 12
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	8c 0f       	add	r24, r28
    26f0:	9d 1f       	adc	r25, r29
    26f2:	e8 0e       	add	r14, r24
    26f4:	f9 1e       	adc	r15, r25
{
	lcd_wr_command(0x01);
	lcd_string("travelPath");
	for(int i = paths.TOP; i > 0; i--)  //iterate over the path that has been passed to this function
	{
		if(nodeIsInSearchPath(paths.path[i - 1]))  //check if next node is in search path or not 
    26f6:	f7 01       	movw	r30, r14
    26f8:	12 91       	ld	r17, -Z
    26fa:	02 91       	ld	r16, -Z
    26fc:	7f 01       	movw	r14, r30
    26fe:	c8 01       	movw	r24, r16
    2700:	0e 94 3e 10 	call	0x207c	; 0x207c <nodeIsInSearchPath>
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	11 f1       	breq	.+68     	; 0x274c <travelPath+0x9e>
		{
			stop();  //if the next node is in search path then stop the robot 
    2708:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
			if(nodeIsInSearchPath(current_pos))   //after stopping the robot check current position is in search path or not
    270c:	80 91 9d 07 	lds	r24, 0x079D
    2710:	90 91 9e 07 	lds	r25, 0x079E
    2714:	0e 94 3e 10 	call	0x207c	; 0x207c <nodeIsInSearchPath>
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	09 f4       	brne	.+2      	; 0x271e <travelPath+0x70>
    271c:	3f c0       	rjmp	.+126    	; 0x279c <travelPath+0xee>
			{
				UDR0 = 7;  //tells search robot to stop by sending data packet 7
    271e:	06 ec       	ldi	r16, 0xC6	; 198
    2720:	10 e0       	ldi	r17, 0x00	; 0
    2722:	87 e0       	ldi	r24, 0x07	; 7
    2724:	f8 01       	movw	r30, r16
    2726:	80 83       	st	Z, r24
    2728:	8f ef       	ldi	r24, 0xFF	; 255
    272a:	97 e4       	ldi	r25, 0x47	; 71
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <travelPath+0x7e>
    2730:	00 c0       	rjmp	.+0      	; 0x2732 <travelPath+0x84>
    2732:	00 00       	nop
				_delay_ms(5);  //wait for data to be sent
				goToNearestFreeNode();  //go to the nearest free node so that search can travel from its path
    2734:	0e 94 5f 12 	call	0x24be	; 0x24be <goToNearestFreeNode>
				UDR0 = 8;  //after reaching nearest free node tell search robot to move by sending data packet 8
    2738:	88 e0       	ldi	r24, 0x08	; 8
    273a:	f8 01       	movw	r30, r16
    273c:	80 83       	st	Z, r24
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	97 e4       	ldi	r25, 0x47	; 71
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <travelPath+0x94>
    2746:	00 c0       	rjmp	.+0      	; 0x2748 <travelPath+0x9a>
    2748:	00 00       	nop
    274a:	28 c0       	rjmp	.+80     	; 0x279c <travelPath+0xee>
				_delay_ms(5);//wait for data to be sent
			}
			break;  //if next node is search path then break this travel path loop
		}
		
		travel(paths.path[i], paths.path[i-1]);  //this function will make the bot travel to the next node in path 
    274c:	f7 01       	movw	r30, r14
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	b8 01       	movw	r22, r16
    2754:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <travel>
		
		if(survivorDataReceived == 1)  //check if survivorDtaReceived flag is set to 1 
    2758:	80 91 6e 02 	lds	r24, 0x026E
    275c:	90 91 6f 02 	lds	r25, 0x026F
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	91 05       	cpc	r25, r1
    2764:	31 f4       	brne	.+12     	; 0x2772 <travelPath+0xc4>
		{
			//if it is set to 1 then new survivor data is received
			survivorDataReceived = 0;  
    2766:	10 92 6f 02 	sts	0x026F, r1
    276a:	10 92 6e 02 	sts	0x026E, r1
			addSurvivorInfo();  //  add them in respective structure 
    276e:	0e 94 c6 03 	call	0x78c	; 0x78c <addSurvivorInfo>
		}
		
		if(resetPath == 1)  //if this flag has been set then the bot  must choose an alternative path to reach its destination hence the loop shall be broken here 
    2772:	80 91 97 07 	lds	r24, 0x0797
    2776:	90 91 98 07 	lds	r25, 0x0798
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	91 05       	cpc	r25, r1
    277e:	39 f4       	brne	.+14     	; 0x278e <travelPath+0xe0>
		{
			stop();
    2780:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
			resetPath = 0;  // flag is reset 
    2784:	10 92 98 07 	sts	0x0798, r1
    2788:	10 92 97 07 	sts	0x0797, r1
			break;
    278c:	07 c0       	rjmp	.+14     	; 0x279c <travelPath+0xee>
*/
void travelPath(struct pathStack paths)
{
	lcd_wr_command(0x01);
	lcd_string("travelPath");
	for(int i = paths.TOP; i > 0; i--)  //iterate over the path that has been passed to this function
    278e:	08 94       	sec
    2790:	c1 08       	sbc	r12, r1
    2792:	d1 08       	sbc	r13, r1
    2794:	c1 14       	cp	r12, r1
    2796:	d1 04       	cpc	r13, r1
    2798:	09 f0       	breq	.+2      	; 0x279c <travelPath+0xee>
    279a:	ad cf       	rjmp	.-166    	; 0x26f6 <travelPath+0x48>
			stop();
			resetPath = 0;  // flag is reset 
			break;
		}			
	}
}
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	08 95       	ret

000027ae <fetchSurvivorPlot>:
 *			   to the end of the rescue robot's task.
 * Example Call: fetchSurvivorPlot();
 *
 */
struct plot fetchSurvivorPlot() 
{
    27ae:	4f 92       	push	r4
    27b0:	5f 92       	push	r5
    27b2:	6f 92       	push	r6
    27b4:	7f 92       	push	r7
    27b6:	8f 92       	push	r8
    27b8:	9f 92       	push	r9
    27ba:	af 92       	push	r10
    27bc:	bf 92       	push	r11
    27be:	cf 92       	push	r12
    27c0:	df 92       	push	r13
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	ca 5c       	subi	r28, 0xCA	; 202
    27d4:	d0 40       	sbci	r29, 0x00	; 0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
	lcd_wr_command(0x01);
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_string("fetchSurvivorPlot");
    27e6:	8e e1       	ldi	r24, 0x1E	; 30
    27e8:	92 e0       	ldi	r25, 0x02	; 2
    27ea:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
	struct plot desPlot;   // this shall contain the information of the survivor plot to be serviced (i.e. color and co-ordinate)
	int i = 0, minlength = 999;  
	struct pathStack paths; //path for the rescue bot shall be stored here 
	if(redInfo.count != 0)  //since red survivors are of higher priority the red survivor info structure is checked for the same (0 indicates no red survivors)
    27ee:	80 91 d1 07 	lds	r24, 0x07D1
    27f2:	90 91 d2 07 	lds	r25, 0x07D2
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	91 f1       	breq	.+100    	; 0x285e <fetchSurvivorPlot+0xb0>
    27fa:	0d eb       	ldi	r16, 0xBD	; 189
    27fc:	17 e0       	ldi	r17, 0x07	; 7
 *			 b)The searchComplete flag has been set, which means that the search bot has completed its routine. If yes then the loop will break which shall lead 
 *			   to the end of the rescue robot's task.
 * Example Call: fetchSurvivorPlot();
 *
 */
struct plot fetchSurvivorPlot() 
    27fe:	0f 2e       	mov	r0, r31
    2800:	f4 e1       	ldi	r31, 0x14	; 20
    2802:	cf 2e       	mov	r12, r31
    2804:	dd 24       	eor	r13, r13
    2806:	f0 2d       	mov	r31, r0
    2808:	c0 0e       	add	r12, r16
    280a:	d1 1e       	adc	r13, r17
    280c:	0f 2e       	mov	r0, r31
    280e:	f7 ee       	ldi	r31, 0xE7	; 231
    2810:	af 2e       	mov	r10, r31
    2812:	f3 e0       	ldi	r31, 0x03	; 3
    2814:	bf 2e       	mov	r11, r31
    2816:	f0 2d       	mov	r31, r0
	struct pathStack paths; //path for the rescue bot shall be stored here 
	if(redInfo.count != 0)  //since red survivors are of higher priority the red survivor info structure is checked for the same (0 indicates no red survivors)
	{
		while(i < 10)//counter shall iterate to max size of redInfo
		{
			if(redInfo.plot[i] != 0)  //validity of the content of 'i'th position in the redInfo are checked
    2818:	d8 01       	movw	r26, r16
    281a:	8d 91       	ld	r24, X+
    281c:	9c 91       	ld	r25, X
    281e:	11 97       	sbiw	r26, 0x01	; 1
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	b9 f0       	breq	.+46     	; 0x2852 <fetchSurvivorPlot+0xa4>
			{  
				getAdjacentPlotPoints(redInfo.plot[i]); //The nodes adjacent to the 'i'th survivor plot are stored in global variable pltadjpoints[]
    2824:	0e 94 47 0a 	call	0x148e	; 0x148e <getAdjacentPlotPoints>
				paths = selectMinPathtoDestinationPlot(); //selects the shortest path to reach the 'i'th survivor
    2828:	ce 01       	movw	r24, r28
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    2830:	c7 53       	subi	r28, 0x37	; 55
    2832:	df 4f       	sbci	r29, 0xFF	; 255
    2834:	88 81       	ld	r24, Y
    2836:	99 81       	ldd	r25, Y+1	; 0x01
    2838:	c9 5c       	subi	r28, 0xC9	; 201
    283a:	d0 40       	sbci	r29, 0x00	; 0
				int length = paths.TOP; //length of that path is obtained
				if(length < minlength) //in the following logic the nearest red survivor is found by finding path with minimum length
    283c:	8a 15       	cp	r24, r10
    283e:	9b 05       	cpc	r25, r11
    2840:	44 f4       	brge	.+16     	; 0x2852 <fetchSurvivorPlot+0xa4>
				{ 
					desPlot.pos = redInfo.plot[i]; //if less then the plot position is saved
    2842:	f8 01       	movw	r30, r16
    2844:	80 80       	ld	r8, Z
    2846:	91 80       	ldd	r9, Z+1	; 0x01
					desPlot.color = R;  //color is saved i.e RED
    2848:	60 90 65 02 	lds	r6, 0x0265
    284c:	70 90 66 02 	lds	r7, 0x0266
					minlength = length; 
    2850:	5c 01       	movw	r10, r24
				paths = selectMinPathtoDestinationPlot(); //selects the shortest path to reach the 'i'th survivor
				int length = paths.TOP; //length of that path is obtained
				if(length < minlength) //in the following logic the nearest red survivor is found by finding path with minimum length
				{ 
					desPlot.pos = redInfo.plot[i]; //if less then the plot position is saved
					desPlot.color = R;  //color is saved i.e RED
    2852:	0e 5f       	subi	r16, 0xFE	; 254
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
	struct plot desPlot;   // this shall contain the information of the survivor plot to be serviced (i.e. color and co-ordinate)
	int i = 0, minlength = 999;  
	struct pathStack paths; //path for the rescue bot shall be stored here 
	if(redInfo.count != 0)  //since red survivors are of higher priority the red survivor info structure is checked for the same (0 indicates no red survivors)
	{
		while(i < 10)//counter shall iterate to max size of redInfo
    2856:	0c 15       	cp	r16, r12
    2858:	1d 05       	cpc	r17, r13
    285a:	f1 f6       	brne	.-68     	; 0x2818 <fetchSurvivorPlot+0x6a>
    285c:	bb c0       	rjmp	.+374    	; 0x29d4 <fetchSurvivorPlot+0x226>
				}					
			}
			i++; //counter increment
		}
	}
	else if(greenInfo.count != 0) //the greenInfo structure is checked for any green survivors.(0 indicates no green survivors)
    285e:	80 91 b5 07 	lds	r24, 0x07B5
    2862:	90 91 b6 07 	lds	r25, 0x07B6
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	91 f1       	breq	.+100    	; 0x28ce <fetchSurvivorPlot+0x120>
    286a:	01 ea       	ldi	r16, 0xA1	; 161
    286c:	17 e0       	ldi	r17, 0x07	; 7
 *			 b)The searchComplete flag has been set, which means that the search bot has completed its routine. If yes then the loop will break which shall lead 
 *			   to the end of the rescue robot's task.
 * Example Call: fetchSurvivorPlot();
 *
 */
struct plot fetchSurvivorPlot() 
    286e:	0f 2e       	mov	r0, r31
    2870:	f4 e1       	ldi	r31, 0x14	; 20
    2872:	cf 2e       	mov	r12, r31
    2874:	dd 24       	eor	r13, r13
    2876:	f0 2d       	mov	r31, r0
    2878:	c0 0e       	add	r12, r16
    287a:	d1 1e       	adc	r13, r17
    287c:	0f 2e       	mov	r0, r31
    287e:	f7 ee       	ldi	r31, 0xE7	; 231
    2880:	af 2e       	mov	r10, r31
    2882:	f3 e0       	ldi	r31, 0x03	; 3
    2884:	bf 2e       	mov	r11, r31
    2886:	f0 2d       	mov	r31, r0
	}
	else if(greenInfo.count != 0) //the greenInfo structure is checked for any green survivors.(0 indicates no green survivors)
	{
		while(i < 10)//counter shall iterate to max size of greenInfo
		{
			if(greenInfo.plot[i] != 0)  //validity of the content of 'i'th position in the greenInfo are checked
    2888:	d8 01       	movw	r26, r16
    288a:	8d 91       	ld	r24, X+
    288c:	9c 91       	ld	r25, X
    288e:	11 97       	sbiw	r26, 0x01	; 1
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	b9 f0       	breq	.+46     	; 0x28c2 <fetchSurvivorPlot+0x114>
			{
				getAdjacentPlotPoints(greenInfo.plot[i]);  //The nodes adjacent to the 'i'th survivor plot are stored in global variable pltadjpoints[]
    2894:	0e 94 47 0a 	call	0x148e	; 0x148e <getAdjacentPlotPoints>
				paths = selectMinPathtoDestinationPlot();  //selects the shortest path to reach the 'i'th survivor
    2898:	ce 01       	movw	r24, r28
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    28a0:	c7 53       	subi	r28, 0x37	; 55
    28a2:	df 4f       	sbci	r29, 0xFF	; 255
    28a4:	88 81       	ld	r24, Y
    28a6:	99 81       	ldd	r25, Y+1	; 0x01
    28a8:	c9 5c       	subi	r28, 0xC9	; 201
    28aa:	d0 40       	sbci	r29, 0x00	; 0
				int length = paths.TOP; //length of that path is obtained
				if(length < minlength) //in the following logic the nearest green survivor is found by finding path with minimum length
    28ac:	8a 15       	cp	r24, r10
    28ae:	9b 05       	cpc	r25, r11
    28b0:	44 f4       	brge	.+16     	; 0x28c2 <fetchSurvivorPlot+0x114>
				{
					desPlot.pos = greenInfo.plot[i];  //if less then the plot position is saved
    28b2:	f8 01       	movw	r30, r16
    28b4:	80 80       	ld	r8, Z
    28b6:	91 80       	ldd	r9, Z+1	; 0x01
					desPlot.color = G; //color is saved i.e RED
    28b8:	60 90 63 02 	lds	r6, 0x0263
    28bc:	70 90 64 02 	lds	r7, 0x0264
					minlength = length;
    28c0:	5c 01       	movw	r10, r24
				paths = selectMinPathtoDestinationPlot();  //selects the shortest path to reach the 'i'th survivor
				int length = paths.TOP; //length of that path is obtained
				if(length < minlength) //in the following logic the nearest green survivor is found by finding path with minimum length
				{
					desPlot.pos = greenInfo.plot[i];  //if less then the plot position is saved
					desPlot.color = G; //color is saved i.e RED
    28c2:	0e 5f       	subi	r16, 0xFE	; 254
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
			i++; //counter increment
		}
	}
	else if(greenInfo.count != 0) //the greenInfo structure is checked for any green survivors.(0 indicates no green survivors)
	{
		while(i < 10)//counter shall iterate to max size of greenInfo
    28c6:	0c 15       	cp	r16, r12
    28c8:	1d 05       	cpc	r17, r13
    28ca:	f1 f6       	brne	.-68     	; 0x2888 <fetchSurvivorPlot+0xda>
    28cc:	83 c0       	rjmp	.+262    	; 0x29d4 <fetchSurvivorPlot+0x226>
			i++;   //counter increment
		}
	}
	else //the execution arrives in this section if the rescue robot is currently having no information of survivors 
	{
		allowedtoService = 0;  //rescue is prohibited from servicing
    28ce:	10 92 ba 07 	sts	0x07BA, r1
    28d2:	10 92 b9 07 	sts	0x07B9, r1
		while(survivorDataReceived != 1)  //the rescue must be trapped in this loop indefinitely until any information is received from the search robot or the searchComplete flag is set
		{
			lcd_print(2,12,cinfo[16][4],1);
    28d6:	0d ef       	ldi	r16, 0xFD	; 253
    28d8:	13 e0       	ldi	r17, 0x03	; 3
			if(searchComplete == 1) //since both structures (redInfo and greenInfo) are empty and the searchComplete flag is set, the the bot must finish its execution by first breaking from this loop 
				break;
			lcd_print(2,1,redInfo.count,2);
    28da:	0f 2e       	mov	r0, r31
    28dc:	f1 ed       	ldi	r31, 0xD1	; 209
    28de:	ef 2e       	mov	r14, r31
    28e0:	f7 e0       	ldi	r31, 0x07	; 7
    28e2:	ff 2e       	mov	r15, r31
    28e4:	f0 2d       	mov	r31, r0
			lcd_print(2,4,greenInfo.count,2);
    28e6:	0f 2e       	mov	r0, r31
    28e8:	f5 eb       	ldi	r31, 0xB5	; 181
    28ea:	cf 2e       	mov	r12, r31
    28ec:	f7 e0       	ldi	r31, 0x07	; 7
    28ee:	df 2e       	mov	r13, r31
    28f0:	f0 2d       	mov	r31, r0
			if (nodeIsInSearchPath(current_pos))//as the rescue is stationery when its in this section of the code. It must keep checking if its lying in the search robot's path
			{
				UDR0 = 7; //if the rescue bot is in search bot's path, then it commands the search bot to halt by sending '7' to it and wait until the rescue reaches a place where search bot wont cross is path
    28f2:	0f 2e       	mov	r0, r31
    28f4:	f6 ec       	ldi	r31, 0xC6	; 198
    28f6:	af 2e       	mov	r10, r31
    28f8:	bb 24       	eor	r11, r11
    28fa:	f0 2d       	mov	r31, r0
    28fc:	0f 2e       	mov	r0, r31
    28fe:	f7 e0       	ldi	r31, 0x07	; 7
    2900:	8f 2e       	mov	r8, r31
    2902:	f0 2d       	mov	r31, r0
				_delay_ms(5);
				lcd_wr_command(0x01);
				lcd_string("freenode");
    2904:	0f 2e       	mov	r0, r31
    2906:	f0 e3       	ldi	r31, 0x30	; 48
    2908:	4f 2e       	mov	r4, r31
    290a:	f2 e0       	ldi	r31, 0x02	; 2
    290c:	5f 2e       	mov	r5, r31
    290e:	f0 2d       	mov	r31, r0
				goToNearestFreeNode();//the rescue bot goes to a free location in the graph
				UDR0 = 8; //sending '8' to the search bot signals it to continue its routine as the rescue has moved to a location that does not lie in its path
    2910:	66 24       	eor	r6, r6
    2912:	68 94       	set
    2914:	63 f8       	bld	r6, 3
		}
	}
	else //the execution arrives in this section if the rescue robot is currently having no information of survivors 
	{
		allowedtoService = 0;  //rescue is prohibited from servicing
		while(survivorDataReceived != 1)  //the rescue must be trapped in this loop indefinitely until any information is received from the search robot or the searchComplete flag is set
    2916:	4c c0       	rjmp	.+152    	; 0x29b0 <fetchSurvivorPlot+0x202>
		{
			lcd_print(2,12,cinfo[16][4],1);
    2918:	d8 01       	movw	r26, r16
    291a:	4d 91       	ld	r20, X+
    291c:	5c 91       	ld	r21, X
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	6c e0       	ldi	r22, 0x0C	; 12
    2922:	21 e0       	ldi	r18, 0x01	; 1
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
			if(searchComplete == 1) //since both structures (redInfo and greenInfo) are empty and the searchComplete flag is set, the the bot must finish its execution by first breaking from this loop 
    292a:	80 91 95 07 	lds	r24, 0x0795
    292e:	90 91 96 07 	lds	r25, 0x0796
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	09 f4       	brne	.+2      	; 0x293a <fetchSurvivorPlot+0x18c>
    2938:	43 c0       	rjmp	.+134    	; 0x29c0 <fetchSurvivorPlot+0x212>
				break;
			lcd_print(2,1,redInfo.count,2);
    293a:	f7 01       	movw	r30, r14
    293c:	40 81       	ld	r20, Z
    293e:	51 81       	ldd	r21, Z+1	; 0x01
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	22 e0       	ldi	r18, 0x02	; 2
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
			lcd_print(2,4,greenInfo.count,2);
    294c:	d6 01       	movw	r26, r12
    294e:	4d 91       	ld	r20, X+
    2950:	5c 91       	ld	r21, X
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	64 e0       	ldi	r22, 0x04	; 4
    2956:	22 e0       	ldi	r18, 0x02	; 2
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
			if (nodeIsInSearchPath(current_pos))//as the rescue is stationery when its in this section of the code. It must keep checking if its lying in the search robot's path
    295e:	80 91 9d 07 	lds	r24, 0x079D
    2962:	90 91 9e 07 	lds	r25, 0x079E
    2966:	0e 94 3e 10 	call	0x207c	; 0x207c <nodeIsInSearchPath>
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	09 f1       	breq	.+66     	; 0x29b0 <fetchSurvivorPlot+0x202>
			{
				UDR0 = 7; //if the rescue bot is in search bot's path, then it commands the search bot to halt by sending '7' to it and wait until the rescue reaches a place where search bot wont cross is path
    296e:	f5 01       	movw	r30, r10
    2970:	80 82       	st	Z, r8
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	97 e4       	ldi	r25, 0x47	; 71
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <fetchSurvivorPlot+0x1c8>
    297a:	00 c0       	rjmp	.+0      	; 0x297c <fetchSurvivorPlot+0x1ce>
    297c:	00 00       	nop
				_delay_ms(5);
				lcd_wr_command(0x01);
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
				lcd_string("freenode");
    2984:	c2 01       	movw	r24, r4
    2986:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
				goToNearestFreeNode();//the rescue bot goes to a free location in the graph
    298a:	0e 94 5f 12 	call	0x24be	; 0x24be <goToNearestFreeNode>
				UDR0 = 8; //sending '8' to the search bot signals it to continue its routine as the rescue has moved to a location that does not lie in its path
    298e:	d5 01       	movw	r26, r10
    2990:	6c 92       	st	X, r6
    2992:	ef ef       	ldi	r30, 0xFF	; 255
    2994:	f7 e4       	ldi	r31, 0x47	; 71
    2996:	31 97       	sbiw	r30, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <fetchSurvivorPlot+0x1e8>
    299a:	00 c0       	rjmp	.+0      	; 0x299c <fetchSurvivorPlot+0x1ee>
    299c:	00 00       	nop
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	9f e7       	ldi	r25, 0x7F	; 127
    29a2:	a4 e0       	ldi	r26, 0x04	; 4
    29a4:	81 50       	subi	r24, 0x01	; 1
    29a6:	90 40       	sbci	r25, 0x00	; 0
    29a8:	a0 40       	sbci	r26, 0x00	; 0
    29aa:	e1 f7       	brne	.-8      	; 0x29a4 <fetchSurvivorPlot+0x1f6>
    29ac:	00 c0       	rjmp	.+0      	; 0x29ae <fetchSurvivorPlot+0x200>
    29ae:	00 00       	nop
		}
	}
	else //the execution arrives in this section if the rescue robot is currently having no information of survivors 
	{
		allowedtoService = 0;  //rescue is prohibited from servicing
		while(survivorDataReceived != 1)  //the rescue must be trapped in this loop indefinitely until any information is received from the search robot or the searchComplete flag is set
    29b0:	80 91 6e 02 	lds	r24, 0x026E
    29b4:	90 91 6f 02 	lds	r25, 0x026F
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	91 05       	cpc	r25, r1
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <fetchSurvivorPlot+0x212>
    29be:	ac cf       	rjmp	.-168    	; 0x2918 <fetchSurvivorPlot+0x16a>
				UDR0 = 8; //sending '8' to the search bot signals it to continue its routine as the rescue has moved to a location that does not lie in its path
				_delay_ms(5);
				_delay_ms(100);	
			}
		}
		survivorDataReceived = 0; //survivorDataReceived flag reset to 0
    29c0:	10 92 6f 02 	sts	0x026F, r1
    29c4:	10 92 6e 02 	sts	0x026E, r1
		addSurvivorInfo();  //the newly received information is added to the greenInfo or redInfo structures
    29c8:	0e 94 c6 03 	call	0x78c	; 0x78c <addSurvivorInfo>
		desPlot.pos = 0;  //the destination is set to 0
		desPlot.color = 0; //the color is set to zero just so the main logic may recall this function to get new information
    29cc:	66 24       	eor	r6, r6
    29ce:	77 24       	eor	r7, r7
				_delay_ms(100);	
			}
		}
		survivorDataReceived = 0; //survivorDataReceived flag reset to 0
		addSurvivorInfo();  //the newly received information is added to the greenInfo or redInfo structures
		desPlot.pos = 0;  //the destination is set to 0
    29d0:	88 24       	eor	r8, r8
    29d2:	99 24       	eor	r9, r9
		desPlot.color = 0; //the color is set to zero just so the main logic may recall this function to get new information
	}
	return desPlot;
}
    29d4:	68 2d       	mov	r22, r8
    29d6:	79 2d       	mov	r23, r9
    29d8:	86 2d       	mov	r24, r6
    29da:	97 2d       	mov	r25, r7
    29dc:	c6 53       	subi	r28, 0x36	; 54
    29de:	df 4f       	sbci	r29, 0xFF	; 255
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	ff 90       	pop	r15
    29f4:	ef 90       	pop	r14
    29f6:	df 90       	pop	r13
    29f8:	cf 90       	pop	r12
    29fa:	bf 90       	pop	r11
    29fc:	af 90       	pop	r10
    29fe:	9f 90       	pop	r9
    2a00:	8f 90       	pop	r8
    2a02:	7f 90       	pop	r7
    2a04:	6f 90       	pop	r6
    2a06:	5f 90       	pop	r5
    2a08:	4f 90       	pop	r4
    2a0a:	08 95       	ret

00002a0c <serveRed>:
 * Example Call: serveRed(44);
 *
 */

void serveRed(int plot_pos)
{
    2a0c:	9f 92       	push	r9
    2a0e:	af 92       	push	r10
    2a10:	bf 92       	push	r11
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	ca 5c       	subi	r28, 0xCA	; 202
    2a28:	d0 40       	sbci	r29, 0x00	; 0
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	5c 01       	movw	r10, r24
	stop();
    2a36:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
	lcd_wr_command(0x01);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_string("serveRed");
    2a40:	89 e3       	ldi	r24, 0x39	; 57
    2a42:	92 e0       	ldi	r25, 0x02	; 2
    2a44:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
	getAdjacentPlotPoints(plot_pos); //the legitimate 4 available nodes from where the survivor can be serviced are stored 
    2a48:	c5 01       	movw	r24, r10
    2a4a:	0e 94 47 0a 	call	0x148e	; 0x148e <getAdjacentPlotPoints>
	struct pathStack path = selectMinPathtoDestinationPlot(); //path to one of the 4 nodes(which shall give minimum turns and length)is calculated
    2a4e:	ce 01       	movw	r24, r28
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    2a56:	09 81       	ldd	r16, Y+1	; 0x01
    2a58:	1a 81       	ldd	r17, Y+2	; 0x02
    2a5a:	c7 53       	subi	r28, 0x37	; 55
    2a5c:	df 4f       	sbci	r29, 0xFF	; 255
    2a5e:	48 81       	ld	r20, Y
    2a60:	59 81       	ldd	r21, Y+1	; 0x01
    2a62:	c9 5c       	subi	r28, 0xC9	; 201
    2a64:	d0 40       	sbci	r29, 0x00	; 0
	cinfo[searchNodetobeExcluded][4] = 0; //previously blocked node must be unblocked
    2a66:	80 91 99 07 	lds	r24, 0x0799
    2a6a:	90 91 9a 07 	lds	r25, 0x079A
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	9c 01       	movw	r18, r24
    2a74:	22 0f       	add	r18, r18
    2a76:	33 1f       	adc	r19, r19
    2a78:	22 0f       	add	r18, r18
    2a7a:	33 1f       	adc	r19, r19
    2a7c:	82 0f       	add	r24, r18
    2a7e:	93 1f       	adc	r25, r19
    2a80:	fc 01       	movw	r30, r24
    2a82:	eb 5a       	subi	r30, 0xAB	; 171
    2a84:	fc 4f       	sbci	r31, 0xFC	; 252
    2a86:	11 86       	std	Z+9, r1	; 0x09
    2a88:	10 86       	std	Z+8, r1	; 0x08
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
    2a8a:	41 15       	cp	r20, r1
    2a8c:	51 05       	cpc	r21, r1
    2a8e:	89 f4       	brne	.+34     	; 0x2ab2 <serveRed+0xa6>
		path = selectMinPathtoDestinationPlot(); //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
    2a90:	ce 01       	movw	r24, r28
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    2a98:	09 81       	ldd	r16, Y+1	; 0x01
    2a9a:	1a 81       	ldd	r17, Y+2	; 0x02
    2a9c:	c7 53       	subi	r28, 0x37	; 55
    2a9e:	df 4f       	sbci	r29, 0xFF	; 255
    2aa0:	88 81       	ld	r24, Y
    2aa2:	99 81       	ldd	r25, Y+1	; 0x01
    2aa4:	c9 5c       	subi	r28, 0xC9	; 201
    2aa6:	d0 40       	sbci	r29, 0x00	; 0
	lcd_wr_command(0x01);
	lcd_string("serveRed");
	getAdjacentPlotPoints(plot_pos); //the legitimate 4 available nodes from where the survivor can be serviced are stored 
	struct pathStack path = selectMinPathtoDestinationPlot(); //path to one of the 4 nodes(which shall give minimum turns and length)is calculated
	cinfo[searchNodetobeExcluded][4] = 0; //previously blocked node must be unblocked
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	91 f3       	breq	.-28     	; 0x2a90 <serveRed+0x84>
		path = selectMinPathtoDestinationPlot(); //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
    2aac:	28 2f       	mov	r18, r24
    2aae:	89 2f       	mov	r24, r25
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <serveRed+0xaa>
{
	stop();
	lcd_wr_command(0x01);
	lcd_string("serveRed");
	getAdjacentPlotPoints(plot_pos); //the legitimate 4 available nodes from where the survivor can be serviced are stored 
	struct pathStack path = selectMinPathtoDestinationPlot(); //path to one of the 4 nodes(which shall give minimum turns and length)is calculated
    2ab2:	24 2f       	mov	r18, r20
    2ab4:	85 2f       	mov	r24, r21
	cinfo[searchNodetobeExcluded][4] = 0; //previously blocked node must be unblocked
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
		path = selectMinPathtoDestinationPlot(); //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
	travelPath(path); //the bot follows the chosen path
    2ab6:	1a 83       	std	Y+2, r17	; 0x02
    2ab8:	09 83       	std	Y+1, r16	; 0x01
    2aba:	c7 53       	subi	r28, 0x37	; 55
    2abc:	df 4f       	sbci	r29, 0xFF	; 255
    2abe:	28 83       	st	Y, r18
    2ac0:	c9 5c       	subi	r28, 0xC9	; 201
    2ac2:	d0 40       	sbci	r29, 0x00	; 0
    2ac4:	c6 53       	subi	r28, 0x36	; 54
    2ac6:	df 4f       	sbci	r29, 0xFF	; 255
    2ac8:	88 83       	st	Y, r24
    2aca:	ca 5c       	subi	r28, 0xCA	; 202
    2acc:	d0 40       	sbci	r29, 0x00	; 0
    2ace:	2d b7       	in	r18, 0x3d	; 61
    2ad0:	3e b7       	in	r19, 0x3e	; 62
    2ad2:	2a 5c       	subi	r18, 0xCA	; 202
    2ad4:	30 40       	sbci	r19, 0x00	; 0
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	3e bf       	out	0x3e, r19	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	2d bf       	out	0x3d, r18	; 61
    2ae0:	ad b7       	in	r26, 0x3d	; 61
    2ae2:	be b7       	in	r27, 0x3e	; 62
    2ae4:	11 96       	adiw	r26, 0x01	; 1
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	31 96       	adiw	r30, 0x01	; 1
    2aea:	8a ec       	ldi	r24, 0xCA	; 202
    2aec:	01 90       	ld	r0, Z+
    2aee:	0d 92       	st	X+, r0
    2af0:	81 50       	subi	r24, 0x01	; 1
    2af2:	e1 f7       	brne	.-8      	; 0x2aec <serveRed+0xe0>
    2af4:	0e 94 57 13 	call	0x26ae	; 0x26ae <travelPath>
	while(current_pos != path.path[0]) //the bot shall keep computing path and traveling until the destination is reached
    2af8:	80 91 9d 07 	lds	r24, 0x079D
    2afc:	90 91 9e 07 	lds	r25, 0x079E
    2b00:	ad b7       	in	r26, 0x3d	; 61
    2b02:	be b7       	in	r27, 0x3e	; 62
    2b04:	a6 53       	subi	r26, 0x36	; 54
    2b06:	bf 4f       	sbci	r27, 0xFF	; 255
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	be bf       	out	0x3e, r27	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	ad bf       	out	0x3d, r26	; 61
    2b12:	08 17       	cp	r16, r24
    2b14:	19 07       	cpc	r17, r25
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <serveRed+0x10e>
    2b18:	48 c0       	rjmp	.+144    	; 0x2baa <serveRed+0x19e>
	{
		getAdjacentPlotPoints(plot_pos); 
		path = selectMinPathtoDestinationPlot();
		cinfo[searchNodetobeExcluded][4] = 0;
    2b1a:	0f 2e       	mov	r0, r31
    2b1c:	f5 e5       	ldi	r31, 0x55	; 85
    2b1e:	cf 2e       	mov	r12, r31
    2b20:	f3 e0       	ldi	r31, 0x03	; 3
    2b22:	df 2e       	mov	r13, r31
    2b24:	f0 2d       	mov	r31, r0
		travelPath(path);
    2b26:	0a ec       	ldi	r16, 0xCA	; 202
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
		path = selectMinPathtoDestinationPlot(); //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
	travelPath(path); //the bot follows the chosen path
	while(current_pos != path.path[0]) //the bot shall keep computing path and traveling until the destination is reached
	{
		getAdjacentPlotPoints(plot_pos); 
    2b28:	c5 01       	movw	r24, r10
    2b2a:	0e 94 47 0a 	call	0x148e	; 0x148e <getAdjacentPlotPoints>
		path = selectMinPathtoDestinationPlot();
    2b2e:	ce 01       	movw	r24, r28
    2b30:	01 96       	adiw	r24, 0x01	; 1
    2b32:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    2b36:	e9 80       	ldd	r14, Y+1	; 0x01
    2b38:	fa 80       	ldd	r15, Y+2	; 0x02
		cinfo[searchNodetobeExcluded][4] = 0;
    2b3a:	80 91 99 07 	lds	r24, 0x0799
    2b3e:	90 91 9a 07 	lds	r25, 0x079A
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	9c 01       	movw	r18, r24
    2b48:	22 0f       	add	r18, r18
    2b4a:	33 1f       	adc	r19, r19
    2b4c:	22 0f       	add	r18, r18
    2b4e:	33 1f       	adc	r19, r19
    2b50:	82 0f       	add	r24, r18
    2b52:	93 1f       	adc	r25, r19
    2b54:	f6 01       	movw	r30, r12
    2b56:	e8 0f       	add	r30, r24
    2b58:	f9 1f       	adc	r31, r25
    2b5a:	11 86       	std	Z+9, r1	; 0x09
    2b5c:	10 86       	std	Z+8, r1	; 0x08
		travelPath(path);
    2b5e:	2d b7       	in	r18, 0x3d	; 61
    2b60:	3e b7       	in	r19, 0x3e	; 62
    2b62:	2a 5c       	subi	r18, 0xCA	; 202
    2b64:	30 40       	sbci	r19, 0x00	; 0
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	3e bf       	out	0x3e, r19	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	2d bf       	out	0x3d, r18	; 61
    2b70:	ed b7       	in	r30, 0x3d	; 61
    2b72:	fe b7       	in	r31, 0x3e	; 62
    2b74:	31 96       	adiw	r30, 0x01	; 1
    2b76:	de 01       	movw	r26, r28
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	80 2f       	mov	r24, r16
    2b7c:	0d 90       	ld	r0, X+
    2b7e:	01 92       	st	Z+, r0
    2b80:	81 50       	subi	r24, 0x01	; 1
    2b82:	e1 f7       	brne	.-8      	; 0x2b7c <serveRed+0x170>
    2b84:	0e 94 57 13 	call	0x26ae	; 0x26ae <travelPath>
	struct pathStack path = selectMinPathtoDestinationPlot(); //path to one of the 4 nodes(which shall give minimum turns and length)is calculated
	cinfo[searchNodetobeExcluded][4] = 0; //previously blocked node must be unblocked
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
		path = selectMinPathtoDestinationPlot(); //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
	travelPath(path); //the bot follows the chosen path
	while(current_pos != path.path[0]) //the bot shall keep computing path and traveling until the destination is reached
    2b88:	80 91 9d 07 	lds	r24, 0x079D
    2b8c:	90 91 9e 07 	lds	r25, 0x079E
    2b90:	ad b7       	in	r26, 0x3d	; 61
    2b92:	be b7       	in	r27, 0x3e	; 62
    2b94:	a6 53       	subi	r26, 0x36	; 54
    2b96:	bf 4f       	sbci	r27, 0xFF	; 255
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	be bf       	out	0x3e, r27	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	ad bf       	out	0x3d, r26	; 61
    2ba2:	8e 15       	cp	r24, r14
    2ba4:	9f 05       	cpc	r25, r15
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <serveRed+0x19e>
    2ba8:	bf cf       	rjmp	.-130    	; 0x2b28 <serveRed+0x11c>
	}
	//the difference between a co-ordinate and the one to its north is 10 
	//the difference between a co-ordinate and the one to its south is -10
	//the difference between a co-ordinate and the one to its east is 1
	//the difference between a co-ordinate and the one to its west is -1
	int diff = current_pos-plot_pos;
    2baa:	8c 01       	movw	r16, r24
    2bac:	0a 19       	sub	r16, r10
    2bae:	1b 09       	sbc	r17, r11
	
	if (diff==1&&orientation==point_north||orientation==point_south&&diff==-1||diff==10&&orientation==point_west||orientation==point_east&&diff==-10)//The rescue robot must turn left either of the following is true
    2bb0:	01 30       	cpi	r16, 0x01	; 1
    2bb2:	11 05       	cpc	r17, r1
    2bb4:	59 f4       	brne	.+22     	; 0x2bcc <serveRed+0x1c0>
    2bb6:	20 91 dc 02 	lds	r18, 0x02DC
    2bba:	30 91 dd 02 	lds	r19, 0x02DD
    2bbe:	80 91 9f 07 	lds	r24, 0x079F
    2bc2:	90 91 a0 07 	lds	r25, 0x07A0
    2bc6:	28 17       	cp	r18, r24
    2bc8:	39 07       	cpc	r19, r25
    2bca:	21 f1       	breq	.+72     	; 0x2c14 <serveRed+0x208>
    2bcc:	80 91 dc 02 	lds	r24, 0x02DC
    2bd0:	90 91 dd 02 	lds	r25, 0x02DD
    2bd4:	20 91 69 02 	lds	r18, 0x0269
    2bd8:	30 91 6a 02 	lds	r19, 0x026A
    2bdc:	82 17       	cp	r24, r18
    2bde:	93 07       	cpc	r25, r19
    2be0:	21 f4       	brne	.+8      	; 0x2bea <serveRed+0x1de>
    2be2:	bf ef       	ldi	r27, 0xFF	; 255
    2be4:	0f 3f       	cpi	r16, 0xFF	; 255
    2be6:	1b 07       	cpc	r17, r27
    2be8:	a9 f0       	breq	.+42     	; 0x2c14 <serveRed+0x208>
    2bea:	0a 30       	cpi	r16, 0x0A	; 10
    2bec:	11 05       	cpc	r17, r1
    2bee:	39 f4       	brne	.+14     	; 0x2bfe <serveRed+0x1f2>
    2bf0:	20 91 67 02 	lds	r18, 0x0267
    2bf4:	30 91 68 02 	lds	r19, 0x0268
    2bf8:	82 17       	cp	r24, r18
    2bfa:	93 07       	cpc	r25, r19
    2bfc:	59 f0       	breq	.+22     	; 0x2c14 <serveRed+0x208>
    2bfe:	20 91 6b 02 	lds	r18, 0x026B
    2c02:	30 91 6c 02 	lds	r19, 0x026C
    2c06:	82 17       	cp	r24, r18
    2c08:	93 07       	cpc	r25, r19
    2c0a:	11 f5       	brne	.+68     	; 0x2c50 <serveRed+0x244>
    2c0c:	2f ef       	ldi	r18, 0xFF	; 255
    2c0e:	06 3f       	cpi	r16, 0xF6	; 246
    2c10:	12 07       	cpc	r17, r18
    2c12:	f1 f4       	brne	.+60     	; 0x2c50 <serveRed+0x244>
	{
		left_degrees(90);
    2c14:	8a e5       	ldi	r24, 0x5A	; 90
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 9c 06 	call	0xd38	; 0xd38 <left_degrees>
		orientation = (orientation + 3) % 4; //orientation change equation for anti-clockwise rotation eg. if bot is turning left from west then, the new orientation shall be (3+3)%4 = 2 which is equal to point_south
    2c1c:	80 91 dc 02 	lds	r24, 0x02DC
    2c20:	90 91 dd 02 	lds	r25, 0x02DD
    2c24:	03 96       	adiw	r24, 0x03	; 3
    2c26:	64 e0       	ldi	r22, 0x04	; 4
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    2c2e:	90 93 dd 02 	sts	0x02DD, r25
    2c32:	80 93 dc 02 	sts	0x02DC, r24
		buzzer_on();
    2c36:	0e 94 30 08 	call	0x1060	; 0x1060 <buzzer_on>
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	9f ef       	ldi	r25, 0xFF	; 255
    2c3e:	ac e2       	ldi	r26, 0x2C	; 44
    2c40:	81 50       	subi	r24, 0x01	; 1
    2c42:	90 40       	sbci	r25, 0x00	; 0
    2c44:	a0 40       	sbci	r26, 0x00	; 0
    2c46:	e1 f7       	brne	.-8      	; 0x2c40 <serveRed+0x234>
    2c48:	00 c0       	rjmp	.+0      	; 0x2c4a <serveRed+0x23e>
    2c4a:	00 00       	nop
		_delay_ms(1000); //sound buzzer for 1 second to indicate the red survivor has been picked up
		buzzer_off();
    2c4c:	0e 94 34 08 	call	0x1068	; 0x1068 <buzzer_off>
	}
	if (diff==-1&&orientation==point_north||orientation==point_south&&diff==1||diff==-10&&orientation==point_west||orientation==point_east&&diff==10)//The rescue robot must turn left either of the following is true
    2c50:	9f ef       	ldi	r25, 0xFF	; 255
    2c52:	0f 3f       	cpi	r16, 0xFF	; 255
    2c54:	19 07       	cpc	r17, r25
    2c56:	59 f4       	brne	.+22     	; 0x2c6e <serveRed+0x262>
    2c58:	20 91 dc 02 	lds	r18, 0x02DC
    2c5c:	30 91 dd 02 	lds	r19, 0x02DD
    2c60:	80 91 9f 07 	lds	r24, 0x079F
    2c64:	90 91 a0 07 	lds	r25, 0x07A0
    2c68:	28 17       	cp	r18, r24
    2c6a:	39 07       	cpc	r19, r25
    2c6c:	19 f1       	breq	.+70     	; 0x2cb4 <serveRed+0x2a8>
    2c6e:	80 91 dc 02 	lds	r24, 0x02DC
    2c72:	90 91 dd 02 	lds	r25, 0x02DD
    2c76:	20 91 69 02 	lds	r18, 0x0269
    2c7a:	30 91 6a 02 	lds	r19, 0x026A
    2c7e:	82 17       	cp	r24, r18
    2c80:	93 07       	cpc	r25, r19
    2c82:	19 f4       	brne	.+6      	; 0x2c8a <serveRed+0x27e>
    2c84:	01 30       	cpi	r16, 0x01	; 1
    2c86:	11 05       	cpc	r17, r1
    2c88:	a9 f0       	breq	.+42     	; 0x2cb4 <serveRed+0x2a8>
    2c8a:	af ef       	ldi	r26, 0xFF	; 255
    2c8c:	06 3f       	cpi	r16, 0xF6	; 246
    2c8e:	1a 07       	cpc	r17, r26
    2c90:	39 f4       	brne	.+14     	; 0x2ca0 <serveRed+0x294>
    2c92:	20 91 67 02 	lds	r18, 0x0267
    2c96:	30 91 68 02 	lds	r19, 0x0268
    2c9a:	82 17       	cp	r24, r18
    2c9c:	93 07       	cpc	r25, r19
    2c9e:	51 f0       	breq	.+20     	; 0x2cb4 <serveRed+0x2a8>
    2ca0:	20 91 6b 02 	lds	r18, 0x026B
    2ca4:	30 91 6c 02 	lds	r19, 0x026C
    2ca8:	82 17       	cp	r24, r18
    2caa:	93 07       	cpc	r25, r19
    2cac:	09 f5       	brne	.+66     	; 0x2cf0 <serveRed+0x2e4>
    2cae:	0a 30       	cpi	r16, 0x0A	; 10
    2cb0:	11 05       	cpc	r17, r1
    2cb2:	f1 f4       	brne	.+60     	; 0x2cf0 <serveRed+0x2e4>
	{
		right_degrees(90);
    2cb4:	8a e5       	ldi	r24, 0x5A	; 90
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <right_degrees>
		orientation = (orientation + 1) % 4;  //orientation change equation for anti-clockwise rotation eg. if bot is turning right  from west then, the new orientation shall be (3+1)%4 = 0 which is equal to point_north
    2cbc:	80 91 dc 02 	lds	r24, 0x02DC
    2cc0:	90 91 dd 02 	lds	r25, 0x02DD
    2cc4:	01 96       	adiw	r24, 0x01	; 1
    2cc6:	64 e0       	ldi	r22, 0x04	; 4
    2cc8:	70 e0       	ldi	r23, 0x00	; 0
    2cca:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divmodhi4>
    2cce:	90 93 dd 02 	sts	0x02DD, r25
    2cd2:	80 93 dc 02 	sts	0x02DC, r24
		buzzer_on();
    2cd6:	0e 94 30 08 	call	0x1060	; 0x1060 <buzzer_on>
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	9f ef       	ldi	r25, 0xFF	; 255
    2cde:	ac e2       	ldi	r26, 0x2C	; 44
    2ce0:	81 50       	subi	r24, 0x01	; 1
    2ce2:	90 40       	sbci	r25, 0x00	; 0
    2ce4:	a0 40       	sbci	r26, 0x00	; 0
    2ce6:	e1 f7       	brne	.-8      	; 0x2ce0 <serveRed+0x2d4>
    2ce8:	00 c0       	rjmp	.+0      	; 0x2cea <serveRed+0x2de>
    2cea:	00 00       	nop
		_delay_ms(1000); //sound buzzer for 1 second to indicate the red survivor has been picked up
		buzzer_off();
    2cec:	0e 94 34 08 	call	0x1068	; 0x1068 <buzzer_off>
	}
	
	//The recue bot must now proceed to the mediccal camp which is east of node 59(see arena sample at the ttop of the code)
	while(current_pos != 59) //the bot stays in the loop until 59 bis reached
    2cf0:	60 91 9d 07 	lds	r22, 0x079D
    2cf4:	70 91 9e 07 	lds	r23, 0x079E
    2cf8:	6b 33       	cpi	r22, 0x3B	; 59
    2cfa:	71 05       	cpc	r23, r1
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <serveRed+0x2f4>
    2cfe:	9e c0       	rjmp	.+316    	; 0x2e3c <serveRed+0x430>
	{
		path = findPath(current_pos, 59); //path till the node 59 is found
		cinfo[searchNodetobeExcluded][4] = 0; //previously blocked node of the search robots's position in the arena must be unblocked 
    2d00:	0f 2e       	mov	r0, r31
    2d02:	f5 e5       	ldi	r31, 0x55	; 85
    2d04:	ef 2e       	mov	r14, r31
    2d06:	f3 e0       	ldi	r31, 0x03	; 3
    2d08:	ff 2e       	mov	r15, r31
    2d0a:	f0 2d       	mov	r31, r0
		lcd_print(2,14,path.TOP,2);
		while(path.TOP == 0) //the bot shall stay in this loop until a valid path is returned which shall have a non-zero top i.e. non-zero length
		{
			stop();
			lcd_wr_command(0x01);
			lcd_string("deadlock");
    2d0c:	0f 2e       	mov	r0, r31
    2d0e:	f2 e4       	ldi	r31, 0x42	; 66
    2d10:	cf 2e       	mov	r12, r31
    2d12:	f2 e0       	ldi	r31, 0x02	; 2
    2d14:	df 2e       	mov	r13, r31
    2d16:	f0 2d       	mov	r31, r0
			//_delay_ms(5000);
			path = findPath(current_pos, 59);  //path till the node 59 is found
			cinfo[searchNodetobeExcluded][4] = 0;  //previously blocked node of the search robots's position in the arena must be unblocked
		}
		travelPath(path); //The bot travels the path computed to reach the medical camp
    2d18:	0f 2e       	mov	r0, r31
    2d1a:	fa ec       	ldi	r31, 0xCA	; 202
    2d1c:	9f 2e       	mov	r9, r31
    2d1e:	f0 2d       	mov	r31, r0
	}
	
	//The recue bot must now proceed to the mediccal camp which is east of node 59(see arena sample at the ttop of the code)
	while(current_pos != 59) //the bot stays in the loop until 59 bis reached
	{
		path = findPath(current_pos, 59); //path till the node 59 is found
    2d20:	ce 01       	movw	r24, r28
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	4b e3       	ldi	r20, 0x3B	; 59
    2d26:	50 e0       	ldi	r21, 0x00	; 0
    2d28:	0e 94 c3 0a 	call	0x1586	; 0x1586 <findPath>
    2d2c:	09 81       	ldd	r16, Y+1	; 0x01
    2d2e:	1a 81       	ldd	r17, Y+2	; 0x02
    2d30:	c7 53       	subi	r28, 0x37	; 55
    2d32:	df 4f       	sbci	r29, 0xFF	; 255
    2d34:	a8 80       	ld	r10, Y
    2d36:	b9 80       	ldd	r11, Y+1	; 0x01
    2d38:	c9 5c       	subi	r28, 0xC9	; 201
    2d3a:	d0 40       	sbci	r29, 0x00	; 0
		cinfo[searchNodetobeExcluded][4] = 0; //previously blocked node of the search robots's position in the arena must be unblocked 
    2d3c:	80 91 99 07 	lds	r24, 0x0799
    2d40:	90 91 9a 07 	lds	r25, 0x079A
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	9c 01       	movw	r18, r24
    2d4a:	22 0f       	add	r18, r18
    2d4c:	33 1f       	adc	r19, r19
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	82 0f       	add	r24, r18
    2d54:	93 1f       	adc	r25, r19
    2d56:	f7 01       	movw	r30, r14
    2d58:	e8 0f       	add	r30, r24
    2d5a:	f9 1f       	adc	r31, r25
    2d5c:	11 86       	std	Z+9, r1	; 0x09
    2d5e:	10 86       	std	Z+8, r1	; 0x08
		lcd_print(2,14,path.TOP,2);
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	6e e0       	ldi	r22, 0x0E	; 14
    2d64:	a5 01       	movw	r20, r10
    2d66:	22 e0       	ldi	r18, 0x02	; 2
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
		while(path.TOP == 0) //the bot shall stay in this loop until a valid path is returned which shall have a non-zero top i.e. non-zero length
    2d6e:	a1 14       	cp	r10, r1
    2d70:	b1 04       	cpc	r11, r1
    2d72:	91 f5       	brne	.+100    	; 0x2dd8 <serveRed+0x3cc>
		{
			stop();
    2d74:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
			lcd_wr_command(0x01);
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
			lcd_string("deadlock");
    2d7e:	c6 01       	movw	r24, r12
    2d80:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
			//_delay_ms(5000);
			path = findPath(current_pos, 59);  //path till the node 59 is found
    2d84:	60 91 9d 07 	lds	r22, 0x079D
    2d88:	70 91 9e 07 	lds	r23, 0x079E
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	4b e3       	ldi	r20, 0x3B	; 59
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	0e 94 c3 0a 	call	0x1586	; 0x1586 <findPath>
    2d98:	09 81       	ldd	r16, Y+1	; 0x01
    2d9a:	1a 81       	ldd	r17, Y+2	; 0x02
    2d9c:	c7 53       	subi	r28, 0x37	; 55
    2d9e:	df 4f       	sbci	r29, 0xFF	; 255
    2da0:	48 81       	ld	r20, Y
    2da2:	59 81       	ldd	r21, Y+1	; 0x01
    2da4:	c9 5c       	subi	r28, 0xC9	; 201
    2da6:	d0 40       	sbci	r29, 0x00	; 0
			cinfo[searchNodetobeExcluded][4] = 0;  //previously blocked node of the search robots's position in the arena must be unblocked
    2da8:	80 91 99 07 	lds	r24, 0x0799
    2dac:	90 91 9a 07 	lds	r25, 0x079A
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	9c 01       	movw	r18, r24
    2db6:	22 0f       	add	r18, r18
    2db8:	33 1f       	adc	r19, r19
    2dba:	22 0f       	add	r18, r18
    2dbc:	33 1f       	adc	r19, r19
    2dbe:	82 0f       	add	r24, r18
    2dc0:	93 1f       	adc	r25, r19
    2dc2:	f7 01       	movw	r30, r14
    2dc4:	e8 0f       	add	r30, r24
    2dc6:	f9 1f       	adc	r31, r25
    2dc8:	11 86       	std	Z+9, r1	; 0x09
    2dca:	10 86       	std	Z+8, r1	; 0x08
	while(current_pos != 59) //the bot stays in the loop until 59 bis reached
	{
		path = findPath(current_pos, 59); //path till the node 59 is found
		cinfo[searchNodetobeExcluded][4] = 0; //previously blocked node of the search robots's position in the arena must be unblocked 
		lcd_print(2,14,path.TOP,2);
		while(path.TOP == 0) //the bot shall stay in this loop until a valid path is returned which shall have a non-zero top i.e. non-zero length
    2dcc:	41 15       	cp	r20, r1
    2dce:	51 05       	cpc	r21, r1
    2dd0:	89 f2       	breq	.-94     	; 0x2d74 <serveRed+0x368>
		{
			stop();
			lcd_wr_command(0x01);
			lcd_string("deadlock");
			//_delay_ms(5000);
			path = findPath(current_pos, 59);  //path till the node 59 is found
    2dd2:	94 2f       	mov	r25, r20
    2dd4:	85 2f       	mov	r24, r21
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <serveRed+0x3d0>
	}
	
	//The recue bot must now proceed to the mediccal camp which is east of node 59(see arena sample at the ttop of the code)
	while(current_pos != 59) //the bot stays in the loop until 59 bis reached
	{
		path = findPath(current_pos, 59); //path till the node 59 is found
    2dd8:	9a 2d       	mov	r25, r10
    2dda:	8b 2d       	mov	r24, r11
			lcd_string("deadlock");
			//_delay_ms(5000);
			path = findPath(current_pos, 59);  //path till the node 59 is found
			cinfo[searchNodetobeExcluded][4] = 0;  //previously blocked node of the search robots's position in the arena must be unblocked
		}
		travelPath(path); //The bot travels the path computed to reach the medical camp
    2ddc:	1a 83       	std	Y+2, r17	; 0x02
    2dde:	09 83       	std	Y+1, r16	; 0x01
    2de0:	c7 53       	subi	r28, 0x37	; 55
    2de2:	df 4f       	sbci	r29, 0xFF	; 255
    2de4:	98 83       	st	Y, r25
    2de6:	c9 5c       	subi	r28, 0xC9	; 201
    2de8:	d0 40       	sbci	r29, 0x00	; 0
    2dea:	c6 53       	subi	r28, 0x36	; 54
    2dec:	df 4f       	sbci	r29, 0xFF	; 255
    2dee:	88 83       	st	Y, r24
    2df0:	ca 5c       	subi	r28, 0xCA	; 202
    2df2:	d0 40       	sbci	r29, 0x00	; 0
    2df4:	ad b7       	in	r26, 0x3d	; 61
    2df6:	be b7       	in	r27, 0x3e	; 62
    2df8:	aa 5c       	subi	r26, 0xCA	; 202
    2dfa:	b0 40       	sbci	r27, 0x00	; 0
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	be bf       	out	0x3e, r27	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	ad bf       	out	0x3d, r26	; 61
    2e06:	11 96       	adiw	r26, 0x01	; 1
    2e08:	fe 01       	movw	r30, r28
    2e0a:	31 96       	adiw	r30, 0x01	; 1
    2e0c:	89 2d       	mov	r24, r9
    2e0e:	01 90       	ld	r0, Z+
    2e10:	0d 92       	st	X+, r0
    2e12:	81 50       	subi	r24, 0x01	; 1
    2e14:	e1 f7       	brne	.-8      	; 0x2e0e <serveRed+0x402>
    2e16:	0e 94 57 13 	call	0x26ae	; 0x26ae <travelPath>
		_delay_ms(1000); //sound buzzer for 1 second to indicate the red survivor has been picked up
		buzzer_off();
	}
	
	//The recue bot must now proceed to the mediccal camp which is east of node 59(see arena sample at the ttop of the code)
	while(current_pos != 59) //the bot stays in the loop until 59 bis reached
    2e1a:	60 91 9d 07 	lds	r22, 0x079D
    2e1e:	70 91 9e 07 	lds	r23, 0x079E
    2e22:	2d b7       	in	r18, 0x3d	; 61
    2e24:	3e b7       	in	r19, 0x3e	; 62
    2e26:	26 53       	subi	r18, 0x36	; 54
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	3e bf       	out	0x3e, r19	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	2d bf       	out	0x3d, r18	; 61
    2e34:	6b 33       	cpi	r22, 0x3B	; 59
    2e36:	71 05       	cpc	r23, r1
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <serveRed+0x430>
    2e3a:	72 cf       	rjmp	.-284    	; 0x2d20 <serveRed+0x314>
			path = findPath(current_pos, 59);  //path till the node 59 is found
			cinfo[searchNodetobeExcluded][4] = 0;  //previously blocked node of the search robots's position in the arena must be unblocked
		}
		travelPath(path); //The bot travels the path computed to reach the medical camp
	}
	stop();  //once the node 59 is reached the bot must stop momentarily
    2e3c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
	if(orientation == point_north)  //if at the node 59 the rescue bot is facing north then it must turn right to face the medical camp
    2e40:	80 91 dc 02 	lds	r24, 0x02DC
    2e44:	90 91 dd 02 	lds	r25, 0x02DD
    2e48:	20 91 9f 07 	lds	r18, 0x079F
    2e4c:	30 91 a0 07 	lds	r19, 0x07A0
    2e50:	82 17       	cp	r24, r18
    2e52:	93 07       	cpc	r25, r19
    2e54:	29 f4       	brne	.+10     	; 0x2e60 <serveRed+0x454>
		turn_right(60);
    2e56:	8c e3       	ldi	r24, 0x3C	; 60
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 8d 08 	call	0x111a	; 0x111a <turn_right>
    2e5e:	0b c0       	rjmp	.+22     	; 0x2e76 <serveRed+0x46a>
	else if(orientation == point_south)  //if at the node 59 the rescue bot is facing south then it must turn left to face the medical camp
    2e60:	20 91 69 02 	lds	r18, 0x0269
    2e64:	30 91 6a 02 	lds	r19, 0x026A
    2e68:	82 17       	cp	r24, r18
    2e6a:	93 07       	cpc	r25, r19
    2e6c:	21 f4       	brne	.+8      	; 0x2e76 <serveRed+0x46a>
		turn_left(60);
    2e6e:	8c e3       	ldi	r24, 0x3C	; 60
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <turn_left>
	velocity(255,255);
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	6f ef       	ldi	r22, 0xFF	; 255
    2e7a:	0e 94 1a 08 	call	0x1034	; 0x1034 <velocity>
	forward_mm(200);
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	0e 94 86 06 	call	0xd0c	; 0xd0c <forward_mm>
	current_pos = 0; //current position of the search_bot shall be 0 which indicates it is at the medical camp 
    2e86:	10 92 9e 07 	sts	0x079E, r1
    2e8a:	10 92 9d 07 	sts	0x079D, r1
	UDR0 = 0;
    2e8e:	e6 ec       	ldi	r30, 0xC6	; 198
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	10 82       	st	Z, r1
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	97 e4       	ldi	r25, 0x47	; 71
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <serveRed+0x48c>
    2e9c:	00 c0       	rjmp	.+0      	; 0x2e9e <serveRed+0x492>
    2e9e:	00 00       	nop
	_delay_ms(5);  
	UDR0 = 2;
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
    2ea2:	80 83       	st	Z, r24
    2ea4:	af ef       	ldi	r26, 0xFF	; 255
    2ea6:	b7 e4       	ldi	r27, 0x47	; 71
    2ea8:	11 97       	sbiw	r26, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <serveRed+0x49c>
    2eac:	00 c0       	rjmp	.+0      	; 0x2eae <serveRed+0x4a2>
    2eae:	00 00       	nop
	_delay_ms(5);
	stop();
    2eb0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
	turn_off_led();
    2eb4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <turn_off_led>
	buzzer_on();
    2eb8:	0e 94 30 08 	call	0x1060	; 0x1060 <buzzer_on>
    2ebc:	8f ef       	ldi	r24, 0xFF	; 255
    2ebe:	9f ef       	ldi	r25, 0xFF	; 255
    2ec0:	ac e2       	ldi	r26, 0x2C	; 44
    2ec2:	81 50       	subi	r24, 0x01	; 1
    2ec4:	90 40       	sbci	r25, 0x00	; 0
    2ec6:	a0 40       	sbci	r26, 0x00	; 0
    2ec8:	e1 f7       	brne	.-8      	; 0x2ec2 <serveRed+0x4b6>
    2eca:	00 c0       	rjmp	.+0      	; 0x2ecc <serveRed+0x4c0>
    2ecc:	00 00       	nop
	_delay_ms(1000); //sound buzzer for 1 second to indicate that the survivor has been delivered to medical camp 
	buzzer_off();
    2ece:	0e 94 34 08 	call	0x1068	; 0x1068 <buzzer_off>
	turn_left(160); //the bot takes a U-turn to face the arena which is to its west
    2ed2:	80 ea       	ldi	r24, 0xA0	; 160
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <turn_left>
	orientation = point_west; //orientation after turning is set to west
    2eda:	80 91 67 02 	lds	r24, 0x0267
    2ede:	90 91 68 02 	lds	r25, 0x0268
    2ee2:	90 93 dd 02 	sts	0x02DD, r25
    2ee6:	80 93 dc 02 	sts	0x02DC, r24
}
    2eea:	c6 53       	subi	r28, 0x36	; 54
    2eec:	df 4f       	sbci	r29, 0xFF	; 255
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	ff 90       	pop	r15
    2f02:	ef 90       	pop	r14
    2f04:	df 90       	pop	r13
    2f06:	cf 90       	pop	r12
    2f08:	bf 90       	pop	r11
    2f0a:	af 90       	pop	r10
    2f0c:	9f 90       	pop	r9
    2f0e:	08 95       	ret

00002f10 <serveGreen>:
 *	      3)Once the destination is reached the bot drops a first-aid kit 
 * Example Call: serveGreen(44);
 *
 */
void serveGreen(int plot_pos)
{
    2f10:	af 92       	push	r10
    2f12:	bf 92       	push	r11
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	ca 5c       	subi	r28, 0xCA	; 202
    2f28:	d0 40       	sbci	r29, 0x00	; 0
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	5c 01       	movw	r10, r24
	stop();
    2f36:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
	lcd_wr_command(0x01);
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_string("serveGreen");
    2f40:	8b e4       	ldi	r24, 0x4B	; 75
    2f42:	92 e0       	ldi	r25, 0x02	; 2
    2f44:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
	getAdjacentPlotPoints(plot_pos);  //the legitimate 4 available nodes from where the survivor can be serviced are stored 
    2f48:	c5 01       	movw	r24, r10
    2f4a:	0e 94 47 0a 	call	0x148e	; 0x148e <getAdjacentPlotPoints>
	struct pathStack path = selectMinPathtoDestinationPlot();  //path to one of the 4 nodes(which shall give minimum turns and length)is calculated
    2f4e:	ce 01       	movw	r24, r28
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    2f56:	e9 80       	ldd	r14, Y+1	; 0x01
    2f58:	fa 80       	ldd	r15, Y+2	; 0x02
    2f5a:	c7 53       	subi	r28, 0x37	; 55
    2f5c:	df 4f       	sbci	r29, 0xFF	; 255
    2f5e:	48 81       	ld	r20, Y
    2f60:	59 81       	ldd	r21, Y+1	; 0x01
    2f62:	c9 5c       	subi	r28, 0xC9	; 201
    2f64:	d0 40       	sbci	r29, 0x00	; 0
	cinfo[searchNodetobeExcluded][4] = 0;  //previously blocked node must be unblocked
    2f66:	80 91 99 07 	lds	r24, 0x0799
    2f6a:	90 91 9a 07 	lds	r25, 0x079A
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	9c 01       	movw	r18, r24
    2f74:	22 0f       	add	r18, r18
    2f76:	33 1f       	adc	r19, r19
    2f78:	22 0f       	add	r18, r18
    2f7a:	33 1f       	adc	r19, r19
    2f7c:	82 0f       	add	r24, r18
    2f7e:	93 1f       	adc	r25, r19
    2f80:	fc 01       	movw	r30, r24
    2f82:	eb 5a       	subi	r30, 0xAB	; 171
    2f84:	fc 4f       	sbci	r31, 0xFC	; 252
    2f86:	11 86       	std	Z+9, r1	; 0x09
    2f88:	10 86       	std	Z+8, r1	; 0x08
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
    2f8a:	41 15       	cp	r20, r1
    2f8c:	51 05       	cpc	r21, r1
    2f8e:	79 f4       	brne	.+30     	; 0x2fae <serveGreen+0x9e>
		path = selectMinPathtoDestinationPlot();  //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
    2f90:	ce 01       	movw	r24, r28
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    2f98:	e9 80       	ldd	r14, Y+1	; 0x01
    2f9a:	fa 80       	ldd	r15, Y+2	; 0x02
    2f9c:	c7 53       	subi	r28, 0x37	; 55
    2f9e:	df 4f       	sbci	r29, 0xFF	; 255
    2fa0:	48 81       	ld	r20, Y
    2fa2:	59 81       	ldd	r21, Y+1	; 0x01
    2fa4:	c9 5c       	subi	r28, 0xC9	; 201
    2fa6:	d0 40       	sbci	r29, 0x00	; 0
	lcd_wr_command(0x01);
	lcd_string("serveGreen");
	getAdjacentPlotPoints(plot_pos);  //the legitimate 4 available nodes from where the survivor can be serviced are stored 
	struct pathStack path = selectMinPathtoDestinationPlot();  //path to one of the 4 nodes(which shall give minimum turns and length)is calculated
	cinfo[searchNodetobeExcluded][4] = 0;  //previously blocked node must be unblocked
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
    2fa8:	41 15       	cp	r20, r1
    2faa:	51 05       	cpc	r21, r1
    2fac:	89 f3       	breq	.-30     	; 0x2f90 <serveGreen+0x80>
		path = selectMinPathtoDestinationPlot();  //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
	travelPath(path);  //the bot follows the chosen path
    2fae:	fa 82       	std	Y+2, r15	; 0x02
    2fb0:	e9 82       	std	Y+1, r14	; 0x01
    2fb2:	c7 53       	subi	r28, 0x37	; 55
    2fb4:	df 4f       	sbci	r29, 0xFF	; 255
    2fb6:	59 83       	std	Y+1, r21	; 0x01
    2fb8:	48 83       	st	Y, r20
    2fba:	c9 5c       	subi	r28, 0xC9	; 201
    2fbc:	d0 40       	sbci	r29, 0x00	; 0
    2fbe:	8d b7       	in	r24, 0x3d	; 61
    2fc0:	9e b7       	in	r25, 0x3e	; 62
    2fc2:	8a 5c       	subi	r24, 0xCA	; 202
    2fc4:	90 40       	sbci	r25, 0x00	; 0
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	9e bf       	out	0x3e, r25	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	8d bf       	out	0x3d, r24	; 61
    2fd0:	ad b7       	in	r26, 0x3d	; 61
    2fd2:	be b7       	in	r27, 0x3e	; 62
    2fd4:	11 96       	adiw	r26, 0x01	; 1
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	31 96       	adiw	r30, 0x01	; 1
    2fda:	8a ec       	ldi	r24, 0xCA	; 202
    2fdc:	01 90       	ld	r0, Z+
    2fde:	0d 92       	st	X+, r0
    2fe0:	81 50       	subi	r24, 0x01	; 1
    2fe2:	e1 f7       	brne	.-8      	; 0x2fdc <serveGreen+0xcc>
    2fe4:	0e 94 57 13 	call	0x26ae	; 0x26ae <travelPath>
	while(current_pos != path.path[0])//the bot shall keep computing path and traveling until the destination is reached
    2fe8:	ad b7       	in	r26, 0x3d	; 61
    2fea:	be b7       	in	r27, 0x3e	; 62
    2fec:	a6 53       	subi	r26, 0x36	; 54
    2fee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	be bf       	out	0x3e, r27	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	ad bf       	out	0x3d, r26	; 61
    2ffa:	80 91 9d 07 	lds	r24, 0x079D
    2ffe:	90 91 9e 07 	lds	r25, 0x079E
    3002:	8e 15       	cp	r24, r14
    3004:	9f 05       	cpc	r25, r15
    3006:	09 f4       	brne	.+2      	; 0x300a <serveGreen+0xfa>
    3008:	48 c0       	rjmp	.+144    	; 0x309a <serveGreen+0x18a>
	{
		getAdjacentPlotPoints(plot_pos);
	    path = selectMinPathtoDestinationPlot();
		cinfo[searchNodetobeExcluded][4] = 0;
    300a:	0f 2e       	mov	r0, r31
    300c:	f5 e5       	ldi	r31, 0x55	; 85
    300e:	cf 2e       	mov	r12, r31
    3010:	f3 e0       	ldi	r31, 0x03	; 3
    3012:	df 2e       	mov	r13, r31
    3014:	f0 2d       	mov	r31, r0
		travelPath(path);
    3016:	1a ec       	ldi	r17, 0xCA	; 202
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
		path = selectMinPathtoDestinationPlot();  //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
	travelPath(path);  //the bot follows the chosen path
	while(current_pos != path.path[0])//the bot shall keep computing path and traveling until the destination is reached
	{
		getAdjacentPlotPoints(plot_pos);
    3018:	c5 01       	movw	r24, r10
    301a:	0e 94 47 0a 	call	0x148e	; 0x148e <getAdjacentPlotPoints>
	    path = selectMinPathtoDestinationPlot();
    301e:	ce 01       	movw	r24, r28
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <selectMinPathtoDestinationPlot>
    3026:	e9 80       	ldd	r14, Y+1	; 0x01
    3028:	fa 80       	ldd	r15, Y+2	; 0x02
		cinfo[searchNodetobeExcluded][4] = 0;
    302a:	80 91 99 07 	lds	r24, 0x0799
    302e:	90 91 9a 07 	lds	r25, 0x079A
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	9c 01       	movw	r18, r24
    3038:	22 0f       	add	r18, r18
    303a:	33 1f       	adc	r19, r19
    303c:	22 0f       	add	r18, r18
    303e:	33 1f       	adc	r19, r19
    3040:	82 0f       	add	r24, r18
    3042:	93 1f       	adc	r25, r19
    3044:	f6 01       	movw	r30, r12
    3046:	e8 0f       	add	r30, r24
    3048:	f9 1f       	adc	r31, r25
    304a:	11 86       	std	Z+9, r1	; 0x09
    304c:	10 86       	std	Z+8, r1	; 0x08
		travelPath(path);
    304e:	8d b7       	in	r24, 0x3d	; 61
    3050:	9e b7       	in	r25, 0x3e	; 62
    3052:	8a 5c       	subi	r24, 0xCA	; 202
    3054:	90 40       	sbci	r25, 0x00	; 0
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	9e bf       	out	0x3e, r25	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	8d bf       	out	0x3d, r24	; 61
    3060:	ed b7       	in	r30, 0x3d	; 61
    3062:	fe b7       	in	r31, 0x3e	; 62
    3064:	31 96       	adiw	r30, 0x01	; 1
    3066:	de 01       	movw	r26, r28
    3068:	11 96       	adiw	r26, 0x01	; 1
    306a:	81 2f       	mov	r24, r17
    306c:	0d 90       	ld	r0, X+
    306e:	01 92       	st	Z+, r0
    3070:	81 50       	subi	r24, 0x01	; 1
    3072:	e1 f7       	brne	.-8      	; 0x306c <serveGreen+0x15c>
    3074:	0e 94 57 13 	call	0x26ae	; 0x26ae <travelPath>
	struct pathStack path = selectMinPathtoDestinationPlot();  //path to one of the 4 nodes(which shall give minimum turns and length)is calculated
	cinfo[searchNodetobeExcluded][4] = 0;  //previously blocked node must be unblocked
	while(path.TOP == 0)  //If the path to the red survivor is blocked by search bot's path then, a path with top as 0 is returned
		path = selectMinPathtoDestinationPlot();  //the bot shall keep computing path to reach the survivor until a path with a non-zero top i.e. length is returned
	travelPath(path);  //the bot follows the chosen path
	while(current_pos != path.path[0])//the bot shall keep computing path and traveling until the destination is reached
    3078:	ad b7       	in	r26, 0x3d	; 61
    307a:	be b7       	in	r27, 0x3e	; 62
    307c:	a6 53       	subi	r26, 0x36	; 54
    307e:	bf 4f       	sbci	r27, 0xFF	; 255
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	be bf       	out	0x3e, r27	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	ad bf       	out	0x3d, r26	; 61
    308a:	80 91 9d 07 	lds	r24, 0x079D
    308e:	90 91 9e 07 	lds	r25, 0x079E
    3092:	8e 15       	cp	r24, r14
    3094:	9f 05       	cpc	r25, r15
    3096:	09 f0       	breq	.+2      	; 0x309a <serveGreen+0x18a>
    3098:	bf cf       	rjmp	.-130    	; 0x3018 <serveGreen+0x108>
	    path = selectMinPathtoDestinationPlot();
		cinfo[searchNodetobeExcluded][4] = 0;
		travelPath(path);
	}
	
	stop();
    309a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
	//the difference between a co-ordinate and the one to its north is 10
	//the difference between a co-ordinate and the one to its south is -10
	//the difference between a co-ordinate and the one to its east is 1
	//the difference between a co-ordinate and the one to its west is -1
	int diff = current_pos-plot_pos;
    309e:	e0 90 9d 07 	lds	r14, 0x079D
    30a2:	f0 90 9e 07 	lds	r15, 0x079E
    30a6:	ea 18       	sub	r14, r10
    30a8:	fb 08       	sbc	r15, r11
	
	//Please note that the default orientation of kit-dropping mechanism is the the same as that of the bot which is towards the front. Hence the base servo shall by default be at 90 degrees
	if (diff==1&&orientation==point_north||orientation==point_south&&diff==-1||diff==10&&orientation==point_west||orientation==point_east&&diff==-10) //The rescue robot's kit-dropping mechanism must turn left if either of the conditions  is true
    30aa:	b1 e0       	ldi	r27, 0x01	; 1
    30ac:	eb 16       	cp	r14, r27
    30ae:	f1 04       	cpc	r15, r1
    30b0:	59 f4       	brne	.+22     	; 0x30c8 <serveGreen+0x1b8>
    30b2:	20 91 dc 02 	lds	r18, 0x02DC
    30b6:	30 91 dd 02 	lds	r19, 0x02DD
    30ba:	80 91 9f 07 	lds	r24, 0x079F
    30be:	90 91 a0 07 	lds	r25, 0x07A0
    30c2:	28 17       	cp	r18, r24
    30c4:	39 07       	cpc	r19, r25
    30c6:	39 f1       	breq	.+78     	; 0x3116 <serveGreen+0x206>
    30c8:	80 91 dc 02 	lds	r24, 0x02DC
    30cc:	90 91 dd 02 	lds	r25, 0x02DD
    30d0:	20 91 69 02 	lds	r18, 0x0269
    30d4:	30 91 6a 02 	lds	r19, 0x026A
    30d8:	82 17       	cp	r24, r18
    30da:	93 07       	cpc	r25, r19
    30dc:	29 f4       	brne	.+10     	; 0x30e8 <serveGreen+0x1d8>
    30de:	2f ef       	ldi	r18, 0xFF	; 255
    30e0:	e2 16       	cp	r14, r18
    30e2:	2f ef       	ldi	r18, 0xFF	; 255
    30e4:	f2 06       	cpc	r15, r18
    30e6:	b9 f0       	breq	.+46     	; 0x3116 <serveGreen+0x206>
    30e8:	aa e0       	ldi	r26, 0x0A	; 10
    30ea:	ea 16       	cp	r14, r26
    30ec:	f1 04       	cpc	r15, r1
    30ee:	39 f4       	brne	.+14     	; 0x30fe <serveGreen+0x1ee>
    30f0:	20 91 67 02 	lds	r18, 0x0267
    30f4:	30 91 68 02 	lds	r19, 0x0268
    30f8:	82 17       	cp	r24, r18
    30fa:	93 07       	cpc	r25, r19
    30fc:	61 f0       	breq	.+24     	; 0x3116 <serveGreen+0x206>
    30fe:	20 91 6b 02 	lds	r18, 0x026B
    3102:	30 91 6c 02 	lds	r19, 0x026C
    3106:	82 17       	cp	r24, r18
    3108:	93 07       	cpc	r25, r19
    310a:	49 f4       	brne	.+18     	; 0x311e <serveGreen+0x20e>
    310c:	b6 ef       	ldi	r27, 0xF6	; 246
    310e:	eb 16       	cp	r14, r27
    3110:	bf ef       	ldi	r27, 0xFF	; 255
    3112:	fb 06       	cpc	r15, r27
    3114:	21 f4       	brne	.+8      	; 0x311e <serveGreen+0x20e>
	{
		base_rotate(0);
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e 94 bc 02 	call	0x578	; 0x578 <base_rotate>
	}
	if (diff==-1&&orientation==point_north||orientation==point_south&&diff==1||diff==-10&&orientation==point_west||orientation==point_east&&diff==10) //The rescue robot's kit-dropping mechanism must turn right if either of the conditions  is true
    311e:	2f ef       	ldi	r18, 0xFF	; 255
    3120:	e2 16       	cp	r14, r18
    3122:	2f ef       	ldi	r18, 0xFF	; 255
    3124:	f2 06       	cpc	r15, r18
    3126:	59 f4       	brne	.+22     	; 0x313e <serveGreen+0x22e>
    3128:	20 91 dc 02 	lds	r18, 0x02DC
    312c:	30 91 dd 02 	lds	r19, 0x02DD
    3130:	80 91 9f 07 	lds	r24, 0x079F
    3134:	90 91 a0 07 	lds	r25, 0x07A0
    3138:	28 17       	cp	r18, r24
    313a:	39 07       	cpc	r19, r25
    313c:	31 f1       	breq	.+76     	; 0x318a <serveGreen+0x27a>
    313e:	80 91 dc 02 	lds	r24, 0x02DC
    3142:	90 91 dd 02 	lds	r25, 0x02DD
    3146:	20 91 69 02 	lds	r18, 0x0269
    314a:	30 91 6a 02 	lds	r19, 0x026A
    314e:	82 17       	cp	r24, r18
    3150:	93 07       	cpc	r25, r19
    3152:	21 f4       	brne	.+8      	; 0x315c <serveGreen+0x24c>
    3154:	a1 e0       	ldi	r26, 0x01	; 1
    3156:	ea 16       	cp	r14, r26
    3158:	f1 04       	cpc	r15, r1
    315a:	b9 f0       	breq	.+46     	; 0x318a <serveGreen+0x27a>
    315c:	b6 ef       	ldi	r27, 0xF6	; 246
    315e:	eb 16       	cp	r14, r27
    3160:	bf ef       	ldi	r27, 0xFF	; 255
    3162:	fb 06       	cpc	r15, r27
    3164:	39 f4       	brne	.+14     	; 0x3174 <serveGreen+0x264>
    3166:	20 91 67 02 	lds	r18, 0x0267
    316a:	30 91 68 02 	lds	r19, 0x0268
    316e:	82 17       	cp	r24, r18
    3170:	93 07       	cpc	r25, r19
    3172:	59 f0       	breq	.+22     	; 0x318a <serveGreen+0x27a>
    3174:	20 91 6b 02 	lds	r18, 0x026B
    3178:	30 91 6c 02 	lds	r19, 0x026C
    317c:	82 17       	cp	r24, r18
    317e:	93 07       	cpc	r25, r19
    3180:	41 f4       	brne	.+16     	; 0x3192 <serveGreen+0x282>
    3182:	2a e0       	ldi	r18, 0x0A	; 10
    3184:	e2 16       	cp	r14, r18
    3186:	f1 04       	cpc	r15, r1
    3188:	21 f4       	brne	.+8      	; 0x3192 <serveGreen+0x282>
	{
		base_rotate(180);
    318a:	84 eb       	ldi	r24, 0xB4	; 180
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 bc 02 	call	0x578	; 0x578 <base_rotate>
	}
	
	deposition_rotate(180);
    3192:	84 eb       	ldi	r24, 0xB4	; 180
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	0e 94 f5 02 	call	0x5ea	; 0x5ea <deposition_rotate>
    319a:	8f ef       	ldi	r24, 0xFF	; 255
    319c:	9f e7       	ldi	r25, 0x7F	; 127
    319e:	a4 e0       	ldi	r26, 0x04	; 4
    31a0:	81 50       	subi	r24, 0x01	; 1
    31a2:	90 40       	sbci	r25, 0x00	; 0
    31a4:	a0 40       	sbci	r26, 0x00	; 0
    31a6:	e1 f7       	brne	.-8      	; 0x31a0 <serveGreen+0x290>
    31a8:	00 c0       	rjmp	.+0      	; 0x31aa <serveGreen+0x29a>
    31aa:	00 00       	nop
	_delay_ms(100);
	deposition_rotate(0);
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <deposition_rotate>
	base_rotate(90); //after the first-aid kit is dropped the base servo must turn to 90 degrees again  
    31b4:	8a e5       	ldi	r24, 0x5A	; 90
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 bc 02 	call	0x578	; 0x578 <base_rotate>
	turn_off_led();
    31bc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <turn_off_led>
	buzzer_on();
    31c0:	0e 94 30 08 	call	0x1060	; 0x1060 <buzzer_on>
    31c4:	8f ef       	ldi	r24, 0xFF	; 255
    31c6:	9f ef       	ldi	r25, 0xFF	; 255
    31c8:	ac e2       	ldi	r26, 0x2C	; 44
    31ca:	81 50       	subi	r24, 0x01	; 1
    31cc:	90 40       	sbci	r25, 0x00	; 0
    31ce:	a0 40       	sbci	r26, 0x00	; 0
    31d0:	e1 f7       	brne	.-8      	; 0x31ca <serveGreen+0x2ba>
    31d2:	00 c0       	rjmp	.+0      	; 0x31d4 <serveGreen+0x2c4>
    31d4:	00 00       	nop
	_delay_ms(1000); //sound buzzer for 1 second
	buzzer_off();
    31d6:	0e 94 34 08 	call	0x1068	; 0x1068 <buzzer_off>
	servo_base_free();
    31da:	0e 94 ae 02 	call	0x55c	; 0x55c <servo_base_free>
	servo_deposition_free();
    31de:	0e 94 b5 02 	call	0x56a	; 0x56a <servo_deposition_free>
}
    31e2:	c6 53       	subi	r28, 0x36	; 54
    31e4:	df 4f       	sbci	r29, 0xFF	; 255
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	ff 90       	pop	r15
    31f8:	ef 90       	pop	r14
    31fa:	df 90       	pop	r13
    31fc:	cf 90       	pop	r12
    31fe:	bf 90       	pop	r11
    3200:	af 90       	pop	r10
    3202:	08 95       	ret

00003204 <performMSR>:
		  2)if the color of the survivor is green i.e. des.color == G then serveGreen is called 
 * Example Call: serveGreen(44);
 *
 */
void performMSR(struct plot des)
{
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	8c 01       	movw	r16, r24
    3212:	ed 01       	movw	r28, r26
	lcd_wr_command(0x01);
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_string("performMSR");
    321a:	86 e5       	ldi	r24, 0x56	; 86
    321c:	92 e0       	ldi	r25, 0x02	; 2
    321e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_string>
	while(allowedtoService != 1);  // function waits until allowedtoService flag is set
    3222:	80 91 b9 07 	lds	r24, 0x07B9
    3226:	90 91 ba 07 	lds	r25, 0x07BA
    322a:	81 30       	cpi	r24, 0x01	; 1
    322c:	91 05       	cpc	r25, r1
    322e:	c9 f7       	brne	.-14     	; 0x3222 <performMSR+0x1e>
	if(current_pos == 0) //if the rescue bot is at the medical camp then it must move forward until it senses a node i.e 59
    3230:	80 91 9d 07 	lds	r24, 0x079D
    3234:	90 91 9e 07 	lds	r25, 0x079E
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	11 f4       	brne	.+4      	; 0x3240 <performMSR+0x3c>
		follow();
    323c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <follow>
	
	if(des.color == R) //if survivor is red then serveRed
    3240:	80 91 65 02 	lds	r24, 0x0265
    3244:	90 91 66 02 	lds	r25, 0x0266
    3248:	8c 17       	cp	r24, r28
    324a:	9d 07       	cpc	r25, r29
    324c:	21 f4       	brne	.+8      	; 0x3256 <performMSR+0x52>
		serveRed(des.pos); //the coordinate of the location of the red survivor is passed 
    324e:	c8 01       	movw	r24, r16
    3250:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <serveRed>
    3254:	0a c0       	rjmp	.+20     	; 0x326a <performMSR+0x66>
	else if(des.color == G) //if survivor is red then serveRed
    3256:	80 91 63 02 	lds	r24, 0x0263
    325a:	90 91 64 02 	lds	r25, 0x0264
    325e:	8c 17       	cp	r24, r28
    3260:	9d 07       	cpc	r25, r29
    3262:	19 f4       	brne	.+6      	; 0x326a <performMSR+0x66>
		serveGreen(des.pos); //the coordinate of the location of the green survivor is passed 
    3264:	c8 01       	movw	r24, r16
    3266:	0e 94 88 17 	call	0x2f10	; 0x2f10 <serveGreen>
}
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	08 95       	ret

00003274 <main>:
			 rescue bot has completed its task.
 * Example Call: serveGreen(44);
 *
 */
int main(void)
{
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	00 d0       	rcall	.+0      	; 0x327a <main+0x6>
    327a:	00 d0       	rcall	.+0      	; 0x327c <main+0x8>
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
			}
			else if(destination.color == G)
			{
				for (int i = 0; i < 10; i++)//loop iterates from 0 to max size of the survivors structure i.e 10
				{
					if(greenInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    3280:	e1 ea       	ldi	r30, 0xA1	; 161
    3282:	f7 e0       	ldi	r31, 0x07	; 7
    3284:	ad eb       	ldi	r26, 0xBD	; 189
    3286:	b7 e0       	ldi	r27, 0x07	; 7
			 that the all survivors have been found and the contents of the survivor structure are empty, hence the 
			 rescue bot has completed its task.
 * Example Call: serveGreen(44);
 *
 */
int main(void)
    3288:	cf 01       	movw	r24, r30
    328a:	44 96       	adiw	r24, 0x14	; 20
{
	for(int i = 0; i < 10; i++)  //survivor structures are initialized to empty
		redInfo.plot[i] = greenInfo.plot[i] = 0;
    328c:	11 92       	st	Z+, r1
    328e:	11 92       	st	Z+, r1
    3290:	1d 92       	st	X+, r1
    3292:	1d 92       	st	X+, r1
 * Example Call: serveGreen(44);
 *
 */
int main(void)
{
	for(int i = 0; i < 10; i++)  //survivor structures are initialized to empty
    3294:	e8 17       	cp	r30, r24
    3296:	f9 07       	cpc	r31, r25
    3298:	c9 f7       	brne	.-14     	; 0x328c <main+0x18>
		redInfo.plot[i] = greenInfo.plot[i] = 0;
	redInfo.count = greenInfo.count = 0;
    329a:	10 92 b6 07 	sts	0x07B6, r1
    329e:	10 92 b5 07 	sts	0x07B5, r1
    32a2:	10 92 d2 07 	sts	0x07D2, r1
    32a6:	10 92 d1 07 	sts	0x07D1, r1
	redInfo.plot[1] = 44;
	redInfo.plot[2] = 82;
	redInfo.plot[3] = 88;
	redInfo.count = 4;*/
	
	init_devices();
    32aa:	0e 94 1f 08 	call	0x103e	; 0x103e <init_devices>
	lcd_set_4bit();
    32ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    32b2:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>
	init_cinfo_matrix();
    32b6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <init_cinfo_matrix>
	base_servo(90);
    32ba:	8a e5       	ldi	r24, 0x5A	; 90
    32bc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <base_servo>
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	9f e7       	ldi	r25, 0x7F	; 127
    32c4:	a6 e1       	ldi	r26, 0x16	; 22
    32c6:	81 50       	subi	r24, 0x01	; 1
    32c8:	90 40       	sbci	r25, 0x00	; 0
    32ca:	a0 40       	sbci	r26, 0x00	; 0
    32cc:	e1 f7       	brne	.-8      	; 0x32c6 <main+0x52>
    32ce:	00 c0       	rjmp	.+0      	; 0x32d0 <main+0x5c>
    32d0:	00 00       	nop
	_delay_ms(500);
	deposition_servo(0);
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	0e 94 95 02 	call	0x52a	; 0x52a <deposition_servo>
    32d8:	8f ef       	ldi	r24, 0xFF	; 255
    32da:	9f e7       	ldi	r25, 0x7F	; 127
    32dc:	a6 e1       	ldi	r26, 0x16	; 22
    32de:	81 50       	subi	r24, 0x01	; 1
    32e0:	90 40       	sbci	r25, 0x00	; 0
    32e2:	a0 40       	sbci	r26, 0x00	; 0
    32e4:	e1 f7       	brne	.-8      	; 0x32de <main+0x6a>
    32e6:	00 c0       	rjmp	.+0      	; 0x32e8 <main+0x74>
    32e8:	00 00       	nop
			}
			else if(destination.color == G)
			{
				for (int i = 0; i < 10; i++)//loop iterates from 0 to max size of the survivors structure i.e 10
				{
					if(greenInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    32ea:	0f 2e       	mov	r0, r31
    32ec:	f1 ea       	ldi	r31, 0xA1	; 161
    32ee:	8f 2e       	mov	r8, r31
    32f0:	f7 e0       	ldi	r31, 0x07	; 7
    32f2:	9f 2e       	mov	r9, r31
    32f4:	f0 2d       	mov	r31, r0
					{
						greenInfo.plot[i] = 0;
						greenInfo.count--; //count of greenInfo is decremented as one green survivor is rescued
    32f6:	d4 01       	movw	r26, r8
    32f8:	54 96       	adiw	r26, 0x14	; 20
    32fa:	ba 83       	std	Y+2, r27	; 0x02
    32fc:	a9 83       	std	Y+1, r26	; 0x01
			}
			else if(destination.color == G)
			{
				for (int i = 0; i < 10; i++)//loop iterates from 0 to max size of the survivors structure i.e 10
				{
					if(greenInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    32fe:	44 24       	eor	r4, r4
    3300:	55 24       	eor	r5, r5
					}
				}
			}
			else if(destination.color == G)
			{
				for (int i = 0; i < 10; i++)//loop iterates from 0 to max size of the survivors structure i.e 10
    3302:	22 24       	eor	r2, r2
    3304:	33 24       	eor	r3, r3
    3306:	23 94       	inc	r2
			//after the routine is complete then remove the survivor info from its corresponding structure
			if(destination.color == R) 
			{
				for (int i = 0; i < 10; i++) //loop iterates from 0 to max size of the survivors structure i.e 10
				{
					if(redInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    3308:	0f 2e       	mov	r0, r31
    330a:	fd eb       	ldi	r31, 0xBD	; 189
    330c:	6f 2e       	mov	r6, r31
    330e:	f7 e0       	ldi	r31, 0x07	; 7
    3310:	7f 2e       	mov	r7, r31
    3312:	f0 2d       	mov	r31, r0
					{
						redInfo.plot[i] = 0;
						redInfo.count--; //count of redInfo is decremented as one red survivor is rescued
    3314:	f3 01       	movw	r30, r6
    3316:	74 96       	adiw	r30, 0x14	; 20
    3318:	fc 83       	std	Y+4, r31	; 0x04
    331a:	eb 83       	std	Y+3, r30	; 0x03
	_delay_ms(500);
	deposition_servo(0);
	_delay_ms(500);
	while(1)
	{
		lcd_wr_command(0x01);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
		int tempPosition = current_pos;  
    3322:	80 91 9d 07 	lds	r24, 0x079D
    3326:	90 91 9e 07 	lds	r25, 0x079E
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
		if(tempPosition == 0)  //if the position of the rescue bot is 0 i.e at medical camp then it's reset to 59 since the distance to plot must be computed from the 59
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	31 f4       	brne	.+12     	; 0x333e <main+0xca>
			current_pos = 59;
    3332:	ab e3       	ldi	r26, 0x3B	; 59
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	b0 93 9e 07 	sts	0x079E, r27
    333a:	a0 93 9d 07 	sts	0x079D, r26
		struct plot destination = fetchSurvivorPlot(); //fetch the information of the survivor to be rescued which is closest and fulfills priority criteria(i.e that of red and green survivors)
    333e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <fetchSurvivorPlot>
    3342:	6b 01       	movw	r12, r22
    3344:	7c 01       	movw	r14, r24
    3346:	8b 01       	movw	r16, r22
    3348:	57 01       	movw	r10, r14
		current_pos = tempPosition; //restore the current position to what it was
    334a:	ed 81       	ldd	r30, Y+5	; 0x05
    334c:	fe 81       	ldd	r31, Y+6	; 0x06
    334e:	f0 93 9e 07 	sts	0x079E, r31
    3352:	e0 93 9d 07 	sts	0x079D, r30
		if(destination.pos != 0) //if the survivor info is Valid i.e plot location is equal to some valid plot co-ordinate eg.22,24,64 etc
    3356:	61 15       	cp	r22, r1
    3358:	71 05       	cpc	r23, r1
    335a:	09 f4       	brne	.+2      	; 0x335e <main+0xea>
    335c:	74 c0       	rjmp	.+232    	; 0x3446 <main+0x1d2>
		{
			if (destination.color == R)//glow red LED if survivor is red
    335e:	80 91 65 02 	lds	r24, 0x0265
    3362:	90 91 66 02 	lds	r25, 0x0266
    3366:	8e 15       	cp	r24, r14
    3368:	9f 05       	cpc	r25, r15
    336a:	19 f4       	brne	.+6      	; 0x3372 <main+0xfe>
				red_led();
    336c:	0e 94 44 02 	call	0x488	; 0x488 <red_led>
    3370:	09 c0       	rjmp	.+18     	; 0x3384 <main+0x110>
			else if(destination.color == G)//glow green LEd if survivor is green 
    3372:	80 91 63 02 	lds	r24, 0x0263
    3376:	90 91 64 02 	lds	r25, 0x0264
    337a:	8e 15       	cp	r24, r14
    337c:	9f 05       	cpc	r25, r15
    337e:	11 f4       	brne	.+4      	; 0x3384 <main+0x110>
				green_led();
    3380:	0e 94 4c 02 	call	0x498	; 0x498 <green_led>
			performMSR(destination); //perform the appropriate MSR
    3384:	68 01       	movw	r12, r16
    3386:	75 01       	movw	r14, r10
    3388:	c7 01       	movw	r24, r14
    338a:	b6 01       	movw	r22, r12
    338c:	0e 94 02 19 	call	0x3204	; 0x3204 <performMSR>
			
			//after the routine is complete then remove the survivor info from its corresponding structure
			if(destination.color == R) 
    3390:	80 91 65 02 	lds	r24, 0x0265
    3394:	90 91 66 02 	lds	r25, 0x0266
    3398:	8a 15       	cp	r24, r10
    339a:	9b 05       	cpc	r25, r11
    339c:	39 f5       	brne	.+78     	; 0x33ec <main+0x178>
			{
				for (int i = 0; i < 10; i++) //loop iterates from 0 to max size of the survivors structure i.e 10
				{
					if(redInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    339e:	d3 01       	movw	r26, r6
    33a0:	8d 91       	ld	r24, X+
    33a2:	9c 91       	ld	r25, X
    33a4:	11 97       	sbiw	r26, 0x01	; 1
    33a6:	08 17       	cp	r16, r24
    33a8:	19 07       	cpc	r17, r25
    33aa:	49 f0       	breq	.+18     	; 0x33be <main+0x14a>
    33ac:	ef eb       	ldi	r30, 0xBF	; 191
    33ae:	f7 e0       	ldi	r31, 0x07	; 7
			performMSR(destination); //perform the appropriate MSR
			
			//after the routine is complete then remove the survivor info from its corresponding structure
			if(destination.color == R) 
			{
				for (int i = 0; i < 10; i++) //loop iterates from 0 to max size of the survivors structure i.e 10
    33b0:	c1 01       	movw	r24, r2
				{
					if(redInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    33b2:	21 91       	ld	r18, Z+
    33b4:	31 91       	ld	r19, Z+
    33b6:	20 17       	cp	r18, r16
    33b8:	31 07       	cpc	r19, r17
    33ba:	99 f4       	brne	.+38     	; 0x33e2 <main+0x16e>
    33bc:	01 c0       	rjmp	.+2      	; 0x33c0 <main+0x14c>
    33be:	c2 01       	movw	r24, r4
					{
						redInfo.plot[i] = 0;
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	86 0d       	add	r24, r6
    33c6:	97 1d       	adc	r25, r7
    33c8:	fc 01       	movw	r30, r24
    33ca:	11 82       	std	Z+1, r1	; 0x01
    33cc:	10 82       	st	Z, r1
						redInfo.count--; //count of redInfo is decremented as one red survivor is rescued
    33ce:	ab 81       	ldd	r26, Y+3	; 0x03
    33d0:	bc 81       	ldd	r27, Y+4	; 0x04
    33d2:	8d 91       	ld	r24, X+
    33d4:	9c 91       	ld	r25, X
    33d6:	11 97       	sbiw	r26, 0x01	; 1
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	11 96       	adiw	r26, 0x01	; 1
    33dc:	9c 93       	st	X, r25
    33de:	8e 93       	st	-X, r24
						break;
    33e0:	9d cf       	rjmp	.-198    	; 0x331c <main+0xa8>
			performMSR(destination); //perform the appropriate MSR
			
			//after the routine is complete then remove the survivor info from its corresponding structure
			if(destination.color == R) 
			{
				for (int i = 0; i < 10; i++) //loop iterates from 0 to max size of the survivors structure i.e 10
    33e2:	01 96       	adiw	r24, 0x01	; 1
    33e4:	8a 30       	cpi	r24, 0x0A	; 10
    33e6:	91 05       	cpc	r25, r1
    33e8:	21 f7       	brne	.-56     	; 0x33b2 <main+0x13e>
    33ea:	98 cf       	rjmp	.-208    	; 0x331c <main+0xa8>
						redInfo.count--; //count of redInfo is decremented as one red survivor is rescued
						break;
					}
				}
			}
			else if(destination.color == G)
    33ec:	80 91 63 02 	lds	r24, 0x0263
    33f0:	90 91 64 02 	lds	r25, 0x0264
    33f4:	8a 15       	cp	r24, r10
    33f6:	9b 05       	cpc	r25, r11
    33f8:	09 f0       	breq	.+2      	; 0x33fc <main+0x188>
    33fa:	90 cf       	rjmp	.-224    	; 0x331c <main+0xa8>
			{
				for (int i = 0; i < 10; i++)//loop iterates from 0 to max size of the survivors structure i.e 10
				{
					if(greenInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    33fc:	f4 01       	movw	r30, r8
    33fe:	80 81       	ld	r24, Z
    3400:	91 81       	ldd	r25, Z+1	; 0x01
    3402:	08 17       	cp	r16, r24
    3404:	19 07       	cpc	r17, r25
    3406:	49 f0       	breq	.+18     	; 0x341a <main+0x1a6>
    3408:	e3 ea       	ldi	r30, 0xA3	; 163
    340a:	f7 e0       	ldi	r31, 0x07	; 7
					}
				}
			}
			else if(destination.color == G)
			{
				for (int i = 0; i < 10; i++)//loop iterates from 0 to max size of the survivors structure i.e 10
    340c:	c1 01       	movw	r24, r2
				{
					if(greenInfo.plot[i] == destination.pos) //if the destination plot coordinate is found then it is removed
    340e:	21 91       	ld	r18, Z+
    3410:	31 91       	ld	r19, Z+
    3412:	20 17       	cp	r18, r16
    3414:	31 07       	cpc	r19, r17
    3416:	91 f4       	brne	.+36     	; 0x343c <main+0x1c8>
    3418:	01 c0       	rjmp	.+2      	; 0x341c <main+0x1a8>
    341a:	c2 01       	movw	r24, r4
					{
						greenInfo.plot[i] = 0;
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	88 0d       	add	r24, r8
    3422:	99 1d       	adc	r25, r9
    3424:	dc 01       	movw	r26, r24
    3426:	11 96       	adiw	r26, 0x01	; 1
    3428:	1c 92       	st	X, r1
    342a:	1e 92       	st	-X, r1
						greenInfo.count--; //count of greenInfo is decremented as one green survivor is rescued
    342c:	e9 81       	ldd	r30, Y+1	; 0x01
    342e:	fa 81       	ldd	r31, Y+2	; 0x02
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	80 83       	st	Z, r24
						break;
    343a:	70 cf       	rjmp	.-288    	; 0x331c <main+0xa8>
					}
				}
			}
			else if(destination.color == G)
			{
				for (int i = 0; i < 10; i++)//loop iterates from 0 to max size of the survivors structure i.e 10
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	8a 30       	cpi	r24, 0x0A	; 10
    3440:	91 05       	cpc	r25, r1
    3442:	29 f7       	brne	.-54     	; 0x340e <main+0x19a>
    3444:	6b cf       	rjmp	.-298    	; 0x331c <main+0xa8>
				}
			}
		}			
		else
		{
			if(searchComplete == 1) //If the searchComplete flag has been set and if the survivor structures are empty(the execution is in this 
    3446:	80 91 95 07 	lds	r24, 0x0795
    344a:	90 91 96 07 	lds	r25, 0x0796
    344e:	81 30       	cpi	r24, 0x01	; 1
    3450:	91 05       	cpc	r25, r1
    3452:	09 f0       	breq	.+2      	; 0x3456 <main+0x1e2>
    3454:	63 cf       	rjmp	.-314    	; 0x331c <main+0xa8>
			{                       //section only if the survivor structures are empty), Then there are no more survivors left to be rescued
				stop();
    3456:	0e 94 cd 05 	call	0xb9a	; 0xb9a <stop>
				buzzer_on();
    345a:	0e 94 30 08 	call	0x1060	; 0x1060 <buzzer_on>
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	9f ef       	ldi	r25, 0xFF	; 255
    3462:	a0 ee       	ldi	r26, 0xE0	; 224
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	90 40       	sbci	r25, 0x00	; 0
    3468:	a0 40       	sbci	r26, 0x00	; 0
    346a:	e1 f7       	brne	.-8      	; 0x3464 <main+0x1f0>
    346c:	00 c0       	rjmp	.+0      	; 0x346e <main+0x1fa>
    346e:	00 00       	nop
				_delay_ms(5000); //sound a buzzer for 5 seconds indicating end of routine and the task
				buzzer_off();
    3470:	0e 94 34 08 	call	0x1068	; 0x1068 <buzzer_off>
    3474:	ff cf       	rjmp	.-2      	; 0x3474 <main+0x200>

00003476 <__subsf3>:
    3476:	50 58       	subi	r21, 0x80	; 128

00003478 <__addsf3>:
    3478:	bb 27       	eor	r27, r27
    347a:	aa 27       	eor	r26, r26
    347c:	0e d0       	rcall	.+28     	; 0x349a <__addsf3x>
    347e:	4d c1       	rjmp	.+666    	; 0x371a <__fp_round>
    3480:	3e d1       	rcall	.+636    	; 0x36fe <__fp_pscA>
    3482:	30 f0       	brcs	.+12     	; 0x3490 <__addsf3+0x18>
    3484:	43 d1       	rcall	.+646    	; 0x370c <__fp_pscB>
    3486:	20 f0       	brcs	.+8      	; 0x3490 <__addsf3+0x18>
    3488:	31 f4       	brne	.+12     	; 0x3496 <__addsf3+0x1e>
    348a:	9f 3f       	cpi	r25, 0xFF	; 255
    348c:	11 f4       	brne	.+4      	; 0x3492 <__addsf3+0x1a>
    348e:	1e f4       	brtc	.+6      	; 0x3496 <__addsf3+0x1e>
    3490:	33 c1       	rjmp	.+614    	; 0x36f8 <__fp_nan>
    3492:	0e f4       	brtc	.+2      	; 0x3496 <__addsf3+0x1e>
    3494:	e0 95       	com	r30
    3496:	e7 fb       	bst	r30, 7
    3498:	29 c1       	rjmp	.+594    	; 0x36ec <__fp_inf>

0000349a <__addsf3x>:
    349a:	e9 2f       	mov	r30, r25
    349c:	4f d1       	rcall	.+670    	; 0x373c <__fp_split3>
    349e:	80 f3       	brcs	.-32     	; 0x3480 <__addsf3+0x8>
    34a0:	ba 17       	cp	r27, r26
    34a2:	62 07       	cpc	r22, r18
    34a4:	73 07       	cpc	r23, r19
    34a6:	84 07       	cpc	r24, r20
    34a8:	95 07       	cpc	r25, r21
    34aa:	18 f0       	brcs	.+6      	; 0x34b2 <__addsf3x+0x18>
    34ac:	71 f4       	brne	.+28     	; 0x34ca <__addsf3x+0x30>
    34ae:	9e f5       	brtc	.+102    	; 0x3516 <__addsf3x+0x7c>
    34b0:	67 c1       	rjmp	.+718    	; 0x3780 <__fp_zero>
    34b2:	0e f4       	brtc	.+2      	; 0x34b6 <__addsf3x+0x1c>
    34b4:	e0 95       	com	r30
    34b6:	0b 2e       	mov	r0, r27
    34b8:	ba 2f       	mov	r27, r26
    34ba:	a0 2d       	mov	r26, r0
    34bc:	0b 01       	movw	r0, r22
    34be:	b9 01       	movw	r22, r18
    34c0:	90 01       	movw	r18, r0
    34c2:	0c 01       	movw	r0, r24
    34c4:	ca 01       	movw	r24, r20
    34c6:	a0 01       	movw	r20, r0
    34c8:	11 24       	eor	r1, r1
    34ca:	ff 27       	eor	r31, r31
    34cc:	59 1b       	sub	r21, r25
    34ce:	99 f0       	breq	.+38     	; 0x34f6 <__addsf3x+0x5c>
    34d0:	59 3f       	cpi	r21, 0xF9	; 249
    34d2:	50 f4       	brcc	.+20     	; 0x34e8 <__addsf3x+0x4e>
    34d4:	50 3e       	cpi	r21, 0xE0	; 224
    34d6:	68 f1       	brcs	.+90     	; 0x3532 <__addsf3x+0x98>
    34d8:	1a 16       	cp	r1, r26
    34da:	f0 40       	sbci	r31, 0x00	; 0
    34dc:	a2 2f       	mov	r26, r18
    34de:	23 2f       	mov	r18, r19
    34e0:	34 2f       	mov	r19, r20
    34e2:	44 27       	eor	r20, r20
    34e4:	58 5f       	subi	r21, 0xF8	; 248
    34e6:	f3 cf       	rjmp	.-26     	; 0x34ce <__addsf3x+0x34>
    34e8:	46 95       	lsr	r20
    34ea:	37 95       	ror	r19
    34ec:	27 95       	ror	r18
    34ee:	a7 95       	ror	r26
    34f0:	f0 40       	sbci	r31, 0x00	; 0
    34f2:	53 95       	inc	r21
    34f4:	c9 f7       	brne	.-14     	; 0x34e8 <__addsf3x+0x4e>
    34f6:	7e f4       	brtc	.+30     	; 0x3516 <__addsf3x+0x7c>
    34f8:	1f 16       	cp	r1, r31
    34fa:	ba 0b       	sbc	r27, r26
    34fc:	62 0b       	sbc	r22, r18
    34fe:	73 0b       	sbc	r23, r19
    3500:	84 0b       	sbc	r24, r20
    3502:	ba f0       	brmi	.+46     	; 0x3532 <__addsf3x+0x98>
    3504:	91 50       	subi	r25, 0x01	; 1
    3506:	a1 f0       	breq	.+40     	; 0x3530 <__addsf3x+0x96>
    3508:	ff 0f       	add	r31, r31
    350a:	bb 1f       	adc	r27, r27
    350c:	66 1f       	adc	r22, r22
    350e:	77 1f       	adc	r23, r23
    3510:	88 1f       	adc	r24, r24
    3512:	c2 f7       	brpl	.-16     	; 0x3504 <__addsf3x+0x6a>
    3514:	0e c0       	rjmp	.+28     	; 0x3532 <__addsf3x+0x98>
    3516:	ba 0f       	add	r27, r26
    3518:	62 1f       	adc	r22, r18
    351a:	73 1f       	adc	r23, r19
    351c:	84 1f       	adc	r24, r20
    351e:	48 f4       	brcc	.+18     	; 0x3532 <__addsf3x+0x98>
    3520:	87 95       	ror	r24
    3522:	77 95       	ror	r23
    3524:	67 95       	ror	r22
    3526:	b7 95       	ror	r27
    3528:	f7 95       	ror	r31
    352a:	9e 3f       	cpi	r25, 0xFE	; 254
    352c:	08 f0       	brcs	.+2      	; 0x3530 <__addsf3x+0x96>
    352e:	b3 cf       	rjmp	.-154    	; 0x3496 <__addsf3+0x1e>
    3530:	93 95       	inc	r25
    3532:	88 0f       	add	r24, r24
    3534:	08 f0       	brcs	.+2      	; 0x3538 <__addsf3x+0x9e>
    3536:	99 27       	eor	r25, r25
    3538:	ee 0f       	add	r30, r30
    353a:	97 95       	ror	r25
    353c:	87 95       	ror	r24
    353e:	08 95       	ret

00003540 <__divsf3>:
    3540:	0c d0       	rcall	.+24     	; 0x355a <__divsf3x>
    3542:	eb c0       	rjmp	.+470    	; 0x371a <__fp_round>
    3544:	e3 d0       	rcall	.+454    	; 0x370c <__fp_pscB>
    3546:	40 f0       	brcs	.+16     	; 0x3558 <__divsf3+0x18>
    3548:	da d0       	rcall	.+436    	; 0x36fe <__fp_pscA>
    354a:	30 f0       	brcs	.+12     	; 0x3558 <__divsf3+0x18>
    354c:	21 f4       	brne	.+8      	; 0x3556 <__divsf3+0x16>
    354e:	5f 3f       	cpi	r21, 0xFF	; 255
    3550:	19 f0       	breq	.+6      	; 0x3558 <__divsf3+0x18>
    3552:	cc c0       	rjmp	.+408    	; 0x36ec <__fp_inf>
    3554:	51 11       	cpse	r21, r1
    3556:	15 c1       	rjmp	.+554    	; 0x3782 <__fp_szero>
    3558:	cf c0       	rjmp	.+414    	; 0x36f8 <__fp_nan>

0000355a <__divsf3x>:
    355a:	f0 d0       	rcall	.+480    	; 0x373c <__fp_split3>
    355c:	98 f3       	brcs	.-26     	; 0x3544 <__divsf3+0x4>

0000355e <__divsf3_pse>:
    355e:	99 23       	and	r25, r25
    3560:	c9 f3       	breq	.-14     	; 0x3554 <__divsf3+0x14>
    3562:	55 23       	and	r21, r21
    3564:	b1 f3       	breq	.-20     	; 0x3552 <__divsf3+0x12>
    3566:	95 1b       	sub	r25, r21
    3568:	55 0b       	sbc	r21, r21
    356a:	bb 27       	eor	r27, r27
    356c:	aa 27       	eor	r26, r26
    356e:	62 17       	cp	r22, r18
    3570:	73 07       	cpc	r23, r19
    3572:	84 07       	cpc	r24, r20
    3574:	38 f0       	brcs	.+14     	; 0x3584 <__divsf3_pse+0x26>
    3576:	9f 5f       	subi	r25, 0xFF	; 255
    3578:	5f 4f       	sbci	r21, 0xFF	; 255
    357a:	22 0f       	add	r18, r18
    357c:	33 1f       	adc	r19, r19
    357e:	44 1f       	adc	r20, r20
    3580:	aa 1f       	adc	r26, r26
    3582:	a9 f3       	breq	.-22     	; 0x356e <__divsf3_pse+0x10>
    3584:	33 d0       	rcall	.+102    	; 0x35ec <__divsf3_pse+0x8e>
    3586:	0e 2e       	mov	r0, r30
    3588:	3a f0       	brmi	.+14     	; 0x3598 <__divsf3_pse+0x3a>
    358a:	e0 e8       	ldi	r30, 0x80	; 128
    358c:	30 d0       	rcall	.+96     	; 0x35ee <__divsf3_pse+0x90>
    358e:	91 50       	subi	r25, 0x01	; 1
    3590:	50 40       	sbci	r21, 0x00	; 0
    3592:	e6 95       	lsr	r30
    3594:	00 1c       	adc	r0, r0
    3596:	ca f7       	brpl	.-14     	; 0x358a <__divsf3_pse+0x2c>
    3598:	29 d0       	rcall	.+82     	; 0x35ec <__divsf3_pse+0x8e>
    359a:	fe 2f       	mov	r31, r30
    359c:	27 d0       	rcall	.+78     	; 0x35ec <__divsf3_pse+0x8e>
    359e:	66 0f       	add	r22, r22
    35a0:	77 1f       	adc	r23, r23
    35a2:	88 1f       	adc	r24, r24
    35a4:	bb 1f       	adc	r27, r27
    35a6:	26 17       	cp	r18, r22
    35a8:	37 07       	cpc	r19, r23
    35aa:	48 07       	cpc	r20, r24
    35ac:	ab 07       	cpc	r26, r27
    35ae:	b0 e8       	ldi	r27, 0x80	; 128
    35b0:	09 f0       	breq	.+2      	; 0x35b4 <__divsf3_pse+0x56>
    35b2:	bb 0b       	sbc	r27, r27
    35b4:	80 2d       	mov	r24, r0
    35b6:	bf 01       	movw	r22, r30
    35b8:	ff 27       	eor	r31, r31
    35ba:	93 58       	subi	r25, 0x83	; 131
    35bc:	5f 4f       	sbci	r21, 0xFF	; 255
    35be:	2a f0       	brmi	.+10     	; 0x35ca <__divsf3_pse+0x6c>
    35c0:	9e 3f       	cpi	r25, 0xFE	; 254
    35c2:	51 05       	cpc	r21, r1
    35c4:	68 f0       	brcs	.+26     	; 0x35e0 <__divsf3_pse+0x82>
    35c6:	92 c0       	rjmp	.+292    	; 0x36ec <__fp_inf>
    35c8:	dc c0       	rjmp	.+440    	; 0x3782 <__fp_szero>
    35ca:	5f 3f       	cpi	r21, 0xFF	; 255
    35cc:	ec f3       	brlt	.-6      	; 0x35c8 <__divsf3_pse+0x6a>
    35ce:	98 3e       	cpi	r25, 0xE8	; 232
    35d0:	dc f3       	brlt	.-10     	; 0x35c8 <__divsf3_pse+0x6a>
    35d2:	86 95       	lsr	r24
    35d4:	77 95       	ror	r23
    35d6:	67 95       	ror	r22
    35d8:	b7 95       	ror	r27
    35da:	f7 95       	ror	r31
    35dc:	9f 5f       	subi	r25, 0xFF	; 255
    35de:	c9 f7       	brne	.-14     	; 0x35d2 <__divsf3_pse+0x74>
    35e0:	88 0f       	add	r24, r24
    35e2:	91 1d       	adc	r25, r1
    35e4:	96 95       	lsr	r25
    35e6:	87 95       	ror	r24
    35e8:	97 f9       	bld	r25, 7
    35ea:	08 95       	ret
    35ec:	e1 e0       	ldi	r30, 0x01	; 1
    35ee:	66 0f       	add	r22, r22
    35f0:	77 1f       	adc	r23, r23
    35f2:	88 1f       	adc	r24, r24
    35f4:	bb 1f       	adc	r27, r27
    35f6:	62 17       	cp	r22, r18
    35f8:	73 07       	cpc	r23, r19
    35fa:	84 07       	cpc	r24, r20
    35fc:	ba 07       	cpc	r27, r26
    35fe:	20 f0       	brcs	.+8      	; 0x3608 <__divsf3_pse+0xaa>
    3600:	62 1b       	sub	r22, r18
    3602:	73 0b       	sbc	r23, r19
    3604:	84 0b       	sbc	r24, r20
    3606:	ba 0b       	sbc	r27, r26
    3608:	ee 1f       	adc	r30, r30
    360a:	88 f7       	brcc	.-30     	; 0x35ee <__divsf3_pse+0x90>
    360c:	e0 95       	com	r30
    360e:	08 95       	ret

00003610 <__fixsfsi>:
    3610:	04 d0       	rcall	.+8      	; 0x361a <__fixunssfsi>
    3612:	68 94       	set
    3614:	b1 11       	cpse	r27, r1
    3616:	b5 c0       	rjmp	.+362    	; 0x3782 <__fp_szero>
    3618:	08 95       	ret

0000361a <__fixunssfsi>:
    361a:	98 d0       	rcall	.+304    	; 0x374c <__fp_splitA>
    361c:	88 f0       	brcs	.+34     	; 0x3640 <__fixunssfsi+0x26>
    361e:	9f 57       	subi	r25, 0x7F	; 127
    3620:	90 f0       	brcs	.+36     	; 0x3646 <__fixunssfsi+0x2c>
    3622:	b9 2f       	mov	r27, r25
    3624:	99 27       	eor	r25, r25
    3626:	b7 51       	subi	r27, 0x17	; 23
    3628:	a0 f0       	brcs	.+40     	; 0x3652 <__fixunssfsi+0x38>
    362a:	d1 f0       	breq	.+52     	; 0x3660 <__fixunssfsi+0x46>
    362c:	66 0f       	add	r22, r22
    362e:	77 1f       	adc	r23, r23
    3630:	88 1f       	adc	r24, r24
    3632:	99 1f       	adc	r25, r25
    3634:	1a f0       	brmi	.+6      	; 0x363c <__fixunssfsi+0x22>
    3636:	ba 95       	dec	r27
    3638:	c9 f7       	brne	.-14     	; 0x362c <__fixunssfsi+0x12>
    363a:	12 c0       	rjmp	.+36     	; 0x3660 <__fixunssfsi+0x46>
    363c:	b1 30       	cpi	r27, 0x01	; 1
    363e:	81 f0       	breq	.+32     	; 0x3660 <__fixunssfsi+0x46>
    3640:	9f d0       	rcall	.+318    	; 0x3780 <__fp_zero>
    3642:	b1 e0       	ldi	r27, 0x01	; 1
    3644:	08 95       	ret
    3646:	9c c0       	rjmp	.+312    	; 0x3780 <__fp_zero>
    3648:	67 2f       	mov	r22, r23
    364a:	78 2f       	mov	r23, r24
    364c:	88 27       	eor	r24, r24
    364e:	b8 5f       	subi	r27, 0xF8	; 248
    3650:	39 f0       	breq	.+14     	; 0x3660 <__fixunssfsi+0x46>
    3652:	b9 3f       	cpi	r27, 0xF9	; 249
    3654:	cc f3       	brlt	.-14     	; 0x3648 <__fixunssfsi+0x2e>
    3656:	86 95       	lsr	r24
    3658:	77 95       	ror	r23
    365a:	67 95       	ror	r22
    365c:	b3 95       	inc	r27
    365e:	d9 f7       	brne	.-10     	; 0x3656 <__fixunssfsi+0x3c>
    3660:	3e f4       	brtc	.+14     	; 0x3670 <__fixunssfsi+0x56>
    3662:	90 95       	com	r25
    3664:	80 95       	com	r24
    3666:	70 95       	com	r23
    3668:	61 95       	neg	r22
    366a:	7f 4f       	sbci	r23, 0xFF	; 255
    366c:	8f 4f       	sbci	r24, 0xFF	; 255
    366e:	9f 4f       	sbci	r25, 0xFF	; 255
    3670:	08 95       	ret

00003672 <__floatunsisf>:
    3672:	e8 94       	clt
    3674:	09 c0       	rjmp	.+18     	; 0x3688 <__floatsisf+0x12>

00003676 <__floatsisf>:
    3676:	97 fb       	bst	r25, 7
    3678:	3e f4       	brtc	.+14     	; 0x3688 <__floatsisf+0x12>
    367a:	90 95       	com	r25
    367c:	80 95       	com	r24
    367e:	70 95       	com	r23
    3680:	61 95       	neg	r22
    3682:	7f 4f       	sbci	r23, 0xFF	; 255
    3684:	8f 4f       	sbci	r24, 0xFF	; 255
    3686:	9f 4f       	sbci	r25, 0xFF	; 255
    3688:	99 23       	and	r25, r25
    368a:	a9 f0       	breq	.+42     	; 0x36b6 <__floatsisf+0x40>
    368c:	f9 2f       	mov	r31, r25
    368e:	96 e9       	ldi	r25, 0x96	; 150
    3690:	bb 27       	eor	r27, r27
    3692:	93 95       	inc	r25
    3694:	f6 95       	lsr	r31
    3696:	87 95       	ror	r24
    3698:	77 95       	ror	r23
    369a:	67 95       	ror	r22
    369c:	b7 95       	ror	r27
    369e:	f1 11       	cpse	r31, r1
    36a0:	f8 cf       	rjmp	.-16     	; 0x3692 <__floatsisf+0x1c>
    36a2:	fa f4       	brpl	.+62     	; 0x36e2 <__floatsisf+0x6c>
    36a4:	bb 0f       	add	r27, r27
    36a6:	11 f4       	brne	.+4      	; 0x36ac <__floatsisf+0x36>
    36a8:	60 ff       	sbrs	r22, 0
    36aa:	1b c0       	rjmp	.+54     	; 0x36e2 <__floatsisf+0x6c>
    36ac:	6f 5f       	subi	r22, 0xFF	; 255
    36ae:	7f 4f       	sbci	r23, 0xFF	; 255
    36b0:	8f 4f       	sbci	r24, 0xFF	; 255
    36b2:	9f 4f       	sbci	r25, 0xFF	; 255
    36b4:	16 c0       	rjmp	.+44     	; 0x36e2 <__floatsisf+0x6c>
    36b6:	88 23       	and	r24, r24
    36b8:	11 f0       	breq	.+4      	; 0x36be <__floatsisf+0x48>
    36ba:	96 e9       	ldi	r25, 0x96	; 150
    36bc:	11 c0       	rjmp	.+34     	; 0x36e0 <__floatsisf+0x6a>
    36be:	77 23       	and	r23, r23
    36c0:	21 f0       	breq	.+8      	; 0x36ca <__floatsisf+0x54>
    36c2:	9e e8       	ldi	r25, 0x8E	; 142
    36c4:	87 2f       	mov	r24, r23
    36c6:	76 2f       	mov	r23, r22
    36c8:	05 c0       	rjmp	.+10     	; 0x36d4 <__floatsisf+0x5e>
    36ca:	66 23       	and	r22, r22
    36cc:	71 f0       	breq	.+28     	; 0x36ea <__floatsisf+0x74>
    36ce:	96 e8       	ldi	r25, 0x86	; 134
    36d0:	86 2f       	mov	r24, r22
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	2a f0       	brmi	.+10     	; 0x36e2 <__floatsisf+0x6c>
    36d8:	9a 95       	dec	r25
    36da:	66 0f       	add	r22, r22
    36dc:	77 1f       	adc	r23, r23
    36de:	88 1f       	adc	r24, r24
    36e0:	da f7       	brpl	.-10     	; 0x36d8 <__floatsisf+0x62>
    36e2:	88 0f       	add	r24, r24
    36e4:	96 95       	lsr	r25
    36e6:	87 95       	ror	r24
    36e8:	97 f9       	bld	r25, 7
    36ea:	08 95       	ret

000036ec <__fp_inf>:
    36ec:	97 f9       	bld	r25, 7
    36ee:	9f 67       	ori	r25, 0x7F	; 127
    36f0:	80 e8       	ldi	r24, 0x80	; 128
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	08 95       	ret

000036f8 <__fp_nan>:
    36f8:	9f ef       	ldi	r25, 0xFF	; 255
    36fa:	80 ec       	ldi	r24, 0xC0	; 192
    36fc:	08 95       	ret

000036fe <__fp_pscA>:
    36fe:	00 24       	eor	r0, r0
    3700:	0a 94       	dec	r0
    3702:	16 16       	cp	r1, r22
    3704:	17 06       	cpc	r1, r23
    3706:	18 06       	cpc	r1, r24
    3708:	09 06       	cpc	r0, r25
    370a:	08 95       	ret

0000370c <__fp_pscB>:
    370c:	00 24       	eor	r0, r0
    370e:	0a 94       	dec	r0
    3710:	12 16       	cp	r1, r18
    3712:	13 06       	cpc	r1, r19
    3714:	14 06       	cpc	r1, r20
    3716:	05 06       	cpc	r0, r21
    3718:	08 95       	ret

0000371a <__fp_round>:
    371a:	09 2e       	mov	r0, r25
    371c:	03 94       	inc	r0
    371e:	00 0c       	add	r0, r0
    3720:	11 f4       	brne	.+4      	; 0x3726 <__fp_round+0xc>
    3722:	88 23       	and	r24, r24
    3724:	52 f0       	brmi	.+20     	; 0x373a <__fp_round+0x20>
    3726:	bb 0f       	add	r27, r27
    3728:	40 f4       	brcc	.+16     	; 0x373a <__fp_round+0x20>
    372a:	bf 2b       	or	r27, r31
    372c:	11 f4       	brne	.+4      	; 0x3732 <__fp_round+0x18>
    372e:	60 ff       	sbrs	r22, 0
    3730:	04 c0       	rjmp	.+8      	; 0x373a <__fp_round+0x20>
    3732:	6f 5f       	subi	r22, 0xFF	; 255
    3734:	7f 4f       	sbci	r23, 0xFF	; 255
    3736:	8f 4f       	sbci	r24, 0xFF	; 255
    3738:	9f 4f       	sbci	r25, 0xFF	; 255
    373a:	08 95       	ret

0000373c <__fp_split3>:
    373c:	57 fd       	sbrc	r21, 7
    373e:	90 58       	subi	r25, 0x80	; 128
    3740:	44 0f       	add	r20, r20
    3742:	55 1f       	adc	r21, r21
    3744:	59 f0       	breq	.+22     	; 0x375c <__fp_splitA+0x10>
    3746:	5f 3f       	cpi	r21, 0xFF	; 255
    3748:	71 f0       	breq	.+28     	; 0x3766 <__fp_splitA+0x1a>
    374a:	47 95       	ror	r20

0000374c <__fp_splitA>:
    374c:	88 0f       	add	r24, r24
    374e:	97 fb       	bst	r25, 7
    3750:	99 1f       	adc	r25, r25
    3752:	61 f0       	breq	.+24     	; 0x376c <__fp_splitA+0x20>
    3754:	9f 3f       	cpi	r25, 0xFF	; 255
    3756:	79 f0       	breq	.+30     	; 0x3776 <__fp_splitA+0x2a>
    3758:	87 95       	ror	r24
    375a:	08 95       	ret
    375c:	12 16       	cp	r1, r18
    375e:	13 06       	cpc	r1, r19
    3760:	14 06       	cpc	r1, r20
    3762:	55 1f       	adc	r21, r21
    3764:	f2 cf       	rjmp	.-28     	; 0x374a <__fp_split3+0xe>
    3766:	46 95       	lsr	r20
    3768:	f1 df       	rcall	.-30     	; 0x374c <__fp_splitA>
    376a:	08 c0       	rjmp	.+16     	; 0x377c <__fp_splitA+0x30>
    376c:	16 16       	cp	r1, r22
    376e:	17 06       	cpc	r1, r23
    3770:	18 06       	cpc	r1, r24
    3772:	99 1f       	adc	r25, r25
    3774:	f1 cf       	rjmp	.-30     	; 0x3758 <__fp_splitA+0xc>
    3776:	86 95       	lsr	r24
    3778:	71 05       	cpc	r23, r1
    377a:	61 05       	cpc	r22, r1
    377c:	08 94       	sec
    377e:	08 95       	ret

00003780 <__fp_zero>:
    3780:	e8 94       	clt

00003782 <__fp_szero>:
    3782:	bb 27       	eor	r27, r27
    3784:	66 27       	eor	r22, r22
    3786:	77 27       	eor	r23, r23
    3788:	cb 01       	movw	r24, r22
    378a:	97 f9       	bld	r25, 7
    378c:	08 95       	ret

0000378e <__mulsf3>:
    378e:	0b d0       	rcall	.+22     	; 0x37a6 <__mulsf3x>
    3790:	c4 cf       	rjmp	.-120    	; 0x371a <__fp_round>
    3792:	b5 df       	rcall	.-150    	; 0x36fe <__fp_pscA>
    3794:	28 f0       	brcs	.+10     	; 0x37a0 <__mulsf3+0x12>
    3796:	ba df       	rcall	.-140    	; 0x370c <__fp_pscB>
    3798:	18 f0       	brcs	.+6      	; 0x37a0 <__mulsf3+0x12>
    379a:	95 23       	and	r25, r21
    379c:	09 f0       	breq	.+2      	; 0x37a0 <__mulsf3+0x12>
    379e:	a6 cf       	rjmp	.-180    	; 0x36ec <__fp_inf>
    37a0:	ab cf       	rjmp	.-170    	; 0x36f8 <__fp_nan>
    37a2:	11 24       	eor	r1, r1
    37a4:	ee cf       	rjmp	.-36     	; 0x3782 <__fp_szero>

000037a6 <__mulsf3x>:
    37a6:	ca df       	rcall	.-108    	; 0x373c <__fp_split3>
    37a8:	a0 f3       	brcs	.-24     	; 0x3792 <__mulsf3+0x4>

000037aa <__mulsf3_pse>:
    37aa:	95 9f       	mul	r25, r21
    37ac:	d1 f3       	breq	.-12     	; 0x37a2 <__mulsf3+0x14>
    37ae:	95 0f       	add	r25, r21
    37b0:	50 e0       	ldi	r21, 0x00	; 0
    37b2:	55 1f       	adc	r21, r21
    37b4:	62 9f       	mul	r22, r18
    37b6:	f0 01       	movw	r30, r0
    37b8:	72 9f       	mul	r23, r18
    37ba:	bb 27       	eor	r27, r27
    37bc:	f0 0d       	add	r31, r0
    37be:	b1 1d       	adc	r27, r1
    37c0:	63 9f       	mul	r22, r19
    37c2:	aa 27       	eor	r26, r26
    37c4:	f0 0d       	add	r31, r0
    37c6:	b1 1d       	adc	r27, r1
    37c8:	aa 1f       	adc	r26, r26
    37ca:	64 9f       	mul	r22, r20
    37cc:	66 27       	eor	r22, r22
    37ce:	b0 0d       	add	r27, r0
    37d0:	a1 1d       	adc	r26, r1
    37d2:	66 1f       	adc	r22, r22
    37d4:	82 9f       	mul	r24, r18
    37d6:	22 27       	eor	r18, r18
    37d8:	b0 0d       	add	r27, r0
    37da:	a1 1d       	adc	r26, r1
    37dc:	62 1f       	adc	r22, r18
    37de:	73 9f       	mul	r23, r19
    37e0:	b0 0d       	add	r27, r0
    37e2:	a1 1d       	adc	r26, r1
    37e4:	62 1f       	adc	r22, r18
    37e6:	83 9f       	mul	r24, r19
    37e8:	a0 0d       	add	r26, r0
    37ea:	61 1d       	adc	r22, r1
    37ec:	22 1f       	adc	r18, r18
    37ee:	74 9f       	mul	r23, r20
    37f0:	33 27       	eor	r19, r19
    37f2:	a0 0d       	add	r26, r0
    37f4:	61 1d       	adc	r22, r1
    37f6:	23 1f       	adc	r18, r19
    37f8:	84 9f       	mul	r24, r20
    37fa:	60 0d       	add	r22, r0
    37fc:	21 1d       	adc	r18, r1
    37fe:	82 2f       	mov	r24, r18
    3800:	76 2f       	mov	r23, r22
    3802:	6a 2f       	mov	r22, r26
    3804:	11 24       	eor	r1, r1
    3806:	9f 57       	subi	r25, 0x7F	; 127
    3808:	50 40       	sbci	r21, 0x00	; 0
    380a:	8a f0       	brmi	.+34     	; 0x382e <__mulsf3_pse+0x84>
    380c:	e1 f0       	breq	.+56     	; 0x3846 <__mulsf3_pse+0x9c>
    380e:	88 23       	and	r24, r24
    3810:	4a f0       	brmi	.+18     	; 0x3824 <__mulsf3_pse+0x7a>
    3812:	ee 0f       	add	r30, r30
    3814:	ff 1f       	adc	r31, r31
    3816:	bb 1f       	adc	r27, r27
    3818:	66 1f       	adc	r22, r22
    381a:	77 1f       	adc	r23, r23
    381c:	88 1f       	adc	r24, r24
    381e:	91 50       	subi	r25, 0x01	; 1
    3820:	50 40       	sbci	r21, 0x00	; 0
    3822:	a9 f7       	brne	.-22     	; 0x380e <__mulsf3_pse+0x64>
    3824:	9e 3f       	cpi	r25, 0xFE	; 254
    3826:	51 05       	cpc	r21, r1
    3828:	70 f0       	brcs	.+28     	; 0x3846 <__mulsf3_pse+0x9c>
    382a:	60 cf       	rjmp	.-320    	; 0x36ec <__fp_inf>
    382c:	aa cf       	rjmp	.-172    	; 0x3782 <__fp_szero>
    382e:	5f 3f       	cpi	r21, 0xFF	; 255
    3830:	ec f3       	brlt	.-6      	; 0x382c <__mulsf3_pse+0x82>
    3832:	98 3e       	cpi	r25, 0xE8	; 232
    3834:	dc f3       	brlt	.-10     	; 0x382c <__mulsf3_pse+0x82>
    3836:	86 95       	lsr	r24
    3838:	77 95       	ror	r23
    383a:	67 95       	ror	r22
    383c:	b7 95       	ror	r27
    383e:	f7 95       	ror	r31
    3840:	e7 95       	ror	r30
    3842:	9f 5f       	subi	r25, 0xFF	; 255
    3844:	c1 f7       	brne	.-16     	; 0x3836 <__mulsf3_pse+0x8c>
    3846:	fe 2b       	or	r31, r30
    3848:	88 0f       	add	r24, r24
    384a:	91 1d       	adc	r25, r1
    384c:	96 95       	lsr	r25
    384e:	87 95       	ror	r24
    3850:	97 f9       	bld	r25, 7
    3852:	08 95       	ret

00003854 <pow>:
    3854:	fa 01       	movw	r30, r20
    3856:	ee 0f       	add	r30, r30
    3858:	ff 1f       	adc	r31, r31
    385a:	30 96       	adiw	r30, 0x00	; 0
    385c:	21 05       	cpc	r18, r1
    385e:	31 05       	cpc	r19, r1
    3860:	99 f1       	breq	.+102    	; 0x38c8 <pow+0x74>
    3862:	61 15       	cp	r22, r1
    3864:	71 05       	cpc	r23, r1
    3866:	61 f4       	brne	.+24     	; 0x3880 <pow+0x2c>
    3868:	80 38       	cpi	r24, 0x80	; 128
    386a:	bf e3       	ldi	r27, 0x3F	; 63
    386c:	9b 07       	cpc	r25, r27
    386e:	49 f1       	breq	.+82     	; 0x38c2 <pow+0x6e>
    3870:	68 94       	set
    3872:	90 38       	cpi	r25, 0x80	; 128
    3874:	81 05       	cpc	r24, r1
    3876:	61 f0       	breq	.+24     	; 0x3890 <pow+0x3c>
    3878:	80 38       	cpi	r24, 0x80	; 128
    387a:	bf ef       	ldi	r27, 0xFF	; 255
    387c:	9b 07       	cpc	r25, r27
    387e:	41 f0       	breq	.+16     	; 0x3890 <pow+0x3c>
    3880:	99 23       	and	r25, r25
    3882:	42 f5       	brpl	.+80     	; 0x38d4 <pow+0x80>
    3884:	ff 3f       	cpi	r31, 0xFF	; 255
    3886:	e1 05       	cpc	r30, r1
    3888:	31 05       	cpc	r19, r1
    388a:	21 05       	cpc	r18, r1
    388c:	11 f1       	breq	.+68     	; 0x38d2 <pow+0x7e>
    388e:	e8 94       	clt
    3890:	08 94       	sec
    3892:	e7 95       	ror	r30
    3894:	d9 01       	movw	r26, r18
    3896:	aa 23       	and	r26, r26
    3898:	29 f4       	brne	.+10     	; 0x38a4 <pow+0x50>
    389a:	ab 2f       	mov	r26, r27
    389c:	be 2f       	mov	r27, r30
    389e:	f8 5f       	subi	r31, 0xF8	; 248
    38a0:	d0 f3       	brcs	.-12     	; 0x3896 <pow+0x42>
    38a2:	10 c0       	rjmp	.+32     	; 0x38c4 <pow+0x70>
    38a4:	ff 5f       	subi	r31, 0xFF	; 255
    38a6:	70 f4       	brcc	.+28     	; 0x38c4 <pow+0x70>
    38a8:	a6 95       	lsr	r26
    38aa:	e0 f7       	brcc	.-8      	; 0x38a4 <pow+0x50>
    38ac:	f7 39       	cpi	r31, 0x97	; 151
    38ae:	50 f0       	brcs	.+20     	; 0x38c4 <pow+0x70>
    38b0:	19 f0       	breq	.+6      	; 0x38b8 <pow+0x64>
    38b2:	ff 3a       	cpi	r31, 0xAF	; 175
    38b4:	38 f4       	brcc	.+14     	; 0x38c4 <pow+0x70>
    38b6:	9f 77       	andi	r25, 0x7F	; 127
    38b8:	9f 93       	push	r25
    38ba:	0c d0       	rcall	.+24     	; 0x38d4 <pow+0x80>
    38bc:	0f 90       	pop	r0
    38be:	07 fc       	sbrc	r0, 7
    38c0:	90 58       	subi	r25, 0x80	; 128
    38c2:	08 95       	ret
    38c4:	3e f0       	brts	.+14     	; 0x38d4 <pow+0x80>
    38c6:	18 cf       	rjmp	.-464    	; 0x36f8 <__fp_nan>
    38c8:	60 e0       	ldi	r22, 0x00	; 0
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	80 e8       	ldi	r24, 0x80	; 128
    38ce:	9f e3       	ldi	r25, 0x3F	; 63
    38d0:	08 95       	ret
    38d2:	4f e7       	ldi	r20, 0x7F	; 127
    38d4:	9f 77       	andi	r25, 0x7F	; 127
    38d6:	5f 93       	push	r21
    38d8:	4f 93       	push	r20
    38da:	3f 93       	push	r19
    38dc:	2f 93       	push	r18
    38de:	9e d0       	rcall	.+316    	; 0x3a1c <log>
    38e0:	2f 91       	pop	r18
    38e2:	3f 91       	pop	r19
    38e4:	4f 91       	pop	r20
    38e6:	5f 91       	pop	r21
    38e8:	52 df       	rcall	.-348    	; 0x378e <__mulsf3>
    38ea:	05 c0       	rjmp	.+10     	; 0x38f6 <exp>
    38ec:	19 f4       	brne	.+6      	; 0x38f4 <pow+0xa0>
    38ee:	0e f0       	brts	.+2      	; 0x38f2 <pow+0x9e>
    38f0:	fd ce       	rjmp	.-518    	; 0x36ec <__fp_inf>
    38f2:	46 cf       	rjmp	.-372    	; 0x3780 <__fp_zero>
    38f4:	01 cf       	rjmp	.-510    	; 0x36f8 <__fp_nan>

000038f6 <exp>:
    38f6:	2a df       	rcall	.-428    	; 0x374c <__fp_splitA>
    38f8:	c8 f3       	brcs	.-14     	; 0x38ec <pow+0x98>
    38fa:	96 38       	cpi	r25, 0x86	; 134
    38fc:	c0 f7       	brcc	.-16     	; 0x38ee <pow+0x9a>
    38fe:	07 f8       	bld	r0, 7
    3900:	0f 92       	push	r0
    3902:	e8 94       	clt
    3904:	2b e3       	ldi	r18, 0x3B	; 59
    3906:	3a ea       	ldi	r19, 0xAA	; 170
    3908:	48 eb       	ldi	r20, 0xB8	; 184
    390a:	5f e7       	ldi	r21, 0x7F	; 127
    390c:	4e df       	rcall	.-356    	; 0x37aa <__mulsf3_pse>
    390e:	0f 92       	push	r0
    3910:	0f 92       	push	r0
    3912:	0f 92       	push	r0
    3914:	4d b7       	in	r20, 0x3d	; 61
    3916:	5e b7       	in	r21, 0x3e	; 62
    3918:	0f 92       	push	r0
    391a:	c0 d0       	rcall	.+384    	; 0x3a9c <modf>
    391c:	e4 ee       	ldi	r30, 0xE4	; 228
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	16 d0       	rcall	.+44     	; 0x394e <__fp_powser>
    3922:	4f 91       	pop	r20
    3924:	5f 91       	pop	r21
    3926:	ef 91       	pop	r30
    3928:	ff 91       	pop	r31
    392a:	e5 95       	asr	r30
    392c:	ee 1f       	adc	r30, r30
    392e:	ff 1f       	adc	r31, r31
    3930:	49 f0       	breq	.+18     	; 0x3944 <exp+0x4e>
    3932:	fe 57       	subi	r31, 0x7E	; 126
    3934:	e0 68       	ori	r30, 0x80	; 128
    3936:	44 27       	eor	r20, r20
    3938:	ee 0f       	add	r30, r30
    393a:	44 1f       	adc	r20, r20
    393c:	fa 95       	dec	r31
    393e:	e1 f7       	brne	.-8      	; 0x3938 <exp+0x42>
    3940:	41 95       	neg	r20
    3942:	55 0b       	sbc	r21, r21
    3944:	32 d0       	rcall	.+100    	; 0x39aa <ldexp>
    3946:	0f 90       	pop	r0
    3948:	07 fe       	sbrs	r0, 7
    394a:	26 c0       	rjmp	.+76     	; 0x3998 <inverse>
    394c:	08 95       	ret

0000394e <__fp_powser>:
    394e:	df 93       	push	r29
    3950:	cf 93       	push	r28
    3952:	1f 93       	push	r17
    3954:	0f 93       	push	r16
    3956:	ff 92       	push	r15
    3958:	ef 92       	push	r14
    395a:	df 92       	push	r13
    395c:	7b 01       	movw	r14, r22
    395e:	8c 01       	movw	r16, r24
    3960:	68 94       	set
    3962:	05 c0       	rjmp	.+10     	; 0x396e <__fp_powser+0x20>
    3964:	da 2e       	mov	r13, r26
    3966:	ef 01       	movw	r28, r30
    3968:	1e df       	rcall	.-452    	; 0x37a6 <__mulsf3x>
    396a:	fe 01       	movw	r30, r28
    396c:	e8 94       	clt
    396e:	a5 91       	lpm	r26, Z+
    3970:	25 91       	lpm	r18, Z+
    3972:	35 91       	lpm	r19, Z+
    3974:	45 91       	lpm	r20, Z+
    3976:	55 91       	lpm	r21, Z+
    3978:	ae f3       	brts	.-22     	; 0x3964 <__fp_powser+0x16>
    397a:	ef 01       	movw	r28, r30
    397c:	8e dd       	rcall	.-1252   	; 0x349a <__addsf3x>
    397e:	fe 01       	movw	r30, r28
    3980:	97 01       	movw	r18, r14
    3982:	a8 01       	movw	r20, r16
    3984:	da 94       	dec	r13
    3986:	79 f7       	brne	.-34     	; 0x3966 <__fp_powser+0x18>
    3988:	df 90       	pop	r13
    398a:	ef 90       	pop	r14
    398c:	ff 90       	pop	r15
    398e:	0f 91       	pop	r16
    3990:	1f 91       	pop	r17
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <inverse>:
    3998:	9b 01       	movw	r18, r22
    399a:	ac 01       	movw	r20, r24
    399c:	60 e0       	ldi	r22, 0x00	; 0
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	80 e8       	ldi	r24, 0x80	; 128
    39a2:	9f e3       	ldi	r25, 0x3F	; 63
    39a4:	cd cd       	rjmp	.-1126   	; 0x3540 <__divsf3>
    39a6:	a2 ce       	rjmp	.-700    	; 0x36ec <__fp_inf>
    39a8:	ac c0       	rjmp	.+344    	; 0x3b02 <__fp_mpack>

000039aa <ldexp>:
    39aa:	d0 de       	rcall	.-608    	; 0x374c <__fp_splitA>
    39ac:	e8 f3       	brcs	.-6      	; 0x39a8 <inverse+0x10>
    39ae:	99 23       	and	r25, r25
    39b0:	d9 f3       	breq	.-10     	; 0x39a8 <inverse+0x10>
    39b2:	94 0f       	add	r25, r20
    39b4:	51 1d       	adc	r21, r1
    39b6:	bb f3       	brvs	.-18     	; 0x39a6 <inverse+0xe>
    39b8:	91 50       	subi	r25, 0x01	; 1
    39ba:	50 40       	sbci	r21, 0x00	; 0
    39bc:	94 f0       	brlt	.+36     	; 0x39e2 <ldexp+0x38>
    39be:	59 f0       	breq	.+22     	; 0x39d6 <ldexp+0x2c>
    39c0:	88 23       	and	r24, r24
    39c2:	32 f0       	brmi	.+12     	; 0x39d0 <ldexp+0x26>
    39c4:	66 0f       	add	r22, r22
    39c6:	77 1f       	adc	r23, r23
    39c8:	88 1f       	adc	r24, r24
    39ca:	91 50       	subi	r25, 0x01	; 1
    39cc:	50 40       	sbci	r21, 0x00	; 0
    39ce:	c1 f7       	brne	.-16     	; 0x39c0 <ldexp+0x16>
    39d0:	9e 3f       	cpi	r25, 0xFE	; 254
    39d2:	51 05       	cpc	r21, r1
    39d4:	44 f7       	brge	.-48     	; 0x39a6 <inverse+0xe>
    39d6:	88 0f       	add	r24, r24
    39d8:	91 1d       	adc	r25, r1
    39da:	96 95       	lsr	r25
    39dc:	87 95       	ror	r24
    39de:	97 f9       	bld	r25, 7
    39e0:	08 95       	ret
    39e2:	5f 3f       	cpi	r21, 0xFF	; 255
    39e4:	ac f0       	brlt	.+42     	; 0x3a10 <ldexp+0x66>
    39e6:	98 3e       	cpi	r25, 0xE8	; 232
    39e8:	9c f0       	brlt	.+38     	; 0x3a10 <ldexp+0x66>
    39ea:	bb 27       	eor	r27, r27
    39ec:	86 95       	lsr	r24
    39ee:	77 95       	ror	r23
    39f0:	67 95       	ror	r22
    39f2:	b7 95       	ror	r27
    39f4:	08 f4       	brcc	.+2      	; 0x39f8 <ldexp+0x4e>
    39f6:	b1 60       	ori	r27, 0x01	; 1
    39f8:	93 95       	inc	r25
    39fa:	c1 f7       	brne	.-16     	; 0x39ec <ldexp+0x42>
    39fc:	bb 0f       	add	r27, r27
    39fe:	58 f7       	brcc	.-42     	; 0x39d6 <ldexp+0x2c>
    3a00:	11 f4       	brne	.+4      	; 0x3a06 <ldexp+0x5c>
    3a02:	60 ff       	sbrs	r22, 0
    3a04:	e8 cf       	rjmp	.-48     	; 0x39d6 <ldexp+0x2c>
    3a06:	6f 5f       	subi	r22, 0xFF	; 255
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0e:	e3 cf       	rjmp	.-58     	; 0x39d6 <ldexp+0x2c>
    3a10:	b8 ce       	rjmp	.-656    	; 0x3782 <__fp_szero>
    3a12:	0e f0       	brts	.+2      	; 0x3a16 <ldexp+0x6c>
    3a14:	76 c0       	rjmp	.+236    	; 0x3b02 <__fp_mpack>
    3a16:	70 ce       	rjmp	.-800    	; 0x36f8 <__fp_nan>
    3a18:	68 94       	set
    3a1a:	68 ce       	rjmp	.-816    	; 0x36ec <__fp_inf>

00003a1c <log>:
    3a1c:	97 de       	rcall	.-722    	; 0x374c <__fp_splitA>
    3a1e:	c8 f3       	brcs	.-14     	; 0x3a12 <ldexp+0x68>
    3a20:	99 23       	and	r25, r25
    3a22:	d1 f3       	breq	.-12     	; 0x3a18 <ldexp+0x6e>
    3a24:	c6 f3       	brts	.-16     	; 0x3a16 <ldexp+0x6c>
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	1f 93       	push	r17
    3a2c:	0f 93       	push	r16
    3a2e:	ff 92       	push	r15
    3a30:	c9 2f       	mov	r28, r25
    3a32:	dd 27       	eor	r29, r29
    3a34:	88 23       	and	r24, r24
    3a36:	2a f0       	brmi	.+10     	; 0x3a42 <log+0x26>
    3a38:	21 97       	sbiw	r28, 0x01	; 1
    3a3a:	66 0f       	add	r22, r22
    3a3c:	77 1f       	adc	r23, r23
    3a3e:	88 1f       	adc	r24, r24
    3a40:	da f7       	brpl	.-10     	; 0x3a38 <log+0x1c>
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5f eb       	ldi	r21, 0xBF	; 191
    3a4a:	9f e3       	ldi	r25, 0x3F	; 63
    3a4c:	88 39       	cpi	r24, 0x98	; 152
    3a4e:	20 f0       	brcs	.+8      	; 0x3a58 <log+0x3c>
    3a50:	80 3e       	cpi	r24, 0xE0	; 224
    3a52:	30 f0       	brcs	.+12     	; 0x3a60 <log+0x44>
    3a54:	21 96       	adiw	r28, 0x01	; 1
    3a56:	8f 77       	andi	r24, 0x7F	; 127
    3a58:	0f dd       	rcall	.-1506   	; 0x3478 <__addsf3>
    3a5a:	ec e0       	ldi	r30, 0x0C	; 12
    3a5c:	f1 e0       	ldi	r31, 0x01	; 1
    3a5e:	03 c0       	rjmp	.+6      	; 0x3a66 <log+0x4a>
    3a60:	0b dd       	rcall	.-1514   	; 0x3478 <__addsf3>
    3a62:	e9 e3       	ldi	r30, 0x39	; 57
    3a64:	f1 e0       	ldi	r31, 0x01	; 1
    3a66:	73 df       	rcall	.-282    	; 0x394e <__fp_powser>
    3a68:	8b 01       	movw	r16, r22
    3a6a:	be 01       	movw	r22, r28
    3a6c:	ec 01       	movw	r28, r24
    3a6e:	fb 2e       	mov	r15, r27
    3a70:	6f 57       	subi	r22, 0x7F	; 127
    3a72:	71 09       	sbc	r23, r1
    3a74:	75 95       	asr	r23
    3a76:	77 1f       	adc	r23, r23
    3a78:	88 0b       	sbc	r24, r24
    3a7a:	99 0b       	sbc	r25, r25
    3a7c:	fc dd       	rcall	.-1032   	; 0x3676 <__floatsisf>
    3a7e:	28 e1       	ldi	r18, 0x18	; 24
    3a80:	32 e7       	ldi	r19, 0x72	; 114
    3a82:	41 e3       	ldi	r20, 0x31	; 49
    3a84:	5f e3       	ldi	r21, 0x3F	; 63
    3a86:	8f de       	rcall	.-738    	; 0x37a6 <__mulsf3x>
    3a88:	af 2d       	mov	r26, r15
    3a8a:	98 01       	movw	r18, r16
    3a8c:	ae 01       	movw	r20, r28
    3a8e:	ff 90       	pop	r15
    3a90:	0f 91       	pop	r16
    3a92:	1f 91       	pop	r17
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	00 dd       	rcall	.-1536   	; 0x349a <__addsf3x>
    3a9a:	3f ce       	rjmp	.-898    	; 0x371a <__fp_round>

00003a9c <modf>:
    3a9c:	fa 01       	movw	r30, r20
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	aa 0f       	add	r26, r26
    3aa2:	bb 1f       	adc	r27, r27
    3aa4:	9b 01       	movw	r18, r22
    3aa6:	ac 01       	movw	r20, r24
    3aa8:	bf 57       	subi	r27, 0x7F	; 127
    3aaa:	28 f4       	brcc	.+10     	; 0x3ab6 <modf+0x1a>
    3aac:	22 27       	eor	r18, r18
    3aae:	33 27       	eor	r19, r19
    3ab0:	44 27       	eor	r20, r20
    3ab2:	50 78       	andi	r21, 0x80	; 128
    3ab4:	1f c0       	rjmp	.+62     	; 0x3af4 <modf+0x58>
    3ab6:	b7 51       	subi	r27, 0x17	; 23
    3ab8:	88 f4       	brcc	.+34     	; 0x3adc <modf+0x40>
    3aba:	ab 2f       	mov	r26, r27
    3abc:	00 24       	eor	r0, r0
    3abe:	46 95       	lsr	r20
    3ac0:	37 95       	ror	r19
    3ac2:	27 95       	ror	r18
    3ac4:	01 1c       	adc	r0, r1
    3ac6:	a3 95       	inc	r26
    3ac8:	d2 f3       	brmi	.-12     	; 0x3abe <modf+0x22>
    3aca:	00 20       	and	r0, r0
    3acc:	69 f0       	breq	.+26     	; 0x3ae8 <modf+0x4c>
    3ace:	22 0f       	add	r18, r18
    3ad0:	33 1f       	adc	r19, r19
    3ad2:	44 1f       	adc	r20, r20
    3ad4:	b3 95       	inc	r27
    3ad6:	da f3       	brmi	.-10     	; 0x3ace <modf+0x32>
    3ad8:	0d d0       	rcall	.+26     	; 0x3af4 <modf+0x58>
    3ada:	cd cc       	rjmp	.-1638   	; 0x3476 <__subsf3>
    3adc:	61 30       	cpi	r22, 0x01	; 1
    3ade:	71 05       	cpc	r23, r1
    3ae0:	a0 e8       	ldi	r26, 0x80	; 128
    3ae2:	8a 07       	cpc	r24, r26
    3ae4:	b9 46       	sbci	r27, 0x69	; 105
    3ae6:	30 f4       	brcc	.+12     	; 0x3af4 <modf+0x58>
    3ae8:	9b 01       	movw	r18, r22
    3aea:	ac 01       	movw	r20, r24
    3aec:	66 27       	eor	r22, r22
    3aee:	77 27       	eor	r23, r23
    3af0:	88 27       	eor	r24, r24
    3af2:	90 78       	andi	r25, 0x80	; 128
    3af4:	30 96       	adiw	r30, 0x00	; 0
    3af6:	21 f0       	breq	.+8      	; 0x3b00 <modf+0x64>
    3af8:	20 83       	st	Z, r18
    3afa:	31 83       	std	Z+1, r19	; 0x01
    3afc:	42 83       	std	Z+2, r20	; 0x02
    3afe:	53 83       	std	Z+3, r21	; 0x03
    3b00:	08 95       	ret

00003b02 <__fp_mpack>:
    3b02:	9f 3f       	cpi	r25, 0xFF	; 255
    3b04:	31 f0       	breq	.+12     	; 0x3b12 <__fp_mpack_finite+0xc>

00003b06 <__fp_mpack_finite>:
    3b06:	91 50       	subi	r25, 0x01	; 1
    3b08:	20 f4       	brcc	.+8      	; 0x3b12 <__fp_mpack_finite+0xc>
    3b0a:	87 95       	ror	r24
    3b0c:	77 95       	ror	r23
    3b0e:	67 95       	ror	r22
    3b10:	b7 95       	ror	r27
    3b12:	88 0f       	add	r24, r24
    3b14:	91 1d       	adc	r25, r1
    3b16:	96 95       	lsr	r25
    3b18:	87 95       	ror	r24
    3b1a:	97 f9       	bld	r25, 7
    3b1c:	08 95       	ret

00003b1e <__udivmodhi4>:
    3b1e:	aa 1b       	sub	r26, r26
    3b20:	bb 1b       	sub	r27, r27
    3b22:	51 e1       	ldi	r21, 0x11	; 17
    3b24:	07 c0       	rjmp	.+14     	; 0x3b34 <__udivmodhi4_ep>

00003b26 <__udivmodhi4_loop>:
    3b26:	aa 1f       	adc	r26, r26
    3b28:	bb 1f       	adc	r27, r27
    3b2a:	a6 17       	cp	r26, r22
    3b2c:	b7 07       	cpc	r27, r23
    3b2e:	10 f0       	brcs	.+4      	; 0x3b34 <__udivmodhi4_ep>
    3b30:	a6 1b       	sub	r26, r22
    3b32:	b7 0b       	sbc	r27, r23

00003b34 <__udivmodhi4_ep>:
    3b34:	88 1f       	adc	r24, r24
    3b36:	99 1f       	adc	r25, r25
    3b38:	5a 95       	dec	r21
    3b3a:	a9 f7       	brne	.-22     	; 0x3b26 <__udivmodhi4_loop>
    3b3c:	80 95       	com	r24
    3b3e:	90 95       	com	r25
    3b40:	bc 01       	movw	r22, r24
    3b42:	cd 01       	movw	r24, r26
    3b44:	08 95       	ret

00003b46 <__divmodhi4>:
    3b46:	97 fb       	bst	r25, 7
    3b48:	09 2e       	mov	r0, r25
    3b4a:	07 26       	eor	r0, r23
    3b4c:	0a d0       	rcall	.+20     	; 0x3b62 <__divmodhi4_neg1>
    3b4e:	77 fd       	sbrc	r23, 7
    3b50:	04 d0       	rcall	.+8      	; 0x3b5a <__divmodhi4_neg2>
    3b52:	e5 df       	rcall	.-54     	; 0x3b1e <__udivmodhi4>
    3b54:	06 d0       	rcall	.+12     	; 0x3b62 <__divmodhi4_neg1>
    3b56:	00 20       	and	r0, r0
    3b58:	1a f4       	brpl	.+6      	; 0x3b60 <__divmodhi4_exit>

00003b5a <__divmodhi4_neg2>:
    3b5a:	70 95       	com	r23
    3b5c:	61 95       	neg	r22
    3b5e:	7f 4f       	sbci	r23, 0xFF	; 255

00003b60 <__divmodhi4_exit>:
    3b60:	08 95       	ret

00003b62 <__divmodhi4_neg1>:
    3b62:	f6 f7       	brtc	.-4      	; 0x3b60 <__divmodhi4_exit>
    3b64:	90 95       	com	r25
    3b66:	81 95       	neg	r24
    3b68:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6a:	08 95       	ret

00003b6c <_exit>:
    3b6c:	f8 94       	cli

00003b6e <__stop_program>:
    3b6e:	ff cf       	rjmp	.-2      	; 0x3b6e <__stop_program>
